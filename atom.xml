<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[里脊串的开发随笔]]></title>
  <subtitle><![CDATA[途有境而观无垠]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://adad184.com/"/>
  <updated>2015-10-09T07:35:47.000Z</updated>
  <id>http://adad184.com/</id>
  
  <author>
    <name><![CDATA[里脊串]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Tips:使用Xcode查找项目中的中文字符串]]></title>
    <link href="http://adad184.com/2015/10/09/tips-search-chinese-string/"/>
    <id>http://adad184.com/2015/10/09/tips-search-chinese-string/</id>
    <published>2015-10-09T07:37:33.000Z</published>
    <updated>2015-10-09T07:35:47.000Z</updated>
    <content type="html"><![CDATA[<p>项目刚启动的时候 我们一般为了快速开发 会在使用字符串的时候直接选择硬编码到代码中 比如<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.lblTime</span><span class="variable">.text</span> = <span class="string">@"1分钟前"</span>;</span><br></pre></td></tr></table></figure></p>
<p>但是之后 如果有国际化的需求的话 我们又会改成这样<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.lblTime</span><span class="variable">.text</span> = <span class="built_in">NSLocalizedString</span>(<span class="string">@"one_min_ago"</span>, <span class="string">@"@"</span><span class="number">1</span>分钟前<span class="string">""</span>)];</span><br></pre></td></tr></table></figure></p>
<p>不过随着代码越来越多 不免有疏漏 所以有时我们要去搜索一些漏网之鱼 这里分享一个快捷的方法</p>
<blockquote>
<ol>
<li>打开”Find Navigator” </li>
<li>切换搜索模式到 “Find &gt; Regular Expression” </li>
<li>输入<code>@&quot;\w*[\u4E00-\u9FA5]+\w*&quot;</code>  (swift请去掉”@” 输入<code>&quot;\w*[\u4E00-\u9FA5]+\w*&quot;</code> 就好了)</li>
</ol>
</blockquote>
<p>看看效果<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-10-09-tips-search-chinese-string1.png" alt=""></p>
<p>啊哦  发现了几个漏网之鱼  :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>项目刚启动的时候 我们一般为了快速开发 会在使用字符串的时候直接选择硬编码到代码中 比如<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</s]]>
    </summary>
    
      <category term="Tips" scheme="http://adad184.com/tags/Tips/"/>
    
      <category term="Xcode" scheme="http://adad184.com/tags/Xcode/"/>
    
      <category term="字符串" scheme="http://adad184.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="技巧心的" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[再见ZXing 使用系统原生代码处理QRCode]]></title>
    <link href="http://adad184.com/2015/09/30/goodbye-zxing/"/>
    <id>http://adad184.com/2015/09/30/goodbye-zxing/</id>
    <published>2015-09-30T07:37:33.000Z</published>
    <updated>2015-10-09T03:51:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p>二维码每个人都一定不陌生 尤其是在支付宝和微信的努力下 相信每个人都或多或少的使用过”扫一扫”这个功能<br>而作为开发者 大家都应该有过二维码的开发经验 不管是练习还是研究 或者是公司的项目(尤其是社交类的APP 基本都有扫一扫加好友这个功能吧?) </p>
<h2 id="介绍">介绍</h2><hr>
<p>说到二维码 其实我们现在生活中接触到的都是<a href="https://en.wikipedia.org/wiki/QR_code" target="_blank" rel="external">QRCode</a> —由日本人在上个世纪末用于汽车工业的一项发明 如今在移动互联网发光发亮<br>而实际上 除了QRCode 还有很多二维码的类型 最出名的应该就是<a href="https://en.wikipedia.org/wiki/Data_Matrix" target="_blank" rel="external">DataMatrix</a>了 而在4,5年前 一度还有很多QRCode的竞争对手出现 比如微软推出的<a href="https://en.wikipedia.org/wiki/High_Capacity_Color_Barcode#Microsoft_Tag" target="_blank" rel="external">Microsoft Tag</a> 还有个人觉得很有意思的<a href="http://www.spyderlynk.com/snaptags-qr-codes/" target="_blank" rel="external">SnapTag</a> 可是在这几年的发展过程中 还是QRCode笑到了最后 所以现在我们一般提起二维码 就指的是QRCode 下面我们就用QRCode来代替二维码</p>
<p>对于开发人员来说 熟悉的第三方QRCode库有:</p>
<blockquote>
<ul>
<li><p><a href="https://github.com/zxing/zxing" target="_blank" rel="external">ZXing</a><br>Google出品并开源 一直到现在都还有专人维护 是世界上使用最广的二维码库 iOS上比较稳定的移植版是<a href="https://github.com/TheLevelUp/ZXingObjC" target="_blank" rel="external">ZXingObj</a></p>
</li>
<li><p><a href="http://zbar.sourceforge.net/" target="_blank" rel="external">ZBar</a><br>功能上与ZXing不相伯仲 可惜的是项目在2012年之后就不维护了 虽然代码到现在还可以使用</p>
</li>
</ul>
</blockquote>
<p>而我从开始到现在一直是ZXing的忠实用户 除了Google的光环之外 那时候的ZXing资料也比ZBar多很多 不过随着iOS7的发布 苹果推出了内建的二维码扫描功能 这让这些第三方库多少显得有点尴尬了 </p>
<p>回到今天的主题上 为什么说要跟ZXing说再见呢? 其实我目前做的项目使用的也是ZXing 不过在开发过程中发现了一些很严重而且绕不过去的问题 比如下面这张图<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-30-goodbye-zxing1.jpg" alt="此处输入图片的描述"><br>如果使用相册读取QRCode的功能 ZXing是无法识别的 不信大家可以去<a href="http://zxing.org/w/decode.jspx" target="_blank" rel="external">zxing.org</a> 我也去Github<a href="https://github.com/zxing/zxing/issues/416" target="_blank" rel="external">提了issue</a> 不过作者也没有给出有效的解决办法 所以只能跟ZXing说88了(不过ZBar是可以扫描出来的哟!)</p>
<p>先分析一下 我们使用QRCode一般都是要做如下几种场景的操作</p>
<blockquote>
<ul>
<li>扫描<br>比如 微信的”<strong>扫一扫</strong>“加好友</li>
<li>读取<br>比如 微信中长按图片 会弹出”<strong>识别图中二维码</strong>“这个功能</li>
<li>生成<br>比如 微信的”<strong>我的二维码</strong>“功能</li>
</ul>
</blockquote>
<p>接下来我们就分三个部分分别来介绍一下如何实现对应的功能(要注意的是 “<strong>读取图片</strong>“这个功能只有在iOS8以上的系统才能支持 iOS7的话 建议还是使用ZXing或者ZBar)</p>
<h2 id="扫描">扫描</h2><hr>
<p>扫描主要使用的是<strong>AVFoundation</strong> 使用起来也非常的简单 正常的初始化流程如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Example1Controller</span>()</span></span><br><span class="line">&lt;</span><br><span class="line"><span class="built_in">AVCaptureMetadataOutputObjectsDelegate</span>,</span><br><span class="line"><span class="built_in">UIAlertViewDelegate</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *scanRectView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">AVCaptureDevice</span>            *device;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">AVCaptureDeviceInput</span>       *input;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">AVCaptureMetadataOutput</span>    *output;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">AVCaptureSession</span>           *session;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">AVCaptureVideoPreviewLayer</span> *preview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Example1Controller</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.device</span> = [<span class="built_in">AVCaptureDevice</span> defaultDeviceWithMediaType:<span class="built_in">AVMediaTypeVideo</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.input</span> = [<span class="built_in">AVCaptureDeviceInput</span> deviceInputWithDevice:<span class="keyword">self</span><span class="variable">.device</span> error:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.output</span> = [[<span class="built_in">AVCaptureMetadataOutput</span> alloc]init];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.output</span> setMetadataObjectsDelegate:<span class="keyword">self</span> queue:dispatch_get_main_queue()];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.session</span> = [[<span class="built_in">AVCaptureSession</span> alloc]init];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> setSessionPreset:([<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span><span class="variable">.size</span><span class="variable">.height</span>&lt;<span class="number">500</span>)?<span class="built_in">AVCaptureSessionPreset640x480</span>:<span class="built_in">AVCaptureSessionPresetHigh</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> addInput:<span class="keyword">self</span><span class="variable">.input</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> addOutput:<span class="keyword">self</span><span class="variable">.output</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.output</span><span class="variable">.metadataObjectTypes</span>=@[<span class="built_in">AVMetadataObjectTypeQRCode</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.output</span><span class="variable">.rectOfInterest</span> = scanRect;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.preview</span> = [<span class="built_in">AVCaptureVideoPreviewLayer</span> layerWithSession:<span class="keyword">self</span><span class="variable">.session</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.preview</span><span class="variable">.videoGravity</span> = <span class="built_in">AVLayerVideoGravityResizeAspectFill</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.preview</span><span class="variable">.frame</span> = [<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span><span class="variable">.layer</span> insertSublayer:<span class="keyword">self</span><span class="variable">.preview</span> atIndex:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开始捕获</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> startRunning];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)captureOutput:(<span class="built_in">AVCaptureOutput</span> *)captureOutput didOutputMetadataObjects:(<span class="built_in">NSArray</span> *)metadataObjects fromConnection:(<span class="built_in">AVCaptureConnection</span> *)connection</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( (metadataObjects<span class="variable">.count</span>==<span class="number">0</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (metadataObjects<span class="variable">.count</span>&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.session</span> stopRunning];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">AVMetadataMachineReadableCodeObject</span> *metadataObject = metadataObjects<span class="variable">.firstObject</span>;</span><br><span class="line">        <span class="comment">//输出扫描字符串</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:metadataObject<span class="variable">.stringValue</span> message:<span class="string">@""</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"ok"</span> otherButtonTitles: <span class="literal">nil</span>];</span><br><span class="line">        </span><br><span class="line">        [alert show];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView willDismissWithButtonIndex:(<span class="built_in">NSInteger</span>)buttonIndex</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> startRunning];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AVFoundation的部分我就不多介绍了 只要按照上面的代码初始化 即可实现二维码扫描的功能 是不是很简单?</p>
<p>不过这里还不能完全满足我们的要求 因为如果运行以后你会发现 现在是全屏扫描 而不是像我们印象中的那种在屏幕中间有个框 只有在框中的二维码才会被扫描到 不过其实改起来也很简单 <strong>AVCaptureMetadataOutput</strong>有个属性<code>rectOfInterest</code>就是做这个事情的<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AVCaptureMetadataOutput</span> : <span class="title">AVCaptureOutput</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> @property rectOfInterest</span><br><span class="line"> @abstract</span><br><span class="line">	Specifies a rectangle of interest for limiting the search area for visual metadata.</span><br><span class="line"> </span><br><span class="line"> @discussion</span><br><span class="line">	The value of this property is a CGRect that determines the receiver's rectangle of interest for each frame of video.  </span><br><span class="line">	The rectangle's origin is top left and is relative to the coordinate space of the device providing the metadata.  Specifying </span><br><span class="line">	a rectOfInterest may improve detection performance for certain types of metadata. The default value of this property is the </span><br><span class="line">	value CGRectMake(0, 0, 1, 1).  Metadata objects whose bounds do not intersect with the rectOfInterest will not be returned.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGRect</span> rectOfInterest <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到 <code>rectOfInterest</code>的值的范围都是0-1 是按比例取值而不是实际尺寸 不过其实也很简单 只要换算一下就好了 接下来我们添加<strong>取景框</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGSize</span> windowSize = [<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span><span class="variable">.size</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGSize</span> scanSize = <span class="built_in">CGSizeMake</span>(windowSize<span class="variable">.width</span>*<span class="number">3</span>/<span class="number">4</span>, windowSize<span class="variable">.width</span>*<span class="number">3</span>/<span class="number">4</span>);</span><br><span class="line"><span class="built_in">CGRect</span> scanRect = <span class="built_in">CGRectMake</span>((windowSize<span class="variable">.width</span>-scanSize<span class="variable">.width</span>)/<span class="number">2</span>, (windowSize<span class="variable">.height</span>-scanSize<span class="variable">.height</span>)/<span class="number">2</span>, scanSize<span class="variable">.width</span>, scanSize<span class="variable">.height</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算rectOfInterest 注意x,y交换位置</span></span><br><span class="line">scanRect = <span class="built_in">CGRectMake</span>(scanRect<span class="variable">.origin</span><span class="variable">.y</span>/windowSize<span class="variable">.height</span>, scanRect<span class="variable">.origin</span><span class="variable">.x</span>/windowSize<span class="variable">.width</span>, scanRect<span class="variable">.size</span><span class="variable">.height</span>/windowSize<span class="variable">.height</span>,scanRect<span class="variable">.size</span><span class="variable">.width</span>/windowSize<span class="variable">.width</span>);</span><br><span class="line"><span class="keyword">self</span><span class="variable">.output</span><span class="variable">.rectOfInterest</span> = scanRect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span><span class="variable">.scanRectView</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">[<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.scanRectView</span>];</span><br><span class="line"><span class="keyword">self</span><span class="variable">.scanRectView</span><span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, scanSize<span class="variable">.width</span>, scanSize<span class="variable">.height</span>);</span><br><span class="line"><span class="keyword">self</span><span class="variable">.scanRectView</span><span class="variable">.center</span> = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMidX</span>([<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>), <span class="built_in">CGRectGetMidY</span>([<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>));</span><br><span class="line"><span class="keyword">self</span><span class="variable">.scanRectView</span><span class="variable">.layer</span><span class="variable">.borderColor</span> = [<span class="built_in">UIColor</span> redColor]<span class="variable">.CGColor</span>;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.scanRectView</span><span class="variable">.layer</span><span class="variable">.borderWidth</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>这里唯一要注意的一点是 rectOfInterest 都是按照横屏来计算的 所以当竖屏的情况下 x轴和y轴要交换一下 </p>
<p>看看实际效果<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-30-goodbye-zxing2.jpg" alt=""></p>
<h2 id="读取">读取</h2><hr>
<p>读取主要用到<strong>CoreImage</strong> 不过要强调的是<strong>读取二维码的功能只有在iOS8之后才支持</strong><br>读取的代码实现就更简单了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> * srcImage = qrcodeImage;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CIContext</span> *context = [<span class="built_in">CIContext</span> contextWithOptions:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">CIDetector</span> *detector = [<span class="built_in">CIDetector</span> detectorOfType:<span class="built_in">CIDetectorTypeQRCode</span> context:context options:@&#123;<span class="built_in">CIDetectorAccuracy</span>:<span class="built_in">CIDetectorAccuracyHigh</span>&#125;];</span><br><span class="line"><span class="built_in">CIImage</span> *image = [<span class="built_in">CIImage</span> imageWith<span class="built_in">CGImage</span>:srcImage<span class="variable">.CGImage</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *features = [detector featuresInImage:image];</span><br><span class="line"><span class="built_in">CIQRCodeFeature</span> *feature = [features firstObject];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *result = feature<span class="variable">.messageString</span>;</span><br></pre></td></tr></table></figure>
<p>看看实际效果<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-30-goodbye-zxing3.jpg" alt=""></p>
<h2 id="生成">生成</h2><hr>
<p>生成也是用到CoreImage 其步骤稍微多一点 代码如下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *text = <span class="keyword">self</span><span class="variable">.tfCode</span><span class="variable">.text</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSData</span> *stringData = [text dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成</span></span><br><span class="line"><span class="built_in">CIFilter</span> *qrFilter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@"CIQRCodeGenerator"</span>];</span><br><span class="line">[qrFilter setValue:stringData forKey:<span class="string">@"inputMessage"</span>];</span><br><span class="line">[qrFilter setValue:<span class="string">@"M"</span> forKey:<span class="string">@"inputCorrectionLevel"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIColor</span> *onColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="built_in">UIColor</span> *offColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line"></span><br><span class="line"><span class="comment">//上色</span></span><br><span class="line"><span class="built_in">CIFilter</span> *colorFilter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@"CIFalseColor"</span></span><br><span class="line">                                   keysAndValues:</span><br><span class="line">                         <span class="string">@"inputImage"</span>,qrFilter<span class="variable">.outputImage</span>,</span><br><span class="line">                         <span class="string">@"inputColor0"</span>,[<span class="built_in">CIColor</span> colorWith<span class="built_in">CGColor</span>:onColor<span class="variable">.CGColor</span>],</span><br><span class="line">                         <span class="string">@"inputColor1"</span>,[<span class="built_in">CIColor</span> colorWith<span class="built_in">CGColor</span>:offColor<span class="variable">.CGColor</span>],</span><br><span class="line">                         <span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">CIImage</span> *qrImage = colorFilter<span class="variable">.outputImage</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制</span></span><br><span class="line"><span class="built_in">CGSize</span> size = <span class="built_in">CGSizeMake</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"><span class="built_in">CGImageRef</span> cgImage = [[<span class="built_in">CIContext</span> contextWithOptions:<span class="literal">nil</span>] create<span class="built_in">CGImage</span>:qrImage fromRect:qrImage<span class="variable">.extent</span>];</span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContext</span>(size);</span><br><span class="line"><span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"><span class="built_in">CGContextSetInterpolationQuality</span>(context, k<span class="built_in">CGInterpolationNone</span>);</span><br><span class="line"><span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, -<span class="number">1.0</span>);</span><br><span class="line"><span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGContextGetClipBoundingBox</span>(context), cgImage);</span><br><span class="line"><span class="built_in">UIImage</span> *codeImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"><span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGImageRelease</span>(cgImage);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>首先通过<code>[CIFilter filterWithName:@&quot;CIQRCodeGenerator&quot;]</code>生成QRCode</li>
<li>然后通过<code>[CIFilter filterWithName:@&quot;CIFalseColor&quot;]</code>上色(当然这一步不是必须的 如果仅仅需要白底黑块的QRCode 可以跳过这一步)</li>
<li>最后无损放大并绘制QRCode (上面两步生成的QRCode很小 大概是31*31 如果不放大 就会很模糊)</li>
</ul>
<p>这里要注意的是 在最后一步一定要使用<code>CGContextScaleCTM(context, 1.0, -1.0)</code>来翻转一下图片 不然生成的QRCode就是上下颠倒的哦</p>
<p>看看实际效果<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-30-goodbye-zxing4.jpg" alt=""></p>
<h1 id="小结">小结</h1><hr>
<p>源码和Demo请点<a href="https://github.com/adad184/DemoQRCode" target="_blank" rel="external">这里</a></p>
<p>如果不需要对QRCode进行深入的探索的话 相信各位看完本文后 绝大多数的关于QRCode的使用问题 应该都可以迎刃而解了 如果需要进一步了解QRCode的原理 我推荐陈皓的这篇<a href="http://coolshell.cn/articles/10590.html" target="_blank" rel="external">二维码的生成细节和原理</a></p>
<p>最后 祝大家国庆愉快 不要加班哟~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p>二维码每个人都一定不陌生 尤其是在支付宝和微信的努力下 相信每个人都或多或少的使用过”扫一扫”这个功能<br>而作为开发者 大家都应该有过二维码的开发经验 不管是练习还是研究 或者是公司的项目(尤其是社交类的APP 基本都有扫]]>
    </summary>
    
      <category term="QRCode" scheme="http://adad184.com/tags/QRCode/"/>
    
      <category term="ZXing" scheme="http://adad184.com/tags/ZXing/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用appetize.io为你的demo创建在线预览]]></title>
    <link href="http://adad184.com/2015/09/10/introduce-to-appetize-io/"/>
    <id>http://adad184.com/2015/09/10/introduce-to-appetize-io/</id>
    <published>2015-09-10T07:37:33.000Z</published>
    <updated>2015-09-11T03:00:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p>前几天开源了<a href="https://github.com/adad184/MMPopupView" target="_blank" rel="external">MMPopupView</a> 今天想上传到<a href="www.cocoacontrols.com">CocoaControls</a>上(CocoaControls应该不用过多介绍了吧? 想发现些新鲜好玩的控件 就每天去瞟两眼) 发现上传时填写信息项里多了一步<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-11-introduce-to-appetize-io4.jpeg" alt=""></p>
<p>联想到CocoaControls之前改版了 应该是那个时候加入的<strong>appetize.io</strong>这个功能 简单来说 就是能让你的demo直接跑在网页里的服务 你只要把demo上传到<strong>appetize.io</strong>的网站上就可以了 </p>
<a id="more"></a>
<h1 id="介绍">介绍</h1><hr>
<p><a href="https://appetize.io/" target="_blank" rel="external"><strong>appetize.io</strong></a>是一个为iOS和Android提供APP在线演示的网站 只要将你的demo程序上传到<strong>appetize.io</strong> 就可以直接在网页上运行你的demo </p>
<p>按照官网的教程 先编译一个模拟器版本 然后再将对应的.app打包成zip上传 填入你的邮箱即可<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-11-introduce-to-appetize-io1.jpeg" alt=""></p>
<p>之后就可以在你的邮箱中收到一封带有对应信息的邮件<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-11-introduce-to-appetize-io2.jpeg" alt=""></p>
<p>除了<a href="https://appetize.io/app/ke24eekmfccbupfvhfxekx4m5r?device=iphone5s&amp;scale=75&amp;orientation=portrait" target="_blank" rel="external">演示的地址</a>之外 还有对应的<strong>public key</strong>和<strong>private key</strong> 而<strong>public key</strong>就是前言中提到的<strong>CocoaControls</strong>需要的字段 把这个填进去就可以在<strong>CocoaControls</strong>中直接预览你的demo了 如我这个<a href="https://www.cocoacontrols.com/controls/mmpopupview/" target="_blank" rel="external">例子</a> </p>
<p>不仅如此 你还可以直接在<a href="https://appetize.io/embed" target="_blank" rel="external">官网上生成</a>嵌入到其他的网页中的代码(CocoaControls就是这么做的 比之前的截图预览方便多了) 各种参数还可以任意定制哦<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-11-introduce-to-appetize-io3.jpeg" alt=""></p>
<p>当然如果你有更高级的需求 也可以直接使用<a href="https://appetize.io/api" target="_blank" rel="external">他们的API</a>来操作 这个就不多介绍了</p>
<h1 id="小结">小结</h1><hr>
<p>这个东西还真是挺有趣的 原理也不复杂 动画是通过远端截图一张张的来呈现的 点击事件则是本端监听并传输给远端 不过好像每运行一个实际就要开一个模拟器 不晓得服务器端是不是用类似docker的技术实现的? </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p>前几天开源了<a href="https://github.com/adad184/MMPopupView">MMPopupView</a> 今天想上传到<a href="www.cocoacontrols.com">CocoaControls</a>上(CocoaControls应该不用过多介绍了吧? 想发现些新鲜好玩的控件 就每天去瞟两眼) 发现上传时填写信息项里多了一步<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-11-introduce-to-appetize-io4.jpeg" alt=""></p>
<p>联想到CocoaControls之前改版了 应该是那个时候加入的<strong>appetize.io</strong>这个功能 简单来说 就是能让你的demo直接跑在网页里的服务 你只要把demo上传到<strong>appetize.io</strong>的网站上就可以了 </p>]]>
    
    </summary>
    
      <category term="appetize.io" scheme="http://adad184.com/tags/appetize-io/"/>
    
      <category term="demo" scheme="http://adad184.com/tags/demo/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目:MMPopupView]]></title>
    <link href="http://adad184.com/2015/09/08/opensource-mmpopupview/"/>
    <id>http://adad184.com/2015/09/08/opensource-mmpopupview/</id>
    <published>2015-09-08T07:37:33.000Z</published>
    <updated>2015-09-16T06:27:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p>弹出框组件应该是绝大多数应用都少不了的(只有极少数精心设计的APP会用不到) 当然我们的APP也不例外 之前我们APP的弹出框组件是我用<a href="https://github.com/facebook/pop" target="_blank" rel="external">pop</a>写的 可是后来发现与系统原生动画有些冲突(pop内部用到了CATransaction 导致跟系统动画同时发生时会有问题) 所以上周花了大半天时间重写了一下<a href="https://github.com/adad184/MMPopupView" target="_blank" rel="external">MMPopupView</a>这个组件</p>
<p>因为新写的组件完全是用<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>写的 我觉得是个非常好的示例教程 结合之前我写的<a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/" target="_blank" rel="external">Masonry入门教程</a> 应该可以更好的理解和运用Masonry/Autolayout 所以我又花了一点时间重新整理成了一个简单的开源库 有兴趣的朋友可以研究一下</p>
<p>运行的demo可以在<a href="http://v.youku.com/v_show/id_XMTMzMDIxNjA5Mg==.html" target="_blank" rel="external">这里</a>查看</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-07-opensource-mmpopupview0.jpg" alt=""></p>
<a id="more"></a>
<h1 id="介绍">介绍</h1><hr>
<p>整体的组成大概就是这个样子<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-07-opensource-mmpopupview8.jpg" alt=""></p>
<p><strong>MMPopupWindow</strong>就是用来显示所有弹出框的容器 相对直接显示在当前UIWindow上来说 弄个独立的Window出来当容器的会更好 </p>
<p><strong>MMPopupView</strong>就是弹出框的基类 所有的弹出框只要继承自这个类 就具备了显示的能力 用户只要关注于弹出框本身的表现就行了</p>
<p><strong>MMAlertView</strong>和<strong>MMSheetView</strong>都是我提供的基于<strong>MMPopupView</strong>的简单组件 可以直接拿来用 而且都是高度可定制的(这个稍后会介绍)
　
　
　</p>
<h3 id="MMPopupWindow">MMPopupWindow</h3><p>MMPopupWindow的定义如下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMPopupWindow</span> : <span class="title">UIWindow</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> touchWildToHide; <span class="comment">// default is NO. When YES, popup views will be hidden when user touch the translucent background.</span></span><br><span class="line"></span><br><span class="line">+ (M<span class="built_in">MPopupWindow</span> *)sharedWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  cache the window to prevent the lag of the first showing.</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) cacheWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  show the translucent background</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) showDimBackground;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  hide the translucent background</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) hideDimBackground;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>很简单 只有一个属性<code>touchWildToHide</code>用来控制是否可以点击非弹出框的地方来使弹出框消失 还有一个<code>cacheWindow</code>的方法来预加载<strong>MMPopupWindow</strong> 防止第一次使用的时候顿卡</p>
<p>另外还有两个用于显示和隐藏背景色的方法 这个在自定义动画的时候会用到<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) showDimBackground;</span><br><span class="line">- (<span class="keyword">void</span>) hideDimBackground;</span><br></pre></td></tr></table></figure></p>
<p>　
　
　</p>
<h3 id="MMPopupView">MMPopupView</h3><p>MMPopupView的定义如下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, M<span class="built_in">MPopupType</span>) &#123;</span><br><span class="line">    M<span class="built_in">MPopupTypeAlert</span>,</span><br><span class="line">    M<span class="built_in">MPopupTypeSheet</span>,</span><br><span class="line">    M<span class="built_in">MPopupTypeCustom</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">MMPopupView</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^M<span class="built_in">MPopupBlock</span>)(M<span class="built_in">MPopupView</span> *);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMPopupView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span>           visible;             <span class="comment">// default is NO.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>          ) <span class="built_in">UIView</span>         *attachedView;       <span class="comment">// default is MMPopupWindow. You can attach MMPopupView to any UIView.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>          ) M<span class="built_in">MPopupType</span>    type;                <span class="comment">// default is MMPopupTypeAlert.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>          ) <span class="built_in">NSTimeInterval</span> animationDuration;   <span class="comment">// default is 0.3 sec.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>          ) <span class="built_in">BOOL</span>           withKeyboard;        <span class="comment">// default is NO. When YES, alert view with be shown with a center offset (only effect with MMPopupTypeAlert).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>            ) M<span class="built_in">MPopupBlock</span>   showCompletionBlock; <span class="comment">// show completion block.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>            ) M<span class="built_in">MPopupBlock</span>   hideCompletionBlock; <span class="comment">// hide completion block</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>            ) M<span class="built_in">MPopupBlock</span>   showAnimation;       <span class="comment">// custom show animation block.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>            ) M<span class="built_in">MPopupBlock</span>   hideAnimation;       <span class="comment">// custom hide animation block.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  override this method to show the keyboard if with a keyboard</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) showKeyboard;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  override this method to hide the keyboard if with a keyboard</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) hideKeyboard;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  show the popup view</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) show;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  show the popup view with completiom block</span><br><span class="line"> *</span><br><span class="line"> *  @param block show completion block</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) showWithBlock:(M<span class="built_in">MPopupBlock</span>)block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  hide the popup view</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) hide;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  hide the popup view with completiom block</span><br><span class="line"> *</span><br><span class="line"> *  @param block hide completion block</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) hideWithBlock:(M<span class="built_in">MPopupBlock</span>)block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>使用起来很简单 定义好自己的view 然后调用下面的方法就好了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) show;</span><br><span class="line">- (<span class="keyword">void</span>) hide;</span><br></pre></td></tr></table></figure>
<p>你也可以指定显示在某个UIView之上<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong ) UIView *attachedView;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) show;</span><br><span class="line">- (<span class="keyword">void</span>) hide;</span><br></pre></td></tr></table></figure>
<p>默认提供了三种类型 对应三种动画效果</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, M<span class="built_in">MPopupType</span>) &#123;</span><br><span class="line">    M<span class="built_in">MPopupTypeAlert</span>,   <span class="comment">//中间隐出</span></span><br><span class="line">    M<span class="built_in">MPopupTypeSheet</span>,   <span class="comment">//向上滑出</span></span><br><span class="line">    M<span class="built_in">MPopupTypeCustom</span>,  <span class="comment">//向下掉落</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当然你也可以自己定义想要的动画效果 只要重载下面两个block就行了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) M<span class="built_in">MPopupBlock</span>   showAnimation;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) M<span class="built_in">MPopupBlock</span>   hideAnimation;</span><br></pre></td></tr></table></figure>
<p>同时提供了动画的回调 可以直接指定block或者直接调用方法<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>  ) M<span class="built_in">MPopupBlock</span>   showCompletionBlock;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>  ) M<span class="built_in">MPopupBlock</span>   hideCompletionBlock;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) showWithBlock:(M<span class="built_in">MPopupBlock</span>)block;</span><br><span class="line">- (<span class="keyword">void</span>) hideWithBlock:(M<span class="built_in">MPopupBlock</span>)block;</span><br></pre></td></tr></table></figure></p>
<p>　
　
　</p>
<h3 id="MMAlertView">MMAlertView</h3><p><strong>MMAlertView</strong>就是UIAlertView的替代品 接口如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^M<span class="built_in">MPopupInputHandler</span>)(<span class="built_in">NSString</span> *text);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMAlertView</span> : <span class="title">MMPopupView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> maxInputLength;    <span class="comment">// default is 0. Means no length limit.</span></span><br><span class="line"></span><br><span class="line">- (instancetype) initWithInputTitle:(<span class="built_in">NSString</span>*)title</span><br><span class="line">                             detail:(<span class="built_in">NSString</span>*)detail</span><br><span class="line">                        placeholder:(<span class="built_in">NSString</span>*)inputPlaceholder</span><br><span class="line">                            handler:(M<span class="built_in">MPopupInputHandler</span>)inputHandler;</span><br><span class="line"></span><br><span class="line">- (instancetype) initWithConfirmTitle:(<span class="built_in">NSString</span>*)title</span><br><span class="line">                               detail:(<span class="built_in">NSString</span>*)detail;</span><br><span class="line"></span><br><span class="line">- (instancetype) initWithTitle:(<span class="built_in">NSString</span>*)title</span><br><span class="line">                        detail:(<span class="built_in">NSString</span>*)detail</span><br><span class="line">                         items:(<span class="built_in">NSArray</span>*)items;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>分别对应下面三种形式<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-07-opensource-mmpopupview9.jpg" alt=""></p>
<p>同时提供一个全局的配置类 可以充分的自定义<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMAlertViewConfig</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (MMAlertViewConfig*) globalConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> width;                <span class="comment">// Default is 275.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> buttonHeight;         <span class="comment">// Default is 50.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> innerMargin;          <span class="comment">// Default is 25.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> cornerRadius;         <span class="comment">// Default is 5.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> titleFontSize;        <span class="comment">// Default is 18.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> detailFontSize;       <span class="comment">// Default is 14.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> buttonFontSize;       <span class="comment">// Default is 17.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *backgroundColor;     <span class="comment">// Default is #FFFFFF.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *titleColor;          <span class="comment">// Default is #333333.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *detailColor;         <span class="comment">// Default is #333333.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *splitColor;          <span class="comment">// Default is #CCCCCC.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *itemNormalColor;     <span class="comment">// Default is #333333. effect with MMItemTypeNormal</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *itemHighlightColor;  <span class="comment">// Default is #E76153. effect with MMItemTypeHighlight</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *itemPressedColor;    <span class="comment">// Default is #EFEDE7.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *defaultTextOK;      <span class="comment">// Default is "好".</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *defaultTextCancel;  <span class="comment">// Default is "取消".</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *defaultTextConfirm; <span class="comment">// Default is "确定".</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>　
　
　</p>
<h3 id="MMSheetView">MMSheetView</h3><p><strong>MMSheetView</strong>就是UISheetView的替代品 接口如下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMSheetView</span> : <span class="title">MMPopupView</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype) initWithTitle:(<span class="built_in">NSString</span>*)title</span><br><span class="line">                         items:(<span class="built_in">NSArray</span>*)items;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>呈现如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-07-opensource-mmpopupview4.jpg" alt=""></p>
<p>同时提供一个全局的配置类 可以充分的自定义<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMSheetViewConfig</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (MMSheetViewConfig*) globalConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> buttonHeight;         <span class="comment">// Default is 50.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> innerMargin;          <span class="comment">// Default is 19.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> titleFontSize;        <span class="comment">// Default is 14.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> buttonFontSize;       <span class="comment">// Default is 17.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *backgroundColor;     <span class="comment">// Default is #FFFFFF.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *titleColor;          <span class="comment">// Default is #666666.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *splitColor;          <span class="comment">// Default is #CCCCCC.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *itemNormalColor;     <span class="comment">// Default is #333333. effect with MMItemTypeNormal</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *itemDisableColor;    <span class="comment">// Default is #CCCCCC. effect with MMItemTypeDisabled</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *itemHighlightColor;  <span class="comment">// Default is #E76153. effect with MMItemTypeHighlight</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *itemPressedColor;    <span class="comment">// Default is #EFEDE7.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *defaultTextCancel;  <span class="comment">// Default is "取消"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>　
　
　</p>
<h3 id="MMPopupItem">MMPopupItem</h3><p><strong>MMPopupItem</strong>是用于<strong>MMAlertView</strong>和<strong>MMSheetView</strong>的动作对象(对应按钮) 定义如下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^M<span class="built_in">MPopupItemHandler</span>)(<span class="built_in">NSInteger</span> index);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMPopupItem</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span>     highlight;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span>     disabled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span>  *color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>)   M<span class="built_in">MPopupItemHandler</span> handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, MMItemType) &#123;</span><br><span class="line">    MMItemTypeNormal,</span><br><span class="line">    MMItemTypeHighlight,</span><br><span class="line">    MMItemTypeDisabled</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_INLINE</span> M<span class="built_in">MPopupItem</span>* MMItemMake(<span class="built_in">NSString</span>* title, MMItemType type, M<span class="built_in">MPopupItemHandler</span> handler)</span><br><span class="line">&#123;</span><br><span class="line">    M<span class="built_in">MPopupItem</span> *item = [M<span class="built_in">MPopupItem</span> new];</span><br><span class="line">    </span><br><span class="line">    item<span class="variable">.title</span> = title;</span><br><span class="line">    item<span class="variable">.handler</span> = handler;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> MMItemTypeNormal:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MMItemTypeHighlight:</span><br><span class="line">        &#123;</span><br><span class="line">            item<span class="variable">.highlight</span> = <span class="literal">YES</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MMItemTypeDisabled:</span><br><span class="line">        &#123;</span><br><span class="line">            item<span class="variable">.disabled</span> = <span class="literal">YES</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用方式如下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MMAlertView</span></span><br><span class="line"><span class="built_in">NSArray</span> *items =</span><br><span class="line">@[MMItemMake(<span class="string">@"Done"</span>, MMItemTypeNormal, block),</span><br><span class="line">  MMItemMake(<span class="string">@"Save"</span>, MMItemTypeHighlight, block),</span><br><span class="line">  MMItemMake(<span class="string">@"Cancel"</span>, MMItemTypeNormal, block)];</span><br><span class="line"></span><br><span class="line">[[[MMAlertView alloc] initWithTitle:<span class="string">@"AlertView"</span></span><br><span class="line">                             detail:<span class="string">@"each button take one row if there are more than 2 items"</span></span><br><span class="line">                              items:items]</span><br><span class="line"> showWithBlock:completeBlock];</span><br><span class="line">             </span><br><span class="line"><span class="comment">//MMSheetView</span></span><br><span class="line"><span class="built_in">NSArray</span> *items =</span><br><span class="line">@[MMItemMake(<span class="string">@"Normal"</span>, MMItemTypeNormal, block),</span><br><span class="line">  MMItemMake(<span class="string">@"Highlight"</span>, MMItemTypeHighlight, block),</span><br><span class="line">  MMItemMake(<span class="string">@"Disabled"</span>, MMItemTypeDisabled, block)];</span><br><span class="line"></span><br><span class="line">[[[MMSheetView alloc] initWithTitle:<span class="string">@"SheetView"</span></span><br><span class="line">              items:items] showWithBlock:completeBlock];</span><br></pre></td></tr></table></figure></p>
<h1 id="自定义">自定义</h1><hr>
<p>除了使用<strong>MMAlertView</strong>和<strong>MMSheetView</strong>之外 比如我们的应用中会用到输入验证码的提示框和日期的选择框 都可以用<strong>MMPopupView</strong>来轻松实现</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-07-opensource-mmpopupview10.jpg" alt=""></p>
<h1 id="小结">小结</h1><hr>
<p>源码和Demo请点<a href="https://github.com/adad184/MMPopupView" target="_blank" rel="external">这里</a></p>
<p>更多的细节欢迎运行demo 或者查看源代码 有任何问题欢迎提出来大家一起讨论研究 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p>弹出框组件应该是绝大多数应用都少不了的(只有极少数精心设计的APP会用不到) 当然我们的APP也不例外 之前我们APP的弹出框组件是我用<a href="https://github.com/facebook/pop">pop</a>写的 可是后来发现与系统原生动画有些冲突(pop内部用到了CATransaction 导致跟系统动画同时发生时会有问题) 所以上周花了大半天时间重写了一下<a href="https://github.com/adad184/MMPopupView">MMPopupView</a>这个组件</p>
<p>因为新写的组件完全是用<a href="https://github.com/SnapKit/Masonry">Masonry</a>写的 我觉得是个非常好的示例教程 结合之前我写的<a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/">Masonry入门教程</a> 应该可以更好的理解和运用Masonry/Autolayout 所以我又花了一点时间重新整理成了一个简单的开源库 有兴趣的朋友可以研究一下</p>
<p>运行的demo可以在<a href="http://v.youku.com/v_show/id_XMTMzMDIxNjA5Mg==.html">这里</a>查看</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-09-07-opensource-mmpopupview0.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="AlertView" scheme="http://adad184.com/tags/AlertView/"/>
    
      <category term="Popup" scheme="http://adad184.com/tags/Popup/"/>
    
      <category term="SheetView" scheme="http://adad184.com/tags/SheetView/"/>
    
      <category term="开源" scheme="http://adad184.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图片变形的抗锯齿处理方法]]></title>
    <link href="http://adad184.com/2015/08/31/image-rotate-with-antialiasing/"/>
    <id>http://adad184.com/2015/08/31/image-rotate-with-antialiasing/</id>
    <published>2015-08-31T09:48:34.000Z</published>
    <updated>2015-08-31T06:52:11.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>周末在微博上看到<a href="http://www.weibo.com/kevinzhow" target="_blank" rel="external">@周楷雯Kevin</a>说起CALayer抗锯齿的问题</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-31-image-rotate-with-antialiasing1.png" alt=""></p>
<p>具体做法是:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer<span class="variable">.allowsEdgeAntialiasing</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>想起了很久以前也遇到过类似的问题 那时候要做一个类贴纸的应用 理所当然会遇到贴纸缩放和旋转的问题 所以锯齿的问题也是需要解决的 但是那时候是iOS4,5的时代 压根没有上面说的<code>allowsEdgeAntialiasing</code>这个东西(这个东西iOS7才公开 不过iOS6据说也可以用 但是黑科技嘛..你懂的)</p>
<p>所以当时求助了万能的<a href="http://stackoverflow.com/a/5057451/1340076" target="_blank" rel="external">stackoverflow</a> 得到了一个非常简约而不简单的方法 就是我在微博上说的 <strong>只要把需要显示的图片留一个像素的透明边</strong> 就搞定了</p>
<h2 id="方法">方法</h2><p>方法比较简单 我写成了一个UIImage的Category方法 然后一直尘封在我的工具库中好几年(遇到这个问题我才想起来)<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)antiAlias</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> border = <span class="number">1.0</span>f;</span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(border, border, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>-<span class="number">2</span>*border, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>-<span class="number">2</span>*border);</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">UIImage</span> *img = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="built_in">CGSizeMake</span>(rect<span class="variable">.size</span><span class="variable">.width</span>,rect<span class="variable">.size</span><span class="variable">.height</span>));</span><br><span class="line">    [<span class="keyword">self</span> drawInRect:<span class="built_in">CGRectMake</span>(-<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>)];</span><br><span class="line">    img = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span><span class="variable">.size</span>);</span><br><span class="line">    [img drawInRect:rect];</span><br><span class="line">    <span class="built_in">UIImage</span>* antiImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> antiImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>先来看看实际的效果(看不清楚的同学可以点大图)</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-31-image-rotate-with-antialiasing3.jpg" alt=""></p>
<p>可以看到旋转的时候若不做任何处理 确实是会有明显的锯齿 而使用透明边的方法 或者设置<code>allowsEdgeAntialiasing</code> 都可以消除锯齿 </p>
<p>接下来看看这两种方法的性能比较 测试方法是在我的iPhone 5S上接连对500个UIImageView进行旋转 对比帧数 其结果如下</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-31-image-rotate-with-antialiasing2.png" alt=""></p>
<p>结果表明 <code>allowsEdgeAntialiasing</code>的性能还是比透明边的方式要差一点 所以…</p>
<ul>
<li>如果你的应用要支持iOS6- 可以参考透明边的方法 唯一的缺点是显示出来会比原来小那么一点点(我的做法是直接cut掉1px的边 当然你也可以直接在图像外面加1px的透明边)</li>
<li>如果你的应用仅支持iOS7 推荐使用<strong>allowsEdgeAntialiasing</strong>来设置 简单方便咯 如果性能上觉得吃力的话 可以再考虑透明边的方法</li>
</ul>
<h2 id="小结">小结</h2><hr>
<p>文中的demo可以在<a href="https://github.com/adad184/DemoAntiAliasing" target="_blank" rel="external">这里</a>找到</p>
<p>测试的方法也许不太严谨(也是临时起意写的这篇 所以并没有花太多时间) 如果有错误 请大家提出来</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>周末在微博上看到<a href="http://www.weibo.com/kevinzhow" target="_blank" rel="external">@周楷雯Kevin</a>说起CALayer抗锯齿的问题</p>
<p><i]]>
    </summary>
    
      <category term="图片" scheme="http://adad184.com/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="抗锯齿" scheme="http://adad184.com/tags/%E6%8A%97%E9%94%AF%E9%BD%BF/"/>
    
      <category term="旋转" scheme="http://adad184.com/tags/%E6%97%8B%E8%BD%AC/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[处理i18n国际电话区号的代码实践]]></title>
    <link href="http://adad184.com/2015/08/18/practice-in-i18n-dialling-code/"/>
    <id>http://adad184.com/2015/08/18/practice-in-i18n-dialling-code/</id>
    <published>2015-08-18T09:48:34.000Z</published>
    <updated>2015-08-21T09:26:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>上周在忙产品的国际化(i18n)的问题 其中一个很重要的地方就是电话号码的国际化(我们以电话号码为主账号) 电话号码有个很重要的部分就是区号 </p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-18-practice-in-i18n-dialling-code5.png" alt=""></p>
<p>上图是我们产品的区号选择 除了常规的电话号码之外 后面还有一个区号 代表这个电话号码所属的是哪个国家和地区 关于区号的概念 可以看一下<a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E7%94%B5%E8%AF%9D%E5%8C%BA%E5%8F%B7%E5%88%97%E8%A1%A8" target="_blank" rel="external">维基百科</a></p>
<a id="more"></a>
<p>看到这里 可能有人奇怪 这有什么难的? 不就是按照列表来展示吗?  这样有几个问题</p>
<ul>
<li>由于是支持多语言 那么不同的语言环境的系统 显示出来的国家名称是不一样的 比如<strong>“中国”</strong> 简体中文是<strong>“中国”</strong> 英文是<strong>“China”</strong> 韩文是<strong>“중화인민공화국”</strong> 其在各个语言中的显示排序都是不一样的</li>
<li>如果根据不同国家和语言来维护一张这样的表 工作量太大 一般的公司估计做不来</li>
</ul>
<p>所以这个工作我们就会放到本地来做 不过iOS已经帮我们做了一部分工作了 我们可以根据<a href="https://zh.wikipedia.org/wiki/%E5%9C%8B%E5%AE%B6%E5%9C%B0%E5%8D%80%E4%BB%A3%E7%A2%BC" target="_blank" rel="external">国家代码</a>来获取某个国家或在当前区域中的本地化名称</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前locale</span></span><br><span class="line"><span class="built_in">NSLocale</span> *locale = [<span class="built_in">NSLocale</span> currentLocale];</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有国家的代码</span></span><br><span class="line"><span class="built_in">NSArray</span> *countryArray = [<span class="built_in">NSLocale</span> ISOCountryCodes];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *countryCode <span class="keyword">in</span> countryArray) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//根据当前locale和国家短码 获取指定国家的本地化名称</span></span><br><span class="line">    <span class="built_in">NSString</span> *localName = [locale displayNameForKey:<span class="built_in">NSLocaleCountryCode</span> value:countryCode];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们简单测试一下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *countryArray  = [<span class="built_in">NSLocale</span> ISOCountryCodes];</span><br><span class="line"><span class="built_in">NSArray</span> *languageArray = @[<span class="string">@"zh_CN"</span>,<span class="string">@"en_US"</span>,<span class="string">@"ja_JP"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="built_in">NSString</span> *languege <span class="keyword">in</span> languageArray)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLocale</span> *locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:languege];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *countryCode = countryArray[i];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *displayName = [locale displayNameForKey:<span class="built_in">NSLocaleCountryCode</span> value:countryCode];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@\t%@\t%@"</span>,languege,countryCode,displayName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">zh_CN	AD	安道尔</span><br><span class="line">zh_CN	AE	阿拉伯联合酋长国</span><br><span class="line">zh_CN	AF	阿富汗</span><br><span class="line">zh_CN	AG	安提瓜和巴布达</span><br><span class="line">zh_CN	AI	安圭拉</span><br><span class="line"></span><br><span class="line">en_US	AD	Andorra</span><br><span class="line">en_US	AE	United Arab Emirates</span><br><span class="line">en_US	AF	Afghanistan</span><br><span class="line">en_US	AG	Antigua and Barbuda</span><br><span class="line">en_US	AI	Anguilla</span><br><span class="line"></span><br><span class="line">ja_JP	AD	アンドラ</span><br><span class="line">ja_JP	AE	アラブ首長国連邦</span><br><span class="line">ja_JP	AF	アフガニスタン</span><br><span class="line">ja_JP	AG	アンティグア・バーブーダ</span><br><span class="line">ja_JP	AI	アンギラ</span><br></pre></td></tr></table></figure>
<p>已经介绍完iOS帮我们做的一部分工作了 那么另一部分就得我们自己来了<br>我们需要有一张 <strong>地区-&gt;区号</strong> 的列表 不过这个也简单 网上一抓一大把 我也是网上找的  文件内容如下(<code>diallingcode.json</code>)<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Afghanistan"</span>,</span><br><span class="line">        <span class="string">"dial_code"</span>: <span class="string">"+93"</span>,</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"AF"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Albania"</span>,</span><br><span class="line">        <span class="string">"dial_code"</span>: <span class="string">"+355"</span>,</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"AL"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//中间省略</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Virgin Islands, British"</span>,</span><br><span class="line">        <span class="string">"dial_code"</span>: <span class="string">"+1 284"</span>,</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"VG"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Virgin Islands, U.S."</span>,</span><br><span class="line">        <span class="string">"dial_code"</span>: <span class="string">"+1 340"</span>,</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"VI"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>维护这样一张表就很简单了我们可以存在本地 也可以放在服务器(“name”字段其实是不必须的 只是为了好看)</p>
<h2 id="研究">研究</h2><p>我们暂时先把代码放一放 来看一看其他产品是怎么做的</p>
<p>这个是微信的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-18-practice-in-i18n-dialling-code1.png" alt=""></p>
<p>微信的问题还是挺多的</p>
<ul>
<li>左边是中文环境 按拼音分组是分对了 但是文字排序却出错了 <strong>“阿”</strong>开头的国家并没有排列在一起</li>
<li>右边是法语环境 这些<a href="https://zh.wikipedia.org/wiki/%E8%A1%8D%E7%94%9F%E6%8B%89%E4%B8%81%E5%AD%97%E6%AF%8D" target="_blank" rel="external">衍生拉丁字母</a> 并没有正确的归类</li>
</ul>
<p>这个是Twitter的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-18-practice-in-i18n-dialling-code2.png" alt=""></p>
<p>Twitter在中文环境下还是挺奇怪的 但是却没有犯微信第二个错误</p>
<p>Facebook的呢?  人家的工程师比较聪明(懒)  压根就不支持索引</p>
<p>接下来我们会解决出现的这几个问题</p>
<h2 id="代码">代码</h2><p>先简历一个Modal 用来表示国家相关的信息<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMCountry</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;   <span class="comment">//国家名(本地化后的版本)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *code;   <span class="comment">//国家代号</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *latin;  <span class="comment">//国家名的拉丁文(只包含基本拉丁字母)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *dial_code;  <span class="comment">//区号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>然后我们要把区号从配置文件中读取出来 并以区号为key 建立索引<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"diallingcode"</span> ofType:<span class="string">@"json"</span>]];</span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *arrayCode = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="number">0</span> error:&amp;error];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( error ) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> *dicCode = [@&#123;&#125; mutableCopy];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="built_in">NSDictionary</span> *item <span class="keyword">in</span> arrayCode )</span><br><span class="line">&#123;</span><br><span class="line">    MMCountry *c = [MMCountry new];</span><br><span class="line">    </span><br><span class="line">    c<span class="variable">.code</span>      = item[<span class="string">@"code"</span>];</span><br><span class="line">    c<span class="variable">.dial_code</span> = item[<span class="string">@"dial_code"</span>];</span><br><span class="line">    </span><br><span class="line">    [dicCode setObject:c forKey:c<span class="variable">.code</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着获取这些国家的本地话名称<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLocale</span> *locale = [<span class="built_in">NSLocale</span> currentLocale];</span><br><span class="line"><span class="built_in">NSArray</span> *countryArray = [<span class="built_in">NSLocale</span> ISOCountryCodes];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> *dicCountry = [@&#123;&#125; mutableCopy];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *countryCode <span class="keyword">in</span> countryArray) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( dicCode[countryCode] )</span><br><span class="line">    &#123;</span><br><span class="line">        MMCountry *c = dicCode[countryCode];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里 你懂的</span></span><br><span class="line">        c<span class="variable">.name</span> = [locale displayNameForKey:<span class="built_in">NSLocaleCountryCode</span> value:countryCode];</span><br><span class="line">        <span class="keyword">if</span> ( [c<span class="variable">.name</span> isEqualToString:<span class="string">@"台湾"</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">            c<span class="variable">.name</span> = <span class="string">@"中国台湾"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把名称拉丁字母化</span></span><br><span class="line">        c<span class="variable">.latin</span> = [<span class="keyword">self</span> latinize:c<span class="variable">.name</span>];</span><br><span class="line">        </span><br><span class="line">        [dicCountry setObject:c forKey:c<span class="variable">.code</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找不到则说明配置文件不全 可以补全</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"missed %@ %@"</span>,[locale displayNameForKey:<span class="built_in">NSLocaleCountryCode</span> value:countryCode],countryCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里要注意的是 把字母拉丁文化 解决了微信的第二个问题 使非基本拉丁字母也可以按照基本拉丁字母来排序 其函数如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span>*)latinize:(<span class="built_in">NSString</span>*)str</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *source = [str mutableCopy];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)source, <span class="literal">NULL</span>, k<span class="built_in">CFStringTransformToLatin</span>, <span class="literal">NO</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//微信是这样做的</span></span><br><span class="line">    <span class="comment">//CFStringTransform((__bridge CFMutableStringRef)source, NULL, kCFStringTransformMandarinLatin, NO);</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)source, <span class="literal">NULL</span>, k<span class="built_in">CFStringTransformStripDiacritics</span>, <span class="literal">NO</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有两步 </p>
<ol>
<li>先将文字 转成拉丁字母(kCFStringTransformToLatin)</li>
<li>再将拉丁字母去掉变音符(kCFStringTransformStripDiacritics)</li>
</ol>
<blockquote>
<p>这里是微信犯的第一个错误 也就是没有正确归类的错误 因为微信在第一步的时候只针对汉字进行了处理 其他字符则没有处理 导致第二步没有得到正确的基本拉丁字符(kCFStringTransformMandarinLatin 参见注释掉的代码)</p>
</blockquote>
<p>我们来测试一下这两步会造成得到效果 还是之前的例子</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *countryArray  = [<span class="built_in">NSLocale</span> ISOCountryCodes];</span><br><span class="line"><span class="built_in">NSArray</span> *languageArray = @[<span class="string">@"zh_CN"</span>,<span class="string">@"en_US"</span>,<span class="string">@"ja_JP"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="built_in">NSString</span> *languege <span class="keyword">in</span> languageArray)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLocale</span> *locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:languege];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *countryCode = countryArray[i];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *displayName = [locale displayNameForKey:<span class="built_in">NSLocaleCountryCode</span> value:countryCode];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@\t%@\t%@\t@"</span>,languege,countryCode,displayName,[<span class="keyword">self</span> latinize:displayName]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">zh_CN	AD	安道尔	|	an dao er</span><br><span class="line">zh_CN	AE	阿拉伯联合酋长国	|	a la bo lian he qiu zhang guo</span><br><span class="line">zh_CN	AF	阿富汗	|	a fu han</span><br><span class="line">zh_CN	AG	安提瓜和巴布达	|	an ti gua he ba bu da</span><br><span class="line">zh_CN	AI	安圭拉	|	an gui la</span><br><span class="line">en_US	AD	Andorra	|	Andorra</span><br><span class="line">en_US	AE	United Arab Emirates	|	United Arab Emirates</span><br><span class="line">en_US	AF	Afghanistan	|	Afghanistan</span><br><span class="line">en_US	AG	Antigua &amp; Barbuda	|	Antigua &amp; Barbuda</span><br><span class="line">en_US	AI	Anguilla	|	Anguilla</span><br><span class="line">ja_JP	AD	アンドラ	|	andora</span><br><span class="line">ja_JP	AE	アラブ首長国連邦	|	arabu shou zhang guo lian ban</span><br><span class="line">ja_JP	AF	アフガニスタン	|	afuganisutan</span><br><span class="line">ja_JP	AG	アンティグア・バーブーダ	|	antigua・babuda</span><br><span class="line">ja_JP	AI	アンギラ	|	angira</span><br></pre></td></tr></table></figure>
<p>可以到看 系统会根据不同国家和不同语言的特点 将同一个国家的不同表达形式转化成不同的拉丁字母 </p>
<p>接下来 我们把获取过的数据根据’A’-‘Z’进行归类<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableDictionary</span> *dicSort = [@&#123;&#125; mutableCopy];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( MMCountry *c <span class="keyword">in</span> dicCountry<span class="variable">.allValues</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *indexKey = <span class="string">@""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( c<span class="variable">.latin</span><span class="variable">.length</span> &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        indexKey = [[c<span class="variable">.latin</span> substringToIndex:<span class="number">1</span>] uppercaseString];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> c = [indexKey characterAtIndex:<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( ( c &lt; <span class="string">'A'</span>) || ( c &gt; <span class="string">'Z'</span> ) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = dicSort[indexKey];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( !array )</span><br><span class="line">    &#123;</span><br><span class="line">        array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        </span><br><span class="line">        dicSort[indexKey] = array;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [array addObject:c];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后 将每个归类下面的数据 排序重新整理<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for<span class="function"> (</span> NSString *key in dicSort.allKeys <span class="function">)</span></span><br><span class="line">&#123;</span><br><span class="line">    NSArray *array = dicSort<span class="keyword">[</span>key];</span><br><span class="line">    </span><br><span class="line">   <span class="instruction"> array </span>= <span class="keyword">[</span>array<span class="function"> sortedArrayUsingComparator:^NSComparisonResult(</span>MMCountry *obj1, MMCountry *obj2<span class="function">)</span> &#123;</span><br><span class="line">        </span><br><span class="line">       <span class="instruction"> return </span><span class="keyword">[</span>obj1.name localizedStandardCompare:obj2.name];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    //           <span class="instruction"> array </span>= <span class="keyword">[</span>array<span class="function"> sortedArrayUsingComparator:^NSComparisonResult(</span>CSCountry *obj1, CSCountry *obj2<span class="function">)</span> &#123;</span><br><span class="line">    //</span><br><span class="line">    //               <span class="instruction"> return </span>obj1.latin &gt; obj2.latin;</span><br><span class="line">    //            &#125;];</span><br><span class="line">    </span><br><span class="line">    dicSort<span class="keyword">[</span>key] = array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样<code>dicSort</code>就是我们最终得到的结果集</p>
<blockquote>
<p>这里是微信犯的第二个错误 微信的排序是按照latin来排序的(见注释掉的代码) 所以导致了相同汉字的国家排不到一起的情况 正确的方式是用<code>localizedStandardCompare</code>来排序 这也是iOS已为我们提供好了的本地化比较函数<br>看看之前的图中 挑三个国家出来 比如:阿尔巴尼亚 爱尔兰 阿鲁巴 他们的拼音是 aerbabiya aierlan aluba 如果按照拼音排序的话 这样的排序就是正确的 </p>
</blockquote>
<p>我们来看看最终的效果<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-18-practice-in-i18n-dialling-code3.png" alt=""></p>
<p>是不是比微信的更好?</p>
<h2 id="讨论">讨论</h2><p>虽然代码是写完了 但是问题并没有结果 有一个关键的问题就是 为什么我们要按照’A’-‘Z’来索引排序呢? 比如Twitter在日文和韩文环境下是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-18-practice-in-i18n-dialling-code4.png" alt=""></p>
<p>其实按照不同国家的语言特点来进行对应的索引 应该才是最优的解决办法(PS:看到Twitter在中文环境下的糟糕结果 我也不确定其在日文和韩文下的结果是否是正确的（¯﹃¯）<br>当然 如果真要这样做 其实改动量也不大 只要在索引的那块稍微修改一下就行了 </p>
<h2 id="小结">小结</h2><hr>
<p>文中的demo可以在<a href="https://github.com/adad184/DemoDiallingCode" target="_blank" rel="external">这里</a>找到</p>
<p>正如讨论中说的一样 本文所讨论的方案 并不是最终的解决方案 如果需要更好的体验的话 还要深入研究各国的文化才行 所以 国际化并不单纯是个技术问题 更是个社会工程啊~~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>上周在忙产品的国际化(i18n)的问题 其中一个很重要的地方就是电话号码的国际化(我们以电话号码为主账号) 电话号码有个很重要的部分就是区号 </p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-18-practice-in-i18n-dialling-code5.png" alt=""></p>
<p>上图是我们产品的区号选择 除了常规的电话号码之外 后面还有一个区号 代表这个电话号码所属的是哪个国家和地区 关于区号的概念 可以看一下<a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E7%94%B5%E8%AF%9D%E5%8C%BA%E5%8F%B7%E5%88%97%E8%A1%A8">维基百科</a></p>]]>
    
    </summary>
    
      <category term="区号" scheme="http://adad184.com/tags/%E5%8C%BA%E5%8F%B7/"/>
    
      <category term="多语言" scheme="http://adad184.com/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
    
      <category term="电话" scheme="http://adad184.com/tags/%E7%94%B5%E8%AF%9D/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[URI跳转方式地图导航的代码实践]]></title>
    <link href="http://adad184.com/2015/08/11/practice-in-mapview-navigation-with-URI/"/>
    <id>http://adad184.com/2015/08/11/practice-in-mapview-navigation-with-URI/</id>
    <published>2015-08-11T09:48:34.000Z</published>
    <updated>2015-08-18T01:53:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>之前<a href="http://adad184.com/2015/07/13/improve-performance-with-mkmapview/" target="_blank" rel="external">介绍</a>了我正在做的是一款定位主打的应用 然后最近我们需要做一个定位导航的功能 能够让用户从当前位置导航到指定目的地(默认以驾车的方式导航)</p>
<p>手机上的导航方式 分<strong>应用内导航</strong>和<strong>应用外导航</strong></p>
<blockquote>
<ul>
<li>应用内导航<br>是指使用地图服务提供的SDK(比如高德,百度等等) 直接将导航功能嵌入到我们自己的APP内部<br>但是这个方案我个人不喜欢 一是接入要一定的时间 二是增加APP的内存占用 </li>
<li>应用外导航<br>是以URI跳转的方式(在iOS中就是以URL Scheme的方式) 直接跳到对应的地图APP中 直接利用对方的功能来导航<br>这样的优点 一是接入方便 二是不增加自己APP的开销 缺点就是如果用户没有装这个地图应用就没办法使用这个地图的服务</li>
</ul>
</blockquote>
<p>说起应用内导航 当年是被<strong>图吧</strong>坑惨了 两年前 高德和百度都没有推出导航SDK的时候 市面上好像就只有图吧有应用内导航SDK 所以不得已用了图吧SDK 如今图吧SDK仍是我心中最难用的地图SDK(话说百度的SDK和图吧的SDK设计感觉上是一脉相承的 不晓得是不是百度做地图时挖了一大批图吧的人?) 而且就是这个难用的SDK 竟然还是收费的</p>
<p>而今天要说的 就是第二种 因为网上说的都不是很全面 所以今天把对这种方式的研究结果总结一下</p>
<a id="more"></a>
<h2 id="研究">研究</h2><p>先来看一下我们要达到什么效果 就是当我们点导航的时候 会弹出下面这个选择列表</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI0.jpg" alt=""></p>
<p>当然 如果没有安装某个地图APP 那么对应的选项是不会出现的 检测APP是否安装 只要调用下面这个方法就可以了<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"appurlscheme://"</span>]</span><br></pre></td></tr></table></figure></p>
<p>关于APP的URL Scheme相关内容这里就不介绍了 大家可以自行去研究</p>
<p>那么我们上图提到了4个地图应用 分别是</p>
<ol>
<li>苹果地图</li>
<li>百度地图</li>
<li>高德地图</li>
<li>谷歌地图</li>
</ol>
<p>这些也是当前我们用得最多的几种地图了(什么 你们说还有腾讯地图? 可惜腾讯地图暂时还不支持URI的方式打开 所以这里就没列出来 等可以用了我会补上)</p>
<p>下面来对比一下几种地图</p>
<table>
<thead>
<tr>
<th style="text-align:center">地图</th>
<th style="text-align:center">URL Scheme</th>
<th style="text-align:center">文档</th>
<th style="text-align:center">是否可以跳回到APP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">苹果地图</td>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="https://developer.apple.com/library/prerelease/ios/documentation/MapKit/Reference/MKMapItem_class/index.html" target="_blank" rel="external">文档</a></td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">百度地图</td>
<td style="text-align:center">baidumap://</td>
<td style="text-align:center"><a href="http://developer.baidu.com/map/index.php?title=uri/api/ios" target="_blank" rel="external">文档</a></td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">高德地图</td>
<td style="text-align:center">iosamap://</td>
<td style="text-align:center"><a href="http://lbs.amap.com/api/uri-api/ios-uri-explain/" target="_blank" rel="external">文档</a></td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">谷歌地图</td>
<td style="text-align:center">comgooglemaps://</td>
<td style="text-align:center"><a href="https://developers.google.com/maps/documentation/ios/urlscheme" target="_blank" rel="external">文档</a></td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<p>苹果地图是系统自带的(而且苹果地图最好的方式也不是用URI的方式开打) 所以无需URL Scheme就可以打开的<br>其次 当跳到地图APP之后可以跳回是一种很好的体验(参考微信的跳转) 但是遗憾的是 苹果地图和百度地图都不支持跳回</p>
<p>接下来我们就回到正题 说一说每种地图的跳转方式</p>
<p>假设我们有一个指定的目的坐标<strong>coordinate</strong> 而我们自己的APP的URL Scheme是<strong>urlScheme</strong> 名称是<strong>appName</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CLLocationCoordinate2D coordinate;</span><br><span class="line"><span class="built_in">NSString</span> *urlScheme;</span><br><span class="line"><span class="built_in">NSString</span> *appName;</span><br></pre></td></tr></table></figure></p>
<h3 id="苹果地图">苹果地图</h3><hr>
<p>苹果地图可以通过<code>openURL</code>的方式打开<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://maps.apple.com/?daddr=%f,%f&amp;saddr=slat,slng"</span>,coordinate<span class="variable">.latitude</span>, coordinate<span class="variable">.longitude</span>] stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlString]];</span><br></pre></td></tr></table></figure></p>
<p>但是这种方式 <strong>不能以当前位置为起点</strong> 所以不符合我们的要求 网上说可以用下面这种方式 但是我没成功<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *urlString = [[NSString stringWithFormat:@&#34;http://maps.apple.com/?daddr=%f,%f&#38;saddr=Current+Location&#34;,coordinate.latitude, coordinate.longitude] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</span><br></pre></td></tr></table></figure></p>
<p>但是苹果提供了另一种方式 使用<strong>MKMapItem</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MKMapItem</span> *currentLocation = [<span class="built_in">MKMapItem</span> mapItemForCurrentLocation];</span><br><span class="line"><span class="built_in">MKMapItem</span> *toLocation = [[<span class="built_in">MKMapItem</span> alloc] initWithPlacemark:[[<span class="built_in">MKPlacemark</span> alloc] initWithCoordinate:coordinate addressDictionary:<span class="literal">nil</span>]];</span><br><span class="line">                                             </span><br><span class="line">[<span class="built_in">MKMapItem</span> openMapsWithItems:@[currentLocation, toLocation] </span><br><span class="line">               launchOptions:@&#123;<span class="built_in">MKLaunchOptionsDirectionsModeKey</span>: <span class="built_in">MKLaunchOptionsDirectionsModeDriving</span>,</span><br><span class="line">                               <span class="built_in">MKLaunchOptionsShowsTrafficKey</span>: [<span class="built_in">NSNumber</span> numberWithBool:<span class="literal">YES</span>]&#125;];</span><br></pre></td></tr></table></figure></p>
<p>效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI1.jpg" alt=""></p>
<h3 id="百度地图">百度地图</h3><hr>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"baidumap://map/direction?origin=&#123;&#123;我的位置&#125;&#125;&amp;destination=latlng:%f,%f|name=目的地&amp;mode=driving&amp;coord_type=gcj02"</span>,coordinate<span class="variable">.latitude</span>, coordinate<span class="variable">.longitude</span>] stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">                                             </span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlString]];</span><br></pre></td></tr></table></figure>
<p>要注意几点</p>
<blockquote>
<ol>
<li>origin=<br>这个是不能被修改的 不然无法把出发位置设置为当前位置</li>
<li>destination=latlng:%f,%f|name=目的地<br>name=XXXX  <strong>name</strong>这个字段不能省略 否则导航会失败 而后面的文字则可以随便填</li>
<li>coord_type=gcj02<br>coord_type允许的值为bd09ll、gcj02、wgs84 如果你APP的地图SDK用的是百度地图SDK 请填bd09ll 否则 就填gcj02 wgs84你基本是用不上了(关于地图加密这里也不多谈 请自行学习)</li>
</ol>
</blockquote>
<p>效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI2.jpg" alt=""></p>
<h3 id="高德地图">高德地图</h3><hr>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"iosamap://navi?sourceApplication=%@&amp;backScheme=%@&amp;lat=%f&amp;lon=%f&amp;dev=0&amp;style=2"</span>,appName,urlScheme,coordinate<span class="variable">.latitude</span>, coordinate<span class="variable">.longitude</span>] stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlString]];</span><br></pre></td></tr></table></figure>
<p>要注意几点</p>
<blockquote>
<ol>
<li>sourceApplication=%@&amp;backScheme=%@<br>sourceApplication代表你自己APP的名称 会在之后跳回的时候显示出来 所以必须填写  backScheme是你APP的URL Scheme  不填是跳不回来的哟</li>
<li>dev=0<br>这里填0就行了 跟上面的gcj02一个意思  1代表wgs84 也用不上</li>
</ol>
</blockquote>
<p>效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI3.jpg" alt=""></p>
<p>退出导航后 会提示是否跳回到APP<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI4.jpg" alt=""></p>
<h3 id="谷歌地图">谷歌地图</h3><hr>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"comgooglemaps://?x-source=%@&amp;x-success=%@&amp;saddr=&amp;daddr=%f,%f&amp;directionsmode=driving"</span>,appName,urlScheme,coordinate<span class="variable">.latitude</span>, coordinate<span class="variable">.longitude</span>] stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlString]];</span><br></pre></td></tr></table></figure>
<p>要注意几点</p>
<blockquote>
<ol>
<li>x-source=%@&amp;x-success=%@<br>跟高德一样 这里分别代表APP的名称和URL Scheme</li>
<li>saddr=<br>这里留空则表示从当前位置触发</li>
</ol>
</blockquote>
<p>效果如下 在有多条路线的时候 谷歌地图会让你选择其中一条<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI5.jpg" alt=""></p>
<p>选择之后就进入了导航页面<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI6.jpg" alt=""></p>
<h3 id="腾讯地图">腾讯地图</h3><p>既然提到了腾讯地图 那么还是说一下 从网上和<a href="http://lbs.qq.com/uri_v1/guide-route.html" target="_blank" rel="external">官方文档</a>可以得知 大概调用的URI如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"qqmap://map/routeplan?type=drive&amp;fromcoord=CurrentLocation&amp;tocoord=%f,%f&amp;coord_type=1&amp;policy=0"</span>,coordinate<span class="variable">.latitude</span>, coordinate<span class="variable">.longitude</span>] stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:urlString]];</span><br></pre></td></tr></table></figure>
<p>但是很遗憾 调用之后出错了 无法导航</p>
<p>效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI7.jpg" alt=""></p>
<h3 id="补充说明">补充说明</h3><p>iOS9发布以后 很多朋友发现openURL的方式都失败了 这是因为iOS对openURL做了进一步限制<br>不过适配起来也很简单 在plist中加一条名为LSApplicationQueriesSchemes的Array类型的Key 并把上述地图的scheme添加进去就行了 如图<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-11-practice-in-mapview-navigation-with-URI8.png" alt=""></p>
<h2 id="小结">小结</h2><hr>
<p>文中的demo可以在<a href="https://github.com/adad184/DemoNavigationURI" target="_blank" rel="external">这里</a>找到</p>
<p>相对来说 高德地图做得更用心一点 毕竟也是苹果的服务提供商 而百度相对来说则差一点 谷歌的话 不翻墙还是用不了 而苹果自带的地图则不多说了 功能还是太简单了 </p>
<p>这里只是用最简单的方式对导航功能进行了调用 各家的地图其实还有很多参数和功能没有使用到 需要知道的同学可以在文章开头的文档链接中找到详细的描述 </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>之前<a href="http://adad184.com/2015/07/13/improve-performance-with-mkmapview/">介绍</a>了我正在做的是一款定位主打的应用 然后最近我们需要做一个定位导航的功能 能够让用户从当前位置导航到指定目的地(默认以驾车的方式导航)</p>
<p>手机上的导航方式 分<strong>应用内导航</strong>和<strong>应用外导航</strong></p>
<blockquote>
<ul>
<li>应用内导航<br>是指使用地图服务提供的SDK(比如高德,百度等等) 直接将导航功能嵌入到我们自己的APP内部<br>但是这个方案我个人不喜欢 一是接入要一定的时间 二是增加APP的内存占用 </li>
<li>应用外导航<br>是以URI跳转的方式(在iOS中就是以URL Scheme的方式) 直接跳到对应的地图APP中 直接利用对方的功能来导航<br>这样的优点 一是接入方便 二是不增加自己APP的开销 缺点就是如果用户没有装这个地图应用就没办法使用这个地图的服务</li>
</ul>
</blockquote>
<p>说起应用内导航 当年是被<strong>图吧</strong>坑惨了 两年前 高德和百度都没有推出导航SDK的时候 市面上好像就只有图吧有应用内导航SDK 所以不得已用了图吧SDK 如今图吧SDK仍是我心中最难用的地图SDK(话说百度的SDK和图吧的SDK设计感觉上是一脉相承的 不晓得是不是百度做地图时挖了一大批图吧的人?) 而且就是这个难用的SDK 竟然还是收费的</p>
<p>而今天要说的 就是第二种 因为网上说的都不是很全面 所以今天把对这种方式的研究结果总结一下</p>]]>
    
    </summary>
    
      <category term="URI" scheme="http://adad184.com/tags/URI/"/>
    
      <category term="地图" scheme="http://adad184.com/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="导航" scheme="http://adad184.com/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何轻松实现iOS9多任务管理器效果(iCarousel高级教程)]]></title>
    <link href="http://adad184.com/2015/08/01/advanced-icarousel-tutorial-copycat-of-ios9-task-tray/"/>
    <id>http://adad184.com/2015/08/01/advanced-icarousel-tutorial-copycat-of-ios9-task-tray/</id>
    <published>2015-08-01T02:47:29.000Z</published>
    <updated>2015-08-04T09:20:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p>iOS9马上要发布了 为了我司APP的兼容性问题 特意把手上的iOS Mac XCode都升级到了最新的beta版 然后发现iOS9的多任务管理器风格大变 变成了下面这种样子<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray1.gif" alt=""></p>
<p>我忽然想起来之前的文章提到我最爱的UI控件<a href="https://github.com/nicklockwood/iCarousel" target="_blank" rel="external">iCarousel</a>要实现类似这种效果其实是很简单的 一时兴起就花时间试验了一下 效果还不错 所以接下来我就介绍一下iCarousel的高级用法: <strong>如何使用iCarousel的自定义方式来实现iOS9的多任务管理器效果</strong></p>
<a id="more"></a>
<h2 id="模型">模型</h2><hr>
<p>首先来看一下iOS9的多任务管理器究竟是什么样子<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray1.jpg" alt=""></p>
<p>然后我们简单的来建个模 这个步骤很重要 将会影响我们之后的计算 首先我们把东西摆正<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray13.png" alt=""></p>
<p>然后按比例用线分割一下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray14.png" alt=""></p>
<p>这里可以看到  如果我们以正中间的卡片(设定序号为0)为参照物的话 最右边卡片(序号为1)的<strong>位移</strong>就是中心卡片宽度的4/5 最左边的卡片(序号为-2)的<strong>位移</strong>就是中心卡片的宽度的2/5 注意:<strong>这两个值的确定对我们非常重要</strong></p>
<p>而<strong>大小*的缩放 就按照</strong>线性放大**就行了 由于计算很简单 这里就不多赘述了</p>
<p>细心的人可能会注意到 其实iOS9中的中心卡片 并不是居中的 而是靠右的 那么我们再把整体布局调整一下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray15.png" alt=""></p>
<p>这样就差不多是iOS9的样子了</p>
<h2 id="原理">原理</h2><hr>
<p>接着我们来了解一下iCarousel的基本原理</p>
<p>iCarousel支持如下几种内置显示类型(没用过的同学请务必使用<code>pod try iCarousel</code>来运行一下demo)</p>
<ul>
<li>iCarouselTypeLinear</li>
<li>iCarouselTypeRotary</li>
<li>iCarouselTypeInvertedRotary</li>
<li>iCarouselTypeCylinder</li>
<li>iCarouselTypeInvertedCylinder</li>
<li>iCarouselTypeWheel</li>
<li>iCarouselTypeInvertedWheel</li>
<li>iCarouselTypeCoverFlow</li>
<li>iCarouselTypeCoverFlow2</li>
<li>iCarouselTypeTimeMachine</li>
<li>iCarouselTypeInvertedTimeMachine</li>
</ul>
<p>具体效果图可以在官方Github主页上看到 不过这几种类型虽然好 但是也无法满足我们现在的需求 没关系 iCarousel还支持自定义类型</p>
<ul>
<li>iCarouselTypeCustom</li>
</ul>
<p>这就是我们今天的主角</p>
<p>还是代码说话 我们先配置一个简单的iCarousel示例 并使用<strong>iCarouselTypeCustom</strong>作为其类型</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line">&lt;</span><br><span class="line">iCarouselDelegate,</span><br><span class="line">iCarouselDataSource</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) iCarousel *carousel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGSize</span> cardSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> cardWidth = [<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span><span class="variable">.size</span><span class="variable">.width</span>*<span class="number">5.0</span>f/<span class="number">7.0</span>f;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.cardSize</span> = <span class="built_in">CGSizeMake</span>(cardWidth, cardWidth*<span class="number">16.0</span>f/<span class="number">9.0</span>f);</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.carousel</span> = [[iCarousel alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.carousel</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.carousel</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.carousel</span><span class="variable">.dataSource</span> = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.carousel</span><span class="variable">.type</span> = iCarouselTypeCustom;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.carousel</span><span class="variable">.bounceDistance</span> = <span class="number">0.2</span>f;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)numberOfItemsInCarousel:(iCarousel *)carousel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)carouselItemWidth:(iCarousel *)carousel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.cardSize</span><span class="variable">.width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)carousel:(iCarousel *)carousel viewForItemAtIndex:(<span class="built_in">NSInteger</span>)index reusingView:(<span class="built_in">UIView</span> *)view</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *cardView = view;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( !cardView )</span><br><span class="line">    &#123;</span><br><span class="line">        cardView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span><span class="variable">.cardSize</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.cardSize</span><span class="variable">.height</span>)];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:cardView<span class="variable">.bounds</span>];</span><br><span class="line">        [cardView addSubview:imageView];</span><br><span class="line">        imageView<span class="variable">.contentMode</span> = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</span><br><span class="line">        imageView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">        </span><br><span class="line">        cardView<span class="variable">.layer</span><span class="variable">.shadowPath</span> = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:imageView<span class="variable">.frame</span> cornerRadius:<span class="number">5.0</span>f]<span class="variable">.CGPath</span>;</span><br><span class="line">        cardView<span class="variable">.layer</span><span class="variable">.shadowRadius</span> = <span class="number">3.0</span>f;</span><br><span class="line">        cardView<span class="variable">.layer</span><span class="variable">.shadowColor</span> = [<span class="built_in">UIColor</span> blackColor]<span class="variable">.CGColor</span>;</span><br><span class="line">        cardView<span class="variable">.layer</span><span class="variable">.shadowOpacity</span> = <span class="number">0.5</span>f;</span><br><span class="line">        cardView<span class="variable">.layer</span><span class="variable">.shadowOffset</span> = <span class="built_in">CGSizeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">        layer<span class="variable">.frame</span> = imageView<span class="variable">.bounds</span>;</span><br><span class="line">        layer<span class="variable">.path</span> = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:imageView<span class="variable">.bounds</span> cornerRadius:<span class="number">5.0</span>f]<span class="variable">.CGPath</span>;</span><br><span class="line">        imageView<span class="variable">.layer</span><span class="variable">.mask</span> = layer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cardView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当你运行这段代码的时候哦 你会发现显示出来是下面这个样子的 并且划也划不动(掀桌:这是什么鬼~(／‵Д′)／~ ╧╧)<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray2.jpg" alt=""></p>
<p>这是因为我们有个最重要的delegate方法没有实现<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CATransform3D</span>)carousel:(iCarousel *)carousel itemTransformForOffset:(<span class="built_in">CGFloat</span>)offset</span><br></pre></td></tr></table></figure></p>
<p>这个函数也是整个<code>iCarouselTypeCustom</code>的灵魂所在</p>
<p>接下来我们要简单的说一下iCarousel的原理</p>
<ul>
<li>iCarousel并不是一个UIScrollView 也并没有包含任何UIScrollView作为subView</li>
<li>iCarousel通过UIPanGestureRecognizer来计算和维护<strong>scrollOffset</strong>这个变量</li>
<li>iCarousel通过<strong>scrollOffset</strong>来驱动整个动画过程</li>
<li>iCarousel本身并不会改变itemView的位置 而是靠修改itemView的layer.transform来实现位移和形变</li>
</ul>
<p>可能文字说得不太清楚 我们还是通过代码来看一下 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIView</span> *)carousel:(iCarousel *)carousel viewForItemAtIndex:(<span class="built_in">NSInteger</span>)index reusingView:(<span class="built_in">UIView</span> *)view</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *cardView = view;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( !cardView )</span><br><span class="line">    &#123;</span><br><span class="line">        cardView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span><span class="variable">.cardSize</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.cardSize</span><span class="variable">.height</span>)];</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加一个lbl</span></span><br><span class="line">        <span class="built_in">UILabel</span> *lbl = [[<span class="built_in">UILabel</span> alloc] initWithFrame:cardView<span class="variable">.bounds</span>];</span><br><span class="line">        lbl<span class="variable">.text</span> = [@(index) stringValue];</span><br><span class="line">        [cardView addSubview:lbl];</span><br><span class="line">        lbl<span class="variable">.font</span> = [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">200</span>];</span><br><span class="line">        lbl<span class="variable">.textAlignment</span> = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cardView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CATransform3D</span>)carousel:(iCarousel *)carousel itemTransformForOffset:(<span class="built_in">CGFloat</span>)offset baseTransform:(<span class="built_in">CATransform3D</span>)transform</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%f"</span>,offset);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray3.jpg" alt=""></p>
<p>然后滑动的时候打出的日志是类似这样的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.330</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">2.999739</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.331</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">2.000261</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.331</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">1.999739</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.331</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">3.000261</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.331</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">0.999739</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.332</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">0.000261</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.332</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">1.000261</span></span><br><span class="line"></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.346</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">3.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.347</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">2.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.347</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">2.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.348</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">3.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.348</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">1.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.348</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">0.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.348</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">1.000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.363</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">3.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.363</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">2.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.363</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">2.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.363</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">3.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.364</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] -<span class="number">1.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.364</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">0.000000</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">22.364</span> DemoTaskTray[<span class="number">1834</span>:<span class="number">485052</span>] <span class="number">1.000000</span></span><br></pre></td></tr></table></figure>
<p>可以看到 所有的itemView都是居中并且重叠在一起的 我们滑动的时候并不会改变itemView的位置 但是这个offset是会改变的 而且可以看到 所有的offset的相邻差值都为1.0 </p>
<p>这就是iCarousel的一个重要的设计理念 iCarousel虽然跟UIScrollView一样都各自会维护自己的scrollOffset 但是UIScrollView在滑动的时候改变的是自己的ViewPort 就是说 UIScrollView上的itemView是真正被放置到了他被设置的位置上 只是UIScrollView通过移动显示的窗口 造成了滑动的感觉(如果不理解 请看<a href="http://objccn.io/issue-3-2/" target="_blank" rel="external">这篇文章</a>)</p>
<p>但是iCarousel并不是这样 iCarousel会把所有的itemView都居中重叠放置在一起 当scrollOffset变化时 iCarousel会计算每个itemView的offset 并通过<code>- (CATransform3D)carousel:(iCarousel *)carousel itemTransformForOffset:(CGFloat)offset baseTransform:(CATransform3D)transform</code>这个函数来对每个itemView进行形变 通过形变来造成滑动的效果</p>
<p>这个非常大胆和另类的想法着实很奇妙! 可能我解释得不够好(尽力了~~) 还是通过代码来解释比较好</p>
<p>我们修改一下函数的实现</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CATransform3D</span>)carousel:(iCarousel *)carousel itemTransformForOffset:(<span class="built_in">CGFloat</span>)offset baseTransform:(<span class="built_in">CATransform3D</span>)transform</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%f"</span>,offset);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CATransform3DTranslate</span>(transform, offset * <span class="keyword">self</span><span class="variable">.cardSize</span><span class="variable">.width</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray4.jpg" alt=""></p>
<p>我们可以看到 已经可以滑动了 而且这个效果 就是类似<code>iCarouselTypeLinear</code>的效果<br>没错 其实iCarousel所有的内置类型也都是通过这种方式来实现的 只是分别根据offset进行了不同的形变 就造成了各种不同的效果<br>要说明的是 函数仅提供<strong>offset</strong>作为参数 并没有提供index来指明对应的是哪一个itemView 这样的好处是可以让人只关注于具体的形变计算 而无需计算与currentItemView之间的距离之类的</p>
<p>注意的是offset是元单位(就是说 offset是不包含宽度的 仅仅是用来说明itemView的偏移系数) 下图简单说明了一下</p>
<p>当没有滑动的时候 offset是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray9.png" alt=""><br>当滑动的时候 offset是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray10.png" alt=""></p>
<p>怎么样 知道了原理之后 是不是有种跃跃欲试的感觉? 接下来我们就回到主题上 看看如何一步步实现我们想要的效果</p>
<h2 id="计算">计算</h2><hr>
<p>通过刚才原理的介绍 可以知道 接下来的重点就是关于offset的计算 </p>
<p>我们首先来确定一下函数的曲线图 通过观察iOS9的实例效果我们可以知道 itemView从左向右滑的时候是越来越快的<br>所以这个曲线大概是这个样子的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray1.png" alt=""></p>
<p>考验你高中数学知识的时候到了 怎么找到这种函数?<br>有种叫<strong><a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E7%BA%BF" target="_blank" rel="external">直角双曲线</a></strong>的函数  大概公式是这个样子<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray5.png" alt=""></p>
<p>其曲线图是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray2.png" alt=""></p>
<p>可以看到 位于第二象限的曲线就是我们要的样子 但是我们还要调整一下才能得到最终的结果</p>
<p>由于offset为0的时候 本身是不形变的 所以可以知道曲线是过原点(0,0)的 那么我们可以得到函数的一般式 </p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray8.png" alt=""></p>
<p>而在文章开头我们得到了这样两组数据</p>
<ul>
<li>最右边卡片(序号为1)的位移就是中心卡片宽度的4/5</li>
<li>最左边的卡片(序号为-2)的位移就是中心卡片的宽度的2/5</li>
</ul>
<p>那么代入上面的一般式中 我们可以得到两个公式</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray11.png" alt=""></p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray12.png" alt=""></p>
<p>计算可以得到 </p>
<blockquote>
<p><strong>a=5/4</strong><br><strong>b=5/8</strong></p>
</blockquote>
<p>然后我们就可以得到我们最终想要的公式</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray7.png" alt=""></p>
<p>看看曲线图</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray4.png" alt=""></p>
<p>然后我们修改一下程序代码(这段代码其实就是本文的<strong>关键</strong>所在)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CATransform3D</span>)carousel:(iCarousel *)carousel itemTransformForOffset:(<span class="built_in">CGFloat</span>)offset baseTransform:(<span class="built_in">CATransform3D</span>)transform</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> scale = [<span class="keyword">self</span> scaleByOffset:offset];</span><br><span class="line">    <span class="built_in">CGFloat</span> translation = [<span class="keyword">self</span> translationByOffset:offset];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CATransform3DScale</span>(<span class="built_in">CATransform3DTranslate</span>(transform, translation * <span class="keyword">self</span><span class="variable">.cardSize</span><span class="variable">.width</span>, <span class="number">0</span>, <span class="number">0</span>), scale, scale, <span class="number">1.0</span>f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)carouselDidScroll:(iCarousel *)carousel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="built_in">UIView</span> *view <span class="keyword">in</span> carousel<span class="variable">.visibleItemViews</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CGFloat</span> offset = [carousel offsetForItemAtIndex:[carousel indexOfItemView:view]];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( offset &lt; -<span class="number">3.0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            view<span class="variable">.alpha</span> = <span class="number">0.0</span>f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( offset &lt; -<span class="number">2.0</span>f)</span><br><span class="line">        &#123;</span><br><span class="line">            view<span class="variable">.alpha</span> = offset + <span class="number">3.0</span>f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            view<span class="variable">.alpha</span> = <span class="number">1.0</span>f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//形变是线性的就ok了</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)scaleByOffset:(<span class="built_in">CGFloat</span>)offset</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> offset*<span class="number">0.04</span>f + <span class="number">1.0</span>f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位移通过得到的公式来计算</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)translationByOffset:(<span class="built_in">CGFloat</span>)offset</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> z = <span class="number">5.0</span>f/<span class="number">4.0</span>f;</span><br><span class="line">    <span class="built_in">CGFloat</span> n = <span class="number">5.0</span>f/<span class="number">8.0</span>f;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//z/n是临界值 &gt;=这个值时 我们就把itemView放到比较远的地方不让他显示在屏幕上就可以了</span></span><br><span class="line">    <span class="keyword">if</span> ( offset &gt;= z/n )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.0</span>f;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(z-n*offset)-<span class="number">1</span>/z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看看效果</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray5.jpg" alt=""></p>
<p>看上去已经是我们想要的效果了</p>
<p>不过 滑动一下就会发现问题</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray6.jpg" alt=""></p>
<p>原来虽然itemView的大小和位移都按照我们的预期变化了 但是层级出现了问题 那么iCarousel是如何调整itemView的层级的呢? 查看源码我们可以知道</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSComparisonResult</span> compareViewDepth(<span class="built_in">UIView</span> *view1, <span class="built_in">UIView</span> *view2, iCarousel *<span class="keyword">self</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//compare depths</span></span><br><span class="line">    <span class="built_in">CATransform3D</span> t1 = view1<span class="variable">.superview</span><span class="variable">.layer</span><span class="variable">.transform</span>;</span><br><span class="line">    <span class="built_in">CATransform3D</span> t2 = view2<span class="variable">.superview</span><span class="variable">.layer</span><span class="variable">.transform</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> z1 = t1<span class="variable">.m13</span> + t1<span class="variable">.m23</span> + t1<span class="variable">.m33</span> + t1<span class="variable">.m43</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> z2 = t2<span class="variable">.m13</span> + t2<span class="variable">.m23</span> + t2<span class="variable">.m33</span> + t2<span class="variable">.m43</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> difference = z1 - z2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//if depths are equal, compare distance from current view</span></span><br><span class="line">    <span class="keyword">if</span> (difference == <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CATransform3D</span> t3 = [<span class="keyword">self</span> currentItemView]<span class="variable">.superview</span><span class="variable">.layer</span><span class="variable">.transform</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.vertical</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CGFloat</span> y1 = t1<span class="variable">.m12</span> + t1<span class="variable">.m22</span> + t1<span class="variable">.m32</span> + t1<span class="variable">.m42</span>;</span><br><span class="line">            <span class="built_in">CGFloat</span> y2 = t2<span class="variable">.m12</span> + t2<span class="variable">.m22</span> + t2<span class="variable">.m32</span> + t2<span class="variable">.m42</span>;</span><br><span class="line">            <span class="built_in">CGFloat</span> y3 = t3<span class="variable">.m12</span> + t3<span class="variable">.m22</span> + t3<span class="variable">.m32</span> + t3<span class="variable">.m42</span>;</span><br><span class="line">            difference = fabs(y2 - y3) - fabs(y1 - y3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CGFloat</span> x1 = t1<span class="variable">.m11</span> + t1<span class="variable">.m21</span> + t1<span class="variable">.m31</span> + t1<span class="variable">.m41</span>;</span><br><span class="line">            <span class="built_in">CGFloat</span> x2 = t2<span class="variable">.m11</span> + t2<span class="variable">.m21</span> + t2<span class="variable">.m31</span> + t2<span class="variable">.m41</span>;</span><br><span class="line">            <span class="built_in">CGFloat</span> x3 = t3<span class="variable">.m11</span> + t3<span class="variable">.m21</span> + t3<span class="variable">.m31</span> + t3<span class="variable">.m41</span>;</span><br><span class="line">            difference = fabs(x2 - x3) - fabs(x1 - x3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (difference &lt; <span class="number">0.0</span>)? <span class="built_in">NSOrderedAscending</span>: <span class="built_in">NSOrderedDescending</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)depthSortViews</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> [[_itemViews allValues] sortedArrayUsingFunction:(<span class="built_in">NSInteger</span> (*)(<span class="keyword">id</span>, <span class="keyword">id</span>, <span class="keyword">void</span> *))compareViewDepth context:(__bridge <span class="keyword">void</span> *)<span class="keyword">self</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        [_contentView bringSubviewToFront:view<span class="variable">.superview</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要就是这个<code>compareViewDepth</code>的比较函数起作用 而这个函数中比较的就是<strong>CATransform3D</strong>的各个属性值</p>
<p>我们来看一下CATransform3D的各个属性各代表什么<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="built_in">CATransform3D</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">CGFloat</span>     m11（x缩放）,     m12（y切变）,     m13（旋转）,     m14（）;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span>     m21（x切变）,     m22（y缩放）,     m23（）,     m24（）;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span>     m31（旋转）,      m32（ ）,        m33（）,     m34（透视）;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span>     m41（x平移）,     m42（y平移）,     m43（z平移）,     m44（）;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>而所有<code>CATransform3D</code>开头的函数(比如<code>CATransform3DScale</code> <code>CATransform3DTranslate</code>) 改变的也就是这些值而已</p>
<p>回到整体 我们发现这个函数先比较的是<strong>t1.m13 + t1.m23 + t1.m33 + t1.m43;</strong> 而m13代表的是旋转 m23和m33暂时并没有含义 而m43代表的是z平移  那么我们只要改变m43就可以了 而改变m43最简单的办法就是</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DTranslate</span> (<span class="built_in">CATransform3D</span> t, <span class="built_in">CGFloat</span> tx,<span class="built_in">CGFloat</span> ty, <span class="built_in">CGFloat</span> tz)</span><br></pre></td></tr></table></figure>
<p>最后一个参数就是用来改变m43的 </p>
<p>那么我们把之前iCarousel的delegate方法稍微改动一下 将当前的offset设置给最后一个参数即可(因为offset就是按顺序传进来的)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;return CATransform3DScale(CATransform3DTranslate(transform, translation * self.cardSize.width, 0, offset), scale, scale, 1.0f);</span><br></pre></td></tr></table></figure>
<p>再看看效果</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray2.gif" alt=""></p>
<p><strong>Bang!</strong><br>我们已经得到了一个简单的copycat</p>
<h2 id="小结">小结</h2><hr>
<p>文中的<a href="https://github.com/adad184/DemoTaskTray" target="_blank" rel="external">demo</a>可以在这里找到 </p>
<p>可以看到 使用iCarousel 我们仅用不到100行就实现了一个非常不错的效果(关键代码不到50行) 而无需做很多额外的工作(当然大家就不要揪细节了 比如以渐隐代替模糊 最后一张卡片居中等问题 毕竟这不是个轮子 只是教大家一种方法)</p>
<p>如果大家真正读懂了这篇文章(可能我写得不是很清楚 建议看demo 同时读iCarousel的源码来理解) 那么只要遇到类似卡片滑动的组件 都可以轻松应对了</p>
<p>说到这里 我个人是非常不喜欢重复造轮子的 能用最少的代码达到所需的要求是我一直以来的准则 而且很多经典的轮子库(比如iCarousel)也值得你去深入探索和学习 了解作者的想法和思路(站在巨人的肩膀)是一种非常不错的学习方法和开阔视野的途径</p>
<p>另外 文中所用到的数学公式曲线图生成网站是<a href="https://www.desmos.com/calculator" target="_blank" rel="external">Desmos Graphing Calculator</a>(从<a href="http://weibo.com/710312327?from=feed&amp;loc=at&amp;nick=KITTEN-YANG" target="_blank" rel="external">@KITTEN-YANG</a>那瞄到的) 数学公式生成网站是<a href="http://www.sciweavers.org/free-online-latex-equation-editor" target="_blank" rel="external">Sciweaver</a>(直接把前者的公式复制到后者的输入框里就可以了 因为前者复制出来就是latex格式的公式了) 有需要的同学可以研究一下如何使用 (打算研究一下Matlab的用法 可能更方便)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p>iOS9马上要发布了 为了我司APP的兼容性问题 特意把手上的iOS Mac XCode都升级到了最新的beta版 然后发现iOS9的多任务管理器风格大变 变成了下面这种样子<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-08-03-advanced-icarousel-tutorial-copycat-of-ios9-task-tray1.gif" alt=""></p>
<p>我忽然想起来之前的文章提到我最爱的UI控件<a href="https://github.com/nicklockwood/iCarousel">iCarousel</a>要实现类似这种效果其实是很简单的 一时兴起就花时间试验了一下 效果还不错 所以接下来我就介绍一下iCarousel的高级用法: <strong>如何使用iCarousel的自定义方式来实现iOS9的多任务管理器效果</strong></p>]]>
    
    </summary>
    
      <category term="iCarousel" scheme="http://adad184.com/tags/iCarousel/"/>
    
      <category term="iOS9" scheme="http://adad184.com/tags/iOS9/"/>
    
      <category term="任务管理器" scheme="http://adad184.com/tags/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
      <category term="教程" scheme="http://adad184.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git的好伙伴:SourceTree & BeyondCompare]]></title>
    <link href="http://adad184.com/2015/07/28/use-git-with-sourcetree-and-beyondcompare/"/>
    <id>http://adad184.com/2015/07/28/use-git-with-sourcetree-and-beyondcompare/</id>
    <published>2015-07-28T09:48:34.000Z</published>
    <updated>2015-07-28T08:29:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>作为一个Coder 源代码控制管理系统(SCM)肯定是不陌生的 比如我就用过<strong>VSS</strong>-&gt;<strong>SVN</strong>-&gt;<strong>Git</strong> 其他有名的还有<strong>CVS</strong>和<strong>Mercurial</strong>等等<br>移动互联网时代 Git基本已成为大家的不二之选了(<a href="https://github.com/" target="_blank" rel="external">Github</a>功不可没啊)</p>
<p>今天不介绍Git的好处和使用方法 主要介绍一下两款与Git配套使用的好工具</p>
<ul>
<li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a></li>
<li><a href="http://www.scootersoftware.com/" target="_blank" rel="external">BeyondCompare</a></li>
</ul>
<a id="more"></a>
<h2 id="SourceTree">SourceTree</h2><p>作为一个懒人 Git的命令行我是不太爱的 所以GUI的工具就成了我的首选<br>Mac下的Git工具真是五花八门 著名的有<a href="http://www.git-tower.com/" target="_blank" rel="external">Tower</a> <a href="http://www.syntevo.com/smartgit/" target="_blank" rel="external">SmartGit</a>等等(更多可以看下<a href="https://git-scm.com/download/gui/linux" target="_blank" rel="external">这里的介绍</a>)</p>
<p>今天我们介绍的是<strong>SourceTree</strong> 出品方为<a href="https://www.atlassian.com/" target="_blank" rel="external">Atlassian</a> 旗下的产品还有著名的track工具<a href="https://www.atlassian.com/software/jira" target="_blank" rel="external">JIRA</a> Github的竞争者<a href="https://www.atlassian.com/software/bitbucket/overview" target="_blank" rel="external">Bitbucket</a>等等(这两个我也是经常用的 尤其是BitBucket 支持免费私有仓哦~) </p>
<p>SourceTree的特点如下</p>
<blockquote>
<ul>
<li><strong>免费</strong><br>SourceTree是免费使用的 只要简单的注册一下就好了</li>
<li><strong>跨平台</strong><br>Windows和Mac都可以用</li>
<li><strong>完美支持Github和Bitbucket</strong><br>我所有Github和Bitbucket上的项目都是用它来管理的 当然 公司的项目也是用SourceTree管理 无不干扰</li>
<li><strong>支持Git Flow</strong><br><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">Git Flow</a>(<a href="http://www.juvenxu.com/2010/11/28/a-successful-git-branching-model/" target="_blank" rel="external">翻译版</a>)是一套关于Git的使用实践 现在已得到广泛的认可和推广 如果使用得当 开发管理的过程将变得更轻松和清晰</li>
</ul>
</blockquote>
<p>这是SourceTree的Repo列表界面 也是打开时的默认界面 这里可以对所有的Repo进行统一的管理 也支持分组<br><img src="https://www.sourcetreeapp.com/images/sourcetree-hero-mac-bookmarks@2x.png" alt=""></p>
<p>这是SourceTree的Repo详情界面 这里是单独对某个Repo操作的地方 Git的所有操作你都可以在GUI上进行 非常的方便顺手<br><img src="https://www.sourcetreeapp.com/images/sourcetree-hero-mac-log@2x.png" alt=""></p>
<p>具体细节就请自己使用之后慢慢体会吧 这里就不多介绍了</p>
<h2 id="BeyondCompare">BeyondCompare</h2><p>我的BeyondCompare使用经验可以追溯到很多年前(那时候还在深圳的公司) 虽然大部分代码都是跑在Linux上的 但是公司还是选择在Windows上面做交叉编译 那个时候我们用的开发工具就是<a href="http://www.sourceinsight.com/" target="_blank" rel="external">SourceInsight</a>+BeyondCompare(SourceInsight也是神器 用过的同学应该都知道好在哪 可惜的是没有Mac版  而那个时候BC还是2.x的版本)</p>
<p>BeyondCompare是一款非常强大的文件对比工具 (比Xcode和SourceTree自带的不知道高明到哪去了 (ーωーก) 如果有过Merge经验的同学肯定能体会到有大量冲突时的痛苦 BeyondCompare可以帮你轻松解决这个问题</p>
<p>可是BeyondCompare之前是一直只有Windows版的 3.0开始支持Linux 4.0开始才支持Mac</p>
<p>接下来介绍一下SourceTree中如何集成BeyondCompare</p>
<ol>
<li>先安装好BeyondCompare(请支持正版)</li>
<li><p>打开SourceTree的<strong>Preferences</strong> 选择<strong>Diff</strong> 在下面的<strong>External Diff/Merge</strong>中做如下设置<br> Visual Diff Tool: <strong>Other</strong><br> Diff Command: <strong>/usr/local/bin/bcomp</strong><br> Arguments: <strong>\$LOCAL \$REMOTE</strong></p>
<p> Merge Tool: <strong>Other</strong><br> Merge Command: <strong>/usr/local/bin/bcomp</strong><br> Arguments: <strong>\$LOCAL \$REMOTE \$BASE \$MERGED</strong></p>
</li>
<li>打开终端 输入命令<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Applications/Beyond\ Compare.app/Contents/MacOS/bcomp /usr/local/bin/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这样就设置完成了 当有冲突的时候 在菜单中选择<strong>Resolve Conflicts</strong> -&gt; <strong>Launch External Merge Tool</strong> 即可打开BeyondCompare进行Merge操作<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-28-use-git-with-sourcetree-and-beyondcompare1.png" alt=""></p>
<h2 id="小结">小结</h2><p>工欲善其事必先利其器 好的开发工具可以让你事半功倍 节约宝贵的时间 这样就可以少加班了 (ﾉ&gt;ω&lt;)ﾉ (然并卵)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>作为一个Coder 源代码控制管理系统(SCM)肯定是不陌生的 比如我就用过<strong>VSS</strong>-&gt;<strong>SVN</strong>-&gt;<strong>Git</strong> 其他有名的还有<strong>CVS</strong>和<strong>Mercurial</strong>等等<br>移动互联网时代 Git基本已成为大家的不二之选了(<a href="https://github.com/">Github</a>功不可没啊)</p>
<p>今天不介绍Git的好处和使用方法 主要介绍一下两款与Git配套使用的好工具</p>
<ul>
<li><a href="https://www.sourcetreeapp.com/">SourceTree</a></li>
<li><a href="http://www.scootersoftware.com/">BeyondCompare</a></li>
</ul>]]>
    
    </summary>
    
      <category term="BeyondCompare" scheme="http://adad184.com/tags/BeyondCompare/"/>
    
      <category term="Git" scheme="http://adad184.com/tags/Git/"/>
    
      <category term="SourceTree" scheme="http://adad184.com/tags/SourceTree/"/>
    
      <category term="工具" scheme="http://adad184.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[后台定位上传的代码实践]]></title>
    <link href="http://adad184.com/2015/07/22/how-to-deal-with-background-location-update/"/>
    <id>http://adad184.com/2015/07/22/how-to-deal-with-background-location-update/</id>
    <published>2015-07-22T02:47:29.000Z</published>
    <updated>2015-08-19T08:43:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="http://adad184.com/2015/07/13/improve-performance-with-mkmapview/" target="_blank" rel="external">之前的文章</a>说过 我现在做的是LBS定位的社交APP 其中主要的一个功能就是能够实时定位社交圈中各个成员的位置 <strong>后台实时上传位置</strong>则是非常重要的一个技术点 接下来就来说说我关于这方面的实践经验</p>
<h2 id="需求">需求</h2><hr>
<p>先来看看实现这个功能的具体需求是什么 由于我们是实时定位的生活类社交APP 所以我们需要做到一下几点</p>
<blockquote>
<p><strong>1. 如果用户的位置在持续变化 则隔一段时间上报一次</strong><br>　　由于我们希望能够实时的将用户的位置变化反馈在APP里 所以定时的上报是刚需</p>
<p><strong>2. 如果用户的移动速度很慢 则隔一段距离上报一次</strong><br>　　如果用户是低速率的状态(比如步行的移动速度大概就是1m/s左右) 这个时候如果还按(1)中的方式来上报的话 由于变化太小 地图上的点会非常的密集 这种数据的意义不大(而且如果要做轨迹服务的话 这些密集点都是必须优化掉的) 所以这时候我们按照距离间隔来上报</p>
<p><strong>3. 如果用户的位置在到达某处后没有变化 则不继续上报</strong><br>　　我们只关心位置的变化 如果用户的位置没有变化或者变化很小 其实是不需要上报其位置的(比如进入的公司 或者等一个很长时间的红灯) 这时候我们就不上报(以达到省电的目的)</p>
<p><strong>4. 切换到后台也要能定位上报</strong><br>　　后台上报是必须的 用户不可能一直运行着我们的APP (iOS4开始就支持了)</p>
<p><strong>5. APP因各种原因终止运行后(用户主动关闭, 系统杀掉) 也要能定位上报</strong><br>　　用户主动关闭APP的几率不大 但是因系统调度被杀掉的情况是很普遍的 这个时候我们也要能够上报 (iOS7开始已支持被杀掉后唤醒)</p>
</blockquote>
<p>分析完需求 接下来就开始介绍如何实现</p>
<a id="more"></a>
<h2 id="准备">准备</h2><hr>
<p>首先做一些准备工作</p>
<p>在target的<strong>Capabilities</strong>选项中打开<strong>Background Modes</strong> 并勾选<strong>Location updates</strong><br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-21-how-to-deal-with-background-location-update1.png" alt=""></p>
<p>然后在plist中添加<strong>NSLocationAlawaysUsageDescription</strong>的键 在value中随便键入任何内容<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-21-how-to-deal-with-background-location-update2.png" alt=""><br>完成这两步 我们的前期工作就完成了 <strong>Background Modes</strong>是iOS7带入的新功能 而<strong>NSLocationAlawaysUsageDescription</strong>为了增强权限机制引入的提示描述 不添加这个的话 定位功能可是使用不了的 之后我们要调用<code>requestAlwaysAuthorization</code> 提示中就会显示这个描述</p>
<p>在评论中有朋友问起 为什么要使用<code>requestAlwaysAuthorization</code>而不使用<code>requestWhenInUseAuthorization</code>呢 我<a href="http://www.zoejblog.com/ios2014wwdc-what-is-new-in-core-location-ji-lu/" target="_blank" rel="external">借用一张图</a>来说明一下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-21-how-to-deal-with-background-location-update5.png" alt=""></p>
<p>简单来说 两者的区别在于前者支持<strong>Region Monitoring</strong>和<strong>Significant Location Changes</strong>而后者不支持<br>但其实还有一个非常重要的区别 就是前者<strong>支持程序被杀掉后的系统自动唤醒</strong> 而后者不支持 这是非常重要的一个区别</p>
<h2 id="代码">代码</h2><hr>
<p>定位肯定要跟<strong>CLLocationManager</strong>打交道 所以我们先定义一个<strong>CLLocationManager</strong>的子类 并根据需求中的几点定义三个变量</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMLocationManager</span> : <span class="title">CLLocationManager</span></span></span><br><span class="line"></span><br><span class="line">+ (instancetype)sharedManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> minSpeed;     <span class="comment">//最小速度</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> minFilter;    <span class="comment">//最小范围</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> minInteval;   <span class="comment">//更新间隔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这里解释一下这几个参数</p>
<ul>
<li><strong>minSpeed</strong> 如果当前运动速度大于此值 则满足需求(1) 以时间为更新依据(minFilter) 如果当前运动速度小于此值 则满足需求(2) 以范围为更新依据(minInteval)</li>
<li><strong>minFilter</strong> 最小的触发范围 用于需求(1)</li>
<li><strong>minInteval</strong> 更新间隔 用于需求(2)</li>
</ul>
<p>接下来是初始化函数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">self</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.minSpeed</span> = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.minFilter</span> = <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.minInteval</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.distanceFilter</span>  = <span class="keyword">self</span><span class="variable">.minFilter</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.desiredAccuracy</span> = kCLLocationAccuracyBest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里的默认值可以根据需求来调整</p>
<p>然后是位置更新后的处理逻辑 其实也非常的简单<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)locationManager:(CLLocationManager *)manager didUpdateLocations:(<span class="built_in">NSArray</span> *)locations</span><br><span class="line">&#123;</span><br><span class="line">    CLLocation *location = locations[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,location);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据实际情况来调整触发范围</span></span><br><span class="line">    [<span class="keyword">self</span> adjustDistanceFilter:location];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传数据</span></span><br><span class="line">    [<span class="keyword">self</span> uploadLocation:location];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而这个<strong>adjustDistanceFilter</strong>函数 就是整个代码的核心 会根据当前速度来动态的调整<strong>distanceFilter</strong>这个参数 以满足我们的需求<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">*  规则: 如果速度小于minSpeed m/s 则把触发范围设定为50m</span><br><span class="line">*  否则将触发范围设定为minSpeed*minInteval</span><br><span class="line">*  此时若速度变化超过10% 则更新当前的触发范围(这里限制是因为不能不停的设置distanceFilter,</span><br><span class="line">*  否则uploadLocation会不停被触发)</span><br><span class="line">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)adjustDistanceFilter:(CLLocation*)location</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    NSLog(@"adjust:%f",location.speed);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( location<span class="variable">.speed</span> &lt; <span class="keyword">self</span><span class="variable">.minSpeed</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( fabs(<span class="keyword">self</span><span class="variable">.distanceFilter</span>-<span class="keyword">self</span><span class="variable">.minFilter</span>) &gt; <span class="number">0.1</span>f )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.distanceFilter</span> = <span class="keyword">self</span><span class="variable">.minFilter</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CGFloat</span> lastSpeed = <span class="keyword">self</span><span class="variable">.distanceFilter</span>/<span class="keyword">self</span><span class="variable">.minInteval</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( (fabs(lastSpeed-location<span class="variable">.speed</span>)/lastSpeed &gt; <span class="number">0.1</span>f) || (lastSpeed &lt; <span class="number">0</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CGFloat</span> newSpeed  = (<span class="keyword">int</span>)(location<span class="variable">.speed</span>+<span class="number">0.5</span>f);</span><br><span class="line">            <span class="built_in">CGFloat</span> newFilter = newSpeed*<span class="keyword">self</span><span class="variable">.minInteval</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span><span class="variable">.distanceFilter</span> = newFilter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里要注意到的是<strong>distanceFilter</strong>这个参数不能一直进行设置 因为每次设置完以后 再接下来的一秒以后 会立即触发<code>didUpdateLocations</code>回调(系统的标准最短更新间隔是1秒 即更新频率为1hz) 所以这里只有当变化超过10%的时候才会重置<strong>distanceFilter</strong></p>
<p>接下来 为了能够正确的在被杀掉的情况下被唤醒 我们还要做最后一步操作 在<strong>AppDelegate</strong>的<code>didFinishLaunchingWithOptions</code>中加入下面的代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([launchOptions objectForKey:<span class="built_in">UIApplicationLaunchOptionsLocationKey</span>]) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="preprocessor">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 80000</span></span><br><span class="line">        [[MMLocationManager sharedManager] requestAlwaysAuthorization];</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是iOS9中针对后台定位推出的新属性 不设置的话 可是会出现顶部蓝条的哦(类似热点连接)</span></span><br><span class="line"><span class="preprocessor">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 90000</span></span><br><span class="line">        [[MMLocationManager sharedManager] setAllowsBackgroundLocationUpdates:<span class="literal">YES</span>];</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line"></span><br><span class="line">    [[MMLocationManager sharedManager] startMonitoringSignificantLocationChanges];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是因为被杀掉的APP 在后台被系统唤醒时 <strong>launchOptions</strong>会包含<strong>UIApplicationLaunchOptionsLocationKey</strong>字段来进行标识 这时我们再重新启动定位功能即可</p>
<p>而为什么使用<code>startMonitoringSignificantLocationChanges</code>而不是<code>startUpdatingLocation</code>呢 官方文档中有一句话(感谢<strong>@一定</strong> 同学指正)</p>
<blockquote>
<p>If your app is terminated either by a user or by the system, the system doesn’t automatically restart your app when new location updates arrive. The only way to have your app relaunched automatically is to use region monitoring or the significant-change location service.</p>
</blockquote>
<p>APP被杀掉后 我们只能用<code>startMonitoringSignificantLocationChanges</code>代替<code>startUpdatingLocation</code>来实现定位服务</p>
<p>至此 满足我们需求的定位功能就完成了 为此我写了一个demo来验证(使用模拟器 然后选择Debug-&gt;Location-&gt;Freeway Drive) 结果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-21-how-to-deal-with-background-location-update3.png" alt=""><br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-21-how-to-deal-with-background-location-update4.png" alt=""></p>
<p>接下来我们会讨论一下相关的几个问题</p>
<h2 id="讨论">讨论</h2><hr>
<blockquote>
<h3 id="为什么不用定时器来控制定位间隔">为什么不用定时器来控制定位间隔</h3><p>网上有很多教程是用NSTimer来实现的 但是其实这样不是很好 虽然定位的间隔是固定的 但是耗电的问题无法解决 后台会持续的更新定位 无论当前的位置是否在更新 当然 如果你的使用场景就是要每隔一段时间来上传 就可以使用定时器来处理</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="使用distanceFilter来处理_会有些什么问题">使用distanceFilter来处理 会有些什么问题</h3><p>由于distanceFilter=currentSpeed*minInteval 那么间隔的时间因为速度的变化而会有波动 但是这个波动是在可接受范围的 如果速度加快或者变慢 那么下一次的更新时间则会相应的缩短或者变长 但是因为我们是在真实生活环境中 速度的变化不可能那么快 所以这个误差是可以接受的 另外我们对distanceFilter针对速度进行矫正 因而总体来说 间隔还是会保持在我们与其的范围内的</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="为什么不使用allowDeferredLocationUpdatesUntilTraveled:timeout:">为什么不使用<strong>allowDeferredLocationUpdatesUntilTraveled:timeout:</strong></h3><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/allowDeferredLocationUpdatesUntilTraveled:timeout:" target="_blank" rel="external">allowDeferredLocationUpdatesUntilTraveled</a>是iOS6推出的一个新的API 看名字我们可以知道这个函数的作用是延迟位置更新 直到移动了xx米或者时间超过了xx秒 那么这个函数不正好满足了我们的所有要求么? 可是万万没想到 事情并不是这样的 这个函数并不好用</p>
</blockquote>
<p>接下来是吐槽时间 ლ(⁰⊖⁰ლ)</p>
<p>为什么说这个函数不好用呢? 首先 这个函数的要求很多 我们来看看要这个函数起作用要满足哪些条件</p>
<blockquote>
<ul>
<li>必须iPhone5以及之后的硬件设备才支持</li>
<li>desiredAccuracy必须设置为<code>kCLLocationAccuracyBest</code>或者<code>kCLLocationAccuracyBestForNavigation</code></li>
<li>distanceFilter必须设置为<code>kCLDistanceFilterNone</code></li>
<li>只在APP运行在后台时生效 前台运行时是不会进行延迟处理的</li>
<li>只有系统在<strong>低功耗(Low Power State)</strong>的时候<strong>才有可能</strong>生效</li>
</ul>
</blockquote>
<p>关于<strong>Low Power State</strong>在iOS中的描述 我只在苹果官网的文档中找到<a href="https://developer.apple.com/library/prerelease/ios/documentation/Performance/Conceptual/EnergyGuide-iOS/FundamentalConcepts.html#//apple_ref/doc/uid/TP40015243-CH4-SW1" target="_blank" rel="external">部分定义</a></p>
<blockquote>
<p>iOS is very good at getting a device into a low power state when it’s not being used. At idle, very little power is drawn and energy impact is low. When tasks are actively occurring, system resources are being used and those resources require energy. However, sporadic tasks can cause the device to enter an intermediate state—neither idle nor active—when the device isn’t doing anything. There may not be enough time during these intermediate states for the device to reach absolute idle before the next task executes. When this occurs, energy is wasted and the user’s battery drains faster.</p>
</blockquote>
<p>据我简单的了解 这个**Low Power State”只有在黑屏的状态下(不只是锁屏)才有可能触发 只要有任何电量屏幕的操作(就连推送也算) 都会使APP退出这个状态 同时 如果在充电状态下 也是无法进入的</p>
<p>我尝试在真机和模拟器上使用这个API 但结果APP还是以1HZ的频率在定位(设置了kCLDistanceFilterNone的原因)<br>虽然<code>locationManager:didFinishDeferredUpdatesWithError:</code>在指定的时间后成功的回调了 但是结果还是没有deffer 于是我查了一下 原来这个函数无法直接进行调试的 因为:</p>
<blockquote>
<ul>
<li>不支持模拟器 <code>deferredLocationUpdatesAvailable</code>用于检测设备是否支持 模拟器会返回NO</li>
<li>不支持真机调试 因为调试时Xcode会阻止程序休眠 导致程序无法进入低功耗状态 </li>
</ul>
</blockquote>
<p>结论就是…这个东西连调试都没办法 所以我也没有那么多时间跑到外面去测试这个东西… 况且使用我上述的方法已经基本可以满足需求… 所以我已放弃继续研究这个API了 因为就算使用了这个东西 也仅仅是锦上添花而已</p>
<p>如果有哪些同学知道如何正确的使用这个东西 请留言告诉我 万分感谢!</p>
<h2 id="小结">小结</h2><hr>
<p>文中的demo可以在<a href="https://github.com/adad184/DemoBackgroundLocationUpdate" target="_blank" rel="external">这里找到</a> 另外demo中用到了Realm来存储数据(模拟上传操作) 有兴趣的同学可以看一下</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="http://adad184.com/2015/07/13/improve-performance-with-mkmapview/">之前的文章</a>说过 我现在做的是LBS定位的社交APP 其中主要的一个功能就是能够实时定位社交圈中各个成员的位置 <strong>后台实时上传位置</strong>则是非常重要的一个技术点 接下来就来说说我关于这方面的实践经验</p>
<h2 id="需求">需求</h2><hr>
<p>先来看看实现这个功能的具体需求是什么 由于我们是实时定位的生活类社交APP 所以我们需要做到一下几点</p>
<blockquote>
<p><strong>1. 如果用户的位置在持续变化 则隔一段时间上报一次</strong><br>　　由于我们希望能够实时的将用户的位置变化反馈在APP里 所以定时的上报是刚需</p>
<p><strong>2. 如果用户的移动速度很慢 则隔一段距离上报一次</strong><br>　　如果用户是低速率的状态(比如步行的移动速度大概就是1m/s左右) 这个时候如果还按(1)中的方式来上报的话 由于变化太小 地图上的点会非常的密集 这种数据的意义不大(而且如果要做轨迹服务的话 这些密集点都是必须优化掉的) 所以这时候我们按照距离间隔来上报</p>
<p><strong>3. 如果用户的位置在到达某处后没有变化 则不继续上报</strong><br>　　我们只关心位置的变化 如果用户的位置没有变化或者变化很小 其实是不需要上报其位置的(比如进入的公司 或者等一个很长时间的红灯) 这时候我们就不上报(以达到省电的目的)</p>
<p><strong>4. 切换到后台也要能定位上报</strong><br>　　后台上报是必须的 用户不可能一直运行着我们的APP (iOS4开始就支持了)</p>
<p><strong>5. APP因各种原因终止运行后(用户主动关闭, 系统杀掉) 也要能定位上报</strong><br>　　用户主动关闭APP的几率不大 但是因系统调度被杀掉的情况是很普遍的 这个时候我们也要能够上报 (iOS7开始已支持被杀掉后唤醒)</p>
</blockquote>
<p>分析完需求 接下来就开始介绍如何实现</p>]]>
    
    </summary>
    
      <category term="后台" scheme="http://adad184.com/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="定位" scheme="http://adad184.com/tags/%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一次对MKMapView的性能优化]]></title>
    <link href="http://adad184.com/2015/07/13/improve-performance-with-mkmapview/"/>
    <id>http://adad184.com/2015/07/13/improve-performance-with-mkmapview/</id>
    <published>2015-07-13T07:50:46.000Z</published>
    <updated>2015-07-14T04:10:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p>最近做的项目主要是LBS这块 主打成员定位功能 我们的UI设计是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview1.png" alt=""></p>
<a id="more"></a>
<p>乍一看上去是挺好挺美观的 不同的人会显示不同的头像 可是当人扎堆的时候 问题就来了<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview2.png" alt=""></p>
<p>当人多的时候(例如上图所示) 地图滑动起来就能感觉到明显顿卡 那种不流畅感能折磨死人 所以 自然我们要解决这个问题(等等 先不要吐槽为什么不用地图聚合 因为这已经是地图放到最大了 聚合不适合这次的问题讨论)</p>
<h2 id="分析">分析</h2><hr>
<p>首先看下我是怎么实现这个annotationView的 由于这个annotationsView是异形的(也就是无法通过设置圆角直接得到) 而且里面的图片还因用户而异 所以解决方案就是使用layer.mask来进行遮罩 代码如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MMAnnotationView</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)initWithAnnotation:(<span class="keyword">id</span>&lt;<span class="built_in">MKAnnotation</span>&gt;)annotation reuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithAnnotation:annotation reuseIdentifier:reuseIdentifier];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">self</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, TRACK_ANNOTATION_SIZE<span class="variable">.width</span>, TRACK_ANNOTATION_SIZE<span class="variable">.height</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.centerOffset</span> = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, -(TRACK_ANNOTATION_SIZE<span class="variable">.height</span>-<span class="number">3</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.canShowCallout</span> = <span class="literal">NO</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.avatarView</span> = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:<span class="keyword">self</span><span class="variable">.bounds</span>];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span><span class="variable">.avatarView</span>];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.avatarView</span><span class="variable">.contentMode</span> = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CAShapeLayer</span> *shapelayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">        shapelayer<span class="variable">.frame</span> = <span class="keyword">self</span><span class="variable">.bounds</span>;</span><br><span class="line">        shapelayer<span class="variable">.path</span> = <span class="keyword">self</span><span class="variable">.framePath</span><span class="variable">.CGPath</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.avatarView</span><span class="variable">.layer</span><span class="variable">.mask</span> = shapelayer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.layer</span><span class="variable">.shadowPath</span> = <span class="keyword">self</span><span class="variable">.framePath</span><span class="variable">.CGPath</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.layer</span><span class="variable">.shadowRadius</span> = <span class="number">1.0</span>f;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.layer</span><span class="variable">.shadowColor</span> = [<span class="built_in">UIColor</span> colorWithHex:<span class="number">0x666666FF</span>]<span class="variable">.CGColor</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.layer</span><span class="variable">.shadowOpacity</span> = <span class="number">1.0</span>f;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.layer</span><span class="variable">.shadowOffset</span> = <span class="built_in">CGSizeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.layer</span><span class="variable">.masksToBounds</span> = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mask路径</span></span><br><span class="line">- (<span class="built_in">UIBezierPath</span> *)framePath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !_framePath )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CGFloat</span> arrowWidth = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGRect</span> rectangle = <span class="built_in">CGRectInset</span>(<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span><span class="variable">.bounds</span>), <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span><span class="variable">.bounds</span>)), <span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPoint</span> p[<span class="number">3</span>] = &#123;</span><br><span class="line">        &#123;<span class="built_in">CGRectGetMidX</span>(<span class="keyword">self</span><span class="variable">.bounds</span>)-arrowWidth/<span class="number">2</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span><span class="variable">.bounds</span>)-<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="built_in">CGRectGetMidX</span>(<span class="keyword">self</span><span class="variable">.bounds</span>)+arrowWidth/<span class="number">2</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span><span class="variable">.bounds</span>)-<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="built_in">CGRectGetMidX</span>(<span class="keyword">self</span><span class="variable">.bounds</span>), <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span><span class="variable">.bounds</span>)-<span class="number">4</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPathAddRoundedRect</span>(path, <span class="literal">NULL</span>, rectangle, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">CGPathAddLines</span>(path, <span class="literal">NULL</span>, p, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPathCloseSubpath</span>(path);</span><br><span class="line"></span><br><span class="line">        _framePath = [<span class="built_in">UIBezierPath</span> bezierPathWith<span class="built_in">CGPath</span>:path];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPathRelease</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _framePath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我用代码生成了形状路径 并以此生成了layer的mask和shadowPath<br>使用时 只要直接用SDWebImage设置头像就行了<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[annotationView<span class="variable">.avatarView</span> sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:avatarURL] placeholderImage:placeHolderImage];</span><br></pre></td></tr></table></figure></p>
<p>接下来用工具分析一下问题出来哪 分析性能当然是选择<strong>Instrments</strong>(用法在这里就不做介绍了) 打开<strong>Core Animation</strong> 然后运行程序 滑动地图 可以看到性能分析如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview3.png" alt=""></p>
<p>原来平均帧数只有不到30帧 这离我们的目标60帧差得实在太远</p>
<p>再使用Debug Option来深入分析一下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview7.png" alt=""><br>由于MKMapView的原因 这里我们主要关心这几个选项</p>
<ul>
<li><strong>Color Blended Layers</strong></li>
<li><strong>Color Misaligned Images</strong></li>
<li><strong>Color Offscreen-Rendered Yellow</strong></li>
</ul>
<p>分别打开这几个选项 结果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview4.png" alt=""><br>可以看到</p>
<ul>
<li><strong>Color Blended Layers</strong>没有问题 不过这也是正常的 由于使用了mask 没有透明的地方</li>
<li><strong>Color Misaligned Images</strong>除了默认头像外全中 这是因为服务器上的图片大小跟显示的大小不一致 导致缩放 而默认头像则是一致的 所以没问题</li>
<li><strong>Color Offscreen-Rendered Yellow</strong>全中 由于使用了mask 导致大量的离屏渲染 这也是性能下降的主要原因</li>
</ul>
<h1 id="解决">解决</h1><hr>
<p>问题的原因找到了 那么接下来该如何解决呢? </p>
<ul>
<li>首先mask是肯定不能用了 </li>
<li>其次下载下来的图片我们要预处理成实际大小</li>
</ul>
<p>那么 直接把下载下来的图片合成为我们要显示的最终结果不就ok了吗? 试试看</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)loadAnnotationImageWithURL:(<span class="built_in">NSString</span>*)url imageView:(<span class="built_in">UIImageView</span>*)imageView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将合成后的图片缓存起来</span></span><br><span class="line">    <span class="built_in">NSString</span> *annoImageURL = url;</span><br><span class="line">    <span class="built_in">NSString</span> *annoImageCacheURL = [annoImageURL stringByAppendingString:<span class="string">@"cache"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIImage</span> *cacheImage = [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:annoImageCacheURL];</span><br><span class="line">    <span class="keyword">if</span> ( cacheImage )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//LLLog(@"hit cache");</span></span><br><span class="line">        imageView<span class="variable">.image</span> = cacheImage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//LLLog(@"no cache");</span></span><br><span class="line">        [imageView sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:annoImageURL]</span><br><span class="line">        placeholderImage:placeHolderImage</span><br><span class="line">        completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">NSURL</span> *imageURL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!error)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">UIImage</span> *annoImage = [image annotationImage];</span><br><span class="line">            imageView<span class="variable">.image</span> = annoImage;</span><br><span class="line"></span><br><span class="line">            [[SDImageCache sharedImageCache] storeImage:annoImage forKey:annoImageCacheURL];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">LJC</span>)</span></span><br><span class="line">- (<span class="built_in">UIImage</span>*) annotationImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">UIView</span> *snapshotView = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">UIImageView</span> *imageView = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !snapshotView )</span><br><span class="line">    &#123;</span><br><span class="line">        snapshotView = [<span class="built_in">UIView</span> new];</span><br><span class="line">        snapshotView<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, TRACK_ANNOTATION_SIZE<span class="variable">.width</span>, TRACK_ANNOTATION_SIZE<span class="variable">.height</span>);</span><br><span class="line"></span><br><span class="line">        imageView = [<span class="built_in">UIImageView</span> new];</span><br><span class="line">        [snapshotView addSubview:imageView];</span><br><span class="line">        imageView<span class="variable">.clipsToBounds</span> = <span class="literal">YES</span>;</span><br><span class="line">        imageView<span class="variable">.frame</span> = snapshotView<span class="variable">.bounds</span>;</span><br><span class="line">        imageView<span class="variable">.contentMode</span> = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGFloat</span> arrowWidth = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGRect</span> rectangle = <span class="built_in">CGRectInset</span>(<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(imageView<span class="variable">.bounds</span>), <span class="built_in">CGRectGetWidth</span>(imageView<span class="variable">.bounds</span>)), <span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPoint</span> p[<span class="number">3</span>] = &#123;</span><br><span class="line">            &#123;<span class="built_in">CGRectGetMidX</span>(imageView<span class="variable">.bounds</span>)-arrowWidth/<span class="number">2</span>, <span class="built_in">CGRectGetWidth</span>(imageView<span class="variable">.bounds</span>)-<span class="number">6</span>&#125;,</span><br><span class="line">            &#123;<span class="built_in">CGRectGetMidX</span>(imageView<span class="variable">.bounds</span>)+arrowWidth/<span class="number">2</span>, <span class="built_in">CGRectGetWidth</span>(imageView<span class="variable">.bounds</span>)-<span class="number">6</span>&#125;,</span><br><span class="line">            &#123;<span class="built_in">CGRectGetMidX</span>(imageView<span class="variable">.bounds</span>), <span class="built_in">CGRectGetHeight</span>(imageView<span class="variable">.bounds</span>)-<span class="number">4</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPathAddRoundedRect</span>(path, <span class="literal">NULL</span>, rectangle, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">CGPathAddLines</span>(path, <span class="literal">NULL</span>, p, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPathCloseSubpath</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CAShapeLayer</span> *shapelayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">        shapelayer<span class="variable">.frame</span> = imageView<span class="variable">.bounds</span>;</span><br><span class="line">        shapelayer<span class="variable">.path</span> = path;</span><br><span class="line"></span><br><span class="line">        imageView<span class="variable">.layer</span><span class="variable">.mask</span> = shapelayer;</span><br><span class="line"></span><br><span class="line">        snapshotView<span class="variable">.layer</span><span class="variable">.shadowPath</span> = path;</span><br><span class="line">        snapshotView<span class="variable">.layer</span><span class="variable">.shadowRadius</span> = <span class="number">1.0</span>f;</span><br><span class="line">        snapshotView<span class="variable">.layer</span><span class="variable">.shadowColor</span> = [<span class="built_in">UIColor</span> colorWithHex:<span class="number">0x666666FF</span>]<span class="variable">.CGColor</span>;</span><br><span class="line">        snapshotView<span class="variable">.layer</span><span class="variable">.shadowOpacity</span> = <span class="number">1.0</span>f;</span><br><span class="line">        snapshotView<span class="variable">.layer</span><span class="variable">.shadowOffset</span> = <span class="built_in">CGSizeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGPathRelease</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    imageView<span class="variable">.image</span> = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(TRACK_ANNOTATION_SIZE, <span class="literal">NO</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    [snapshotView<span class="variable">.layer</span> renderInContext:<span class="built_in">UIGraphicsGetCurrentContext</span>()];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIImage</span> *copied = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copied;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后使用的时候 只要简单的如下调用就OK了<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> loadAnnotationImageWithURL:avatarURL imageView:annotationView<span class="variable">.avatarView</span>];</span><br></pre></td></tr></table></figure></p>
<p>看看修改之后的Instruments表现如何<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview5.png" alt=""></p>
<ul>
<li><strong>Color Blended Layers</strong>全中 这也是无可避免的 因为显示的就是一张带透明度的图 但是由于地图的特殊性(头像的位置变化间隔较长 所以不会经常引发合成 也没有动画) 所以这里也不是问题</li>
<li><strong>Color Misaligned Images</strong>没问题了 因为头像已被缩放成了相同大小</li>
<li><strong>Color Offscreen-Rendered Yellow</strong>没问题了 因为只是简单的显示了一张图片 而并没有需要离屏渲染的东西了</li>
</ul>
<p>再来看下帧数情况<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview6.png" alt=""><br>Oh-Yeah~ 不光帧数达到了我们的目标60帧(由于还有业务逻辑线程在后台跑 所以没有那么的稳定) 就连平均运行耗时都下降了不少 就算地图上再多显示几十个人 也不成问题了</p>
<h1 id="小结">小结</h1><hr>
<p>不光是MKMapView 其实包括UITableView在内的很多地方都可以用文中所说的方法去优化 其核心点就是 <strong>合成</strong>+<strong>缓存</strong> 当然 由于合成还是会耗费一部分资源的 所以比较适合头像这种小的资源</p>
<p>关于图形性能优化 可以看下<a href="https://github.com/100mango/zen/blob/master/WWDC%E5%BF%83%E5%BE%97%EF%BC%9AAdvanced%20Graphics%20and%20Animations%20for%20iOS%20Apps/Advanced%20Graphics%20and%20Animations%20for%20iOS%20Apps.md" target="_blank" rel="external">这篇好文</a>(有对文中提到的Debug Option不太明白的 这里有详细的解释)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p>最近做的项目主要是LBS这块 主打成员定位功能 我们的UI设计是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-13-improve-performance-with-mkmapview1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="MKMapView" scheme="http://adad184.com/tags/MKMapView/"/>
    
      <category term="优化" scheme="http://adad184.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="性能" scheme="http://adad184.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个人常用iOS第三方库以及XCode插件介绍]]></title>
    <link href="http://adad184.com/2015/07/08/my-favorite-libraries-and-plugins/"/>
    <id>http://adad184.com/2015/07/08/my-favorite-libraries-and-plugins/</id>
    <published>2015-07-08T07:50:46.000Z</published>
    <updated>2015-07-21T03:30:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p>第三方库是现在的程序员离不开的东西 不光是APP开发 基本上所有的商业项目 都会或多或少的使用到第三方库 </p>
<p>Github上Star&gt;100的开源库数量如下</p>
<p>可以看到JS以绝对的优势排名第一 一定程度上也说明了JS在这几年为什么发展得这么迅速 不会点JS都不好意思说自己是码农 不过现在JS圈的造轮子浪潮也是愈演愈烈了 自己不写个框架都不好意思打招呼</p>
<p>OC排名第四 相信这个排名还会上升 Swift暂时还挤不进前十 不过超过OC 也是指日可待(毕竟亲儿子)</p>
<p>Xcode基本是Mac/iOS程序员的必备工具(AppCode我没用过 不知道有多少人用?) 但是能说有多好用..这就仁者见仁了(跟Visual Studio是没得比了) 不过在用了插件以后 倒也能让生产力提升一大截</p>
<p>接下来我会介绍一些我本人常用的第三方库和插件 也许不多 但是一定是久经考验 用了一定不会错</p>
<h2 id="介绍">介绍</h2><hr>
<h3 id="第三方库">第三方库</h3><blockquote>
<h3 id="CocoaPod"><a href="https://cocoapods.org/" target="_blank" rel="external">CocoaPod</a></h3><p>CocoaPod并不是iOS上的第三方库 而是大名鼎鼎的第三方库的管理工具<br>在CocoaPod没有出现之前 第三方库的管理是非常痛苦的 尤其是一些大型的库(比如nimbus) 每次对库进行更新 都可能会非常的痛苦<br>CocoaPod的出现解决了这些问题 以Framework的方式引入第三方库 极大的节约了集成的时间 而且通吃Objective-C和Swift(Swift上的<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Cathatage</a>我没有实际用过 但是它的那种集成方式还是比CocoaPod麻烦点)</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="iCarousel"><a href="https://github.com/nicklockwood/iCarousel" target="_blank" rel="external">iCarousel</a></h3><p>在iOS 4.x的时代(我也是从4.0开始接触iOS开发的) <strong>Coverflow</strong>的效果可谓是风靡一时 初出茅庐的我当年对如何实现几乎是束手无策(当年所有的电影资讯类的APP 如布丁爱生活等 都需要实现Coverflow选片的效果 碰巧我也要做一个) iCarousel的出现替我解决了一个大的难题<br>从此iCarousel成为了我每个项目的必备良药(也是我最喜欢的库) 不管是Coverflow还是轮播广告 都能轻描淡写的搞定 其内置的十来种显示类型 基本可以解决90%的UI需求 而其强大的自定义功能 则可以解决剩余的10% :)<br>不熟悉的朋友可以尝试一下其精美的demo(<strong>pod try iCarousel</strong>) 所有的功能都在demo中一览无余<br>作者<a href="https://github.com/nicklockwood?tab=repositories" target="_blank" rel="external">nicklockwood</a>也是一个高产的大神 同时维护着数量众多且优质的开源库(比如<a href="https://github.com/nicklockwood/iVersion" target="_blank" rel="external">iVersion</a> <a href="https://github.com/nicklockwood/iRate" target="_blank" rel="external">iRate</a>) 大家不妨去看一看 淘一淘</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="AFNetworking/Alamofire"><a href="https://github.com/nicklockwood?tab=repositories" target="_blank" rel="external">AFNetworking</a>/<a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></h3><p>HTTP框架的龙头老大 当年在与<a href="https://github.com/pokeb/asi-http-request" target="_blank" rel="external">ASIHTTPRequest</a>的竞争中笑到了最后(当然也是因为ASIHTTPRequest的作者不维护了 不过国内很多公司 因为历史原因都在自行维护) 由于及时维护和拥抱语言的新特性 迅速被大家所接受和喜爱<br>相信每个人都用过 这里就不赘述了</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="MKNetworkKit"><a href="https://github.com/MugunthKumar/MKNetworkKitrs/SDWebImage" target="_blank" rel="external">MKNetworkKit</a></h3><p>如果说AFNetworking是老大 那么MKNetworkKit可以说是小弟了 不过也因为比AFNetworking轻量的原因 也获得了许多开发者的青睐<br>当年因为ASIHTTPRequest停止维护了 在机缘巧合之下 我在AFNetworking和MKNetworkKit之间选择了后者 并在很多项目中进行了使用<br>不过也许是因为AFNetworking发展得更快更迅速 而作者本人是单兵作战的原因 作者也基本放弃了更新(版本号在停留在0.8x) 十分可惜</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="SDWebImage"><a href="https://github.com/AFNetworking/AFNetworkingrs/SDWebImage" target="_blank" rel="external">SDWebImage</a></h3><p>图片异步下载和缓存管理的集大成者 UITableView的黄金搭档 其代码被开发者研究分享过无数次 <a href="https://github.com/onevcat?tab=repositories" target="_blank" rel="external">喵大</a>的<a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="external">Kingfisher</a>(可以说是Swift版的SDWebImage)也是深受其影响<br>异步下载AFNetworking和MKNetworkKit都有实现 数据缓存也有<a href="https://github.com/path/FastImageCache" target="_blank" rel="external">FastImageCache</a>与<a href="https://github.com/tumblr/TMCache" target="_blank" rel="external">TMCache</a>等 但是将其融会贯通的 唯有SDWebImage了<br>除了简单的使用<strong>sd_setImageWithURL</strong>之外 <strong>SDImageCache</strong>也是可以独立使用的 功能也相当之强大</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="ZXingObjC"><a href="https://github.com/AFNetworking/AFNetworkingrs/SDWebImage" target="_blank" rel="external">ZXingObjC</a></h3><p><a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a>是Google出品的二维码扫描组件 原本是Java编写的 现在也有了各种语言的移植版 而ZXingObjC就是其中之一<br>zxing支持各种主流的一维码二维码扫描 简单易用 小厂如果要实现二维码扫描这个功能 基本都会选择zxing<br>不过iOS7已内置了二维码摄像头扫描 而iOS8也已内置了二维码静态图扫描 以后可能再也不需要用到ZXing了 :(</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="MBProgressHUD"><a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">MBProgressHUD</a></h3><p>简单易用且稳定的HUD组件 半透明黑底白字的风格也经久不衰 loading提示的最佳选择</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="Masonry/SnapKit"><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>/<a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="external">SnapKit</a></h3><p>最好用的Autolayout手写库(<a href="https://github.com/robb/Cartography" target="_blank" rel="external">Cartography</a>也不错啦 但是还是用不惯) 帮助我轻易的跨越了Autolayout这道坎<br>我也曾多次在<a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/" target="_blank" rel="external">文章中</a>提到过关于Masonry的使用方法 如果还没有用过的朋友 不妨看一看</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="pop"><a href="https://github.com/facebook/pop" target="_blank" rel="external">pop</a></h3><p>Facebook的工程师一直是神一般的存在 对开源社区的<a href="https://github.com/facebook?page=1" target="_blank" rel="external">贡献</a>也是巨大的 极大的推动了各种变成语言的发展 比如<a href="https://github.com/facebook/hhvm" target="_blank" rel="external">HipHop</a>之于PHP <a href="https://github.com/facebook/react" target="_blank" rel="external">react</a>之于JavaScript pop之于Objective-C等等<br>不管是<strong>HipHop</strong> <strong>react</strong> Facebook的工程师总是抱着颠覆的态度来开源 pop也不例外 这点之前我也<a href="http://adad184.com/2015/03/11/intro-to-pop/" target="_blank" rel="external">简单介绍</a>过 而以pop为基础的<a href="https://itunes.apple.com/us/app/paper-stories-from-facebook/id794163692?mt=8" target="_blank" rel="external">paper</a>一发布就震惊整个APP届 在这点上pop也是厥功甚伟<br>pop对自定义动画也支持得很好 我也以pop的自定义动画为基础写过<a href="https://github.com/adad184/MMTweenAnimation" target="_blank" rel="external">MMTweanAnimation</a></p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="ReactiveCocoa"><a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a></h3><p>说起来惭愧 大名鼎鼎的RAC 我只使用了点皮毛(只拿来做输入验证了)<br>暂时还没有进行深层次的使用 对RAC的理解也停留在表面阶段 不过<a href="http://www.itiger.me/?p=38" target="_blank" rel="external">这篇文章</a>介绍得非常详细 值得一看</p>
</blockquote>
<p>　　</p>
<blockquote>
<h3 id="GPUImage"><a href="https://github.com/BradLarson/GPUImage" target="_blank" rel="external">GPUImage</a></h3><p>如果你要做图像(照片或者视频)的相关处理 或者只是简单的想做个像Camera360一样的拍照滤镜 那么你一定要研究一下GPUImage<br>如它的名字所述 GPUImage是基于GPU的图像处理框架 我们都知道 GPU是提升性能的关键 这也就是GPUImage如此重要 如此受欢迎的原因</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="Lumberjack"><a href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="external">Lumberjack</a></h3><p>log系统是每个项目都应该有的东西 而Lumberjack是log系统中的翘楚<br>你可以简单的把它当成NSLog的替代品(简单来说 Lumberjack比NSLog速度更快) 或者根据你的需要来打造一个更强大的日志系统</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="NSLogger"><a href="https://github.com/fpillet/NSLogger" target="_blank" rel="external">NSLogger</a></h3><p>从名字可以看出 NSLogger也是一个log系统 其特点是附带了一个功能强大的<a href="https://github.com/fpillet/NSLogger/releases" target="_blank" rel="external">Desktop Viewer</a> 可以让你方便的查看APP产生的日志(支持分级筛选等等 甚至可以直接log一张图片)</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="AwesomeMenu"><a href="https://github.com/levey/AwesomeMenu" target="_blank" rel="external">AwesomeMenu</a></h3><p>当年横空出世的Path 其优美的设计 精彩的动画 不知让多少人嘴巴都合不拢 而最赞的 就是它的弹出菜单 一时成为了每个APP争相模仿的对象<br>有了AwesomeMenu 你可以轻易的实现它</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="MMDrawerController"><a href="https://github.com/mutualmobile/MMDrawerController" target="_blank" rel="external">MMDrawerController</a></h3><p>普通的侧滑菜单 用MMDrawerController就搞定了</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="realm"><a href="https://github.com/realm/realm-cocoa" target="_blank" rel="external">realm</a></h3><p>作为数据存储的一等公民 CoreData的地位不言而喻 不过也因为使用起来不够方便 才会出现<a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" rel="external">MagicalRecord</a>这种辅助类 甚至<a href="https://github.com/ccgus/fmdb" target="_blank" rel="external">fmdb</a>这种基于纯sqlite的库<br>而realm以挑战者的身份闪亮登场 不仅读取<strong>性能更快</strong>(据说数倍于CoraData) 接口<strong>简单易用</strong>(以对象的形式使用数据 这点和aws/leancloud的思路很相似) 并且还<strong>跨平台</strong>(iOS/Android均可使用 OC/Swift/Java都支持)<br>如果你习惯使用<a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a>之类的Modal转换的话 <a href="https://github.com/matthewcheok/Realm-JSON" target="_blank" rel="external">Realm-JSON</a>肯定能讨你欢心<br>作为YCombinator的孵化项目 其质量还是能得以保证的 至少我试用下来 确实给我以很大的惊喜 不管是API的设计 还是数据对象的定义 就连数据库的版本升级 都非常的方便)</p>
</blockquote>
<p>　
　</p>
<h3 id="Xcode插件">Xcode插件</h3><blockquote>
<h3 id="Alcatraz"><a href="https://github.com/supermarin/Alcatraz" target="_blank" rel="external">Alcatraz</a></h3><p>与CocoaPod类似 Alcatraz是Xcode的插件管理器 能够让你方便的管理Xcode的插件(不仅可以管理插件 还可以管理主题等等)</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="FuzzyAutocomplete"><a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin" target="_blank" rel="external">FuzzyAutocomplete</a></h3><p>如果只让我选一个插件留下 那必须是FuzzyAutocomplete 强大的模糊匹配输入 让你写代码的时候再也不用费脑子去记住名字那么长的对象或者函数名了 好用到让你想哭</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="XAlign"><a href="https://github.com/qfish/XAlign" target="_blank" rel="external">XAlign</a></h3><p>作为有洁癖的码农 看到不对齐的代码一定是不能忍的 XAlign可以轻松解决你的烦恼</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="VVDocumenter-Xcode"><a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">VVDocumenter-Xcode</a></h3><p>喵大的又一力作 能够识别当前函数的参数和返回类型 帮助你快速编写符合规范的注释(目前是以Javadoc为标准)</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="deriveddata-exterminator"><a href="https://github.com/kattrali/deriveddata-exterminator" target="_blank" rel="external">deriveddata-exterminator</a></h3><p>如果你老是遇到Xcode抽风 提示你要因为某个原因要删除某个目录下的文件 否则编译不过 那你一定会被这个插件感动 因为说明了遇到这个事的人不只你一个</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="Xcode-Quick-Localization"><a href="https://github.com/nanaimostudio/Xcode-Quick-Localization" target="_blank" rel="external">Xcode-Quick-Localization</a></h3><p>多语言在iOS开发中一直不是很方便 有了它 你可以省不少事</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="Backlight-for-XCode"><a href="https://github.com/limejelly/Backlight-for-XCode" target="_blank" rel="external">Backlight-for-XCode</a></h3><p>就如果Xcode默认的80个字的分页提示一样 高亮当前正在编辑的一行 也是一种友好的提示 喜不喜欢也就因人而异了</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="Helmet"><a href="https://github.com/brianmichel/Helmet" target="_blank" rel="external">Helmet</a></h3><p>如果你跟我一样 经常开发的时候回去查看系统API的话 那一定有过不小心按错键然后修改了系统头文件的经验 就算你撤销了修改 重新编译时Xcode也会报错 提示你清除cache helmet可以有效的防止这个问题的发生(不过你想改pod的代码也被阻止了~~ 这点我觉得需要改进)
　</p>
</blockquote>
<h1 id="小结">小结</h1><hr>
<p>以上的介绍 都是从我自身的使用经验触发的 可能大部分大家都用过了 而我也将会持续的更新这份列表 只要有优秀使用的东东 我都会添加进来</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p>第三方库是现在的程序员离不开的东西 不光是APP开发 基本上所有的商业项目 都会或多或少的使用到第三方库 </p>
<p>Github上Star&gt;100的开源库数量如下</p>
<p>可以看到JS以绝对的优势排名第一 一]]>
    </summary>
    
      <category term="Xcode" scheme="http://adad184.com/tags/Xcode/"/>
    
      <category term="开源" scheme="http://adad184.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="插件" scheme="http://adad184.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="第三方库" scheme="http://adad184.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目:XXPagingScrollView]]></title>
    <link href="http://adad184.com/2015/07/01/opensource-xxpagingscrollview/"/>
    <id>http://adad184.com/2015/07/01/opensource-xxpagingscrollview/</id>
    <published>2015-07-01T08:39:46.000Z</published>
    <updated>2015-07-10T07:47:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="https://github.com/adad184/XXPagingScrollView" target="_blank" rel="external">XXPagingScrollView</a> 源于对<a href="http://adad184.com/2014/11/05/beautyidea-wandoujia-design-award/" target="_blank" rel="external">最美创意</a>的改版重构 由于对现在版本的UI不是太满意 加上想练习一下swift 所以决定用swift来重写最美创意第二版( T_T 因为设计的问题 暂已搁置 跪求惺惺相惜的设计师好基友~~)  </p>
<p>界面暂时由我自己来设计 首页的风格我参考了<a href="https://itunes.apple.com/us/app/tinder/id547702041?mt=8" target="_blank" rel="external">Tinder</a>  所以就有了<code>XXPagingScrollView</code></p>
<h2 id="分析">分析</h2><hr>
<p><img src="https://raw.githubusercontent.com/adad184/XXPagingScrollView/master/demo.gif" alt="XXPagingScrollView"></p>
<a id="more"></a>
<p>通过演示图可以看到 <code>XXPagingScrollView</code> 就是可以自定义paging size的ScrollView 但是UIScrollView仅仅只有一个<code>pagingEnabled</code>属性 并不能指定paging size 这就是说UIScrollView的paging size大小就是其本身的大小 这是不符合我们的要求的</p>
<p>那么怎样达到我们想要的效果呢?</p>
<ul>
<li>方案1: 不使用pagingEnabled属性 而是手动的计算并设置滑动偏移</li>
<li>方案2: 使用pagingEnabled属性 扩大scrollview的显示范围即可(我采用的就是这种方法)</li>
</ul>
<p>方案1的计算相对麻烦一些 这里不赘述 我们来说说方案2到底是怎么回事</p>
<p>正常来说 我们使用UIScrollView是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-76-opensource-xxpagingscrollview1.png" alt=""></p>
<p>当我们滑动时 看到的内容是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-76-opensource-xxpagingscrollview2.png" alt=""></p>
<p>但是实际上 我们现在想要看到的内容是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-76-opensource-xxpagingscrollview6.png" alt=""></p>
<p>那么 其实我们只要在原来的基础上 扩大UIScrollView的可显示范围就可以了<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-76-opensource-xxpagingscrollview3.png" alt=""></p>
<p>扩大的显示范围后 我们看到的就是这个样子<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-76-opensource-xxpagingscrollview4.png" alt=""></p>
<p>而为了达到这个目的 我们只需要把UIScrollView放入到另一个Container里面就可以了<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-07-76-opensource-xxpagingscrollview5.png" alt=""></p>
<p>到了这一步 我们就只要解决两个问题 </p>
<ol>
<li>让UIScrollView显示超出其本身范围的内容</li>
<li>让UIScrollView响应超出其本身范围的触摸事件</li>
</ol>
<p>而这两个问题其实都容易解决</p>
<ol>
<li>clipsToBounds 就是用来干这个事情的</li>
<li>重写UIView的pointInside事件就可以了</li>
</ol>
<p>至此 一个支持自定义paging size的scrollview就产生了</p>
<h1 id="小结">小结</h1><hr>
<p>其实根据这个思路写 代码非常的简单(总共不超过100行) 在这里分享只是因为这个解决办法相当的简单且巧妙(思路是google得来的) 且不对UIScrollView本身造成任何破坏</p>
<p>最近感觉国内的iOS圈造轮子的情绪相当的高涨 但是其实可以换一种思路来解决问题</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="https://github.com/adad184/XXPagingScrollView">XXPagingScrollView</a> 源于对<a href="http://adad184.com/2014/11/05/beautyidea-wandoujia-design-award/">最美创意</a>的改版重构 由于对现在版本的UI不是太满意 加上想练习一下swift 所以决定用swift来重写最美创意第二版( T_T 因为设计的问题 暂已搁置 跪求惺惺相惜的设计师好基友~~)  </p>
<p>界面暂时由我自己来设计 首页的风格我参考了<a href="https://itunes.apple.com/us/app/tinder/id547702041?mt=8">Tinder</a>  所以就有了<code>XXPagingScrollView</code></p>
<h2 id="分析">分析</h2><hr>
<p><img src="https://raw.githubusercontent.com/adad184/XXPagingScrollView/master/demo.gif" alt="XXPagingScrollView"></p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://adad184.com/tags/Swift/"/>
    
      <category term="UIScrollView" scheme="http://adad184.com/tags/UIScrollView/"/>
    
      <category term="开源" scheme="http://adad184.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="最美创意" scheme="http://adad184.com/tags/%E6%9C%80%E7%BE%8E%E5%88%9B%E6%84%8F/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Masonry设计复合型cell]]></title>
    <link href="http://adad184.com/2015/06/08/complex-cell-with-masonry/"/>
    <id>http://adad184.com/2015/06/08/complex-cell-with-masonry/</id>
    <published>2015-06-08T09:20:54.000Z</published>
    <updated>2015-07-10T07:47:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>其实早在<a href="http://weibo.com/u/1364395395" target="_blank" rel="external">@sunnyxx</a>同学发布<a href="https://github.com/forkingdog/UIView-FDCollapsibleConstraints" target="_blank" rel="external">UIView-FDCollapsibleConstraints</a>的时候  我就说要写一下怎么用代码来稍微麻烦的实现复用的问题 但是一直各种没时间(主要是我的办法太复杂 - -) 正好看到<a href="http://www.weibo.com/u/1438670852" target="_blank" rel="external">@叶孤城</a>同学也说了一下<a href="http://www.jianshu.com/p/d5553d0cc942" target="_blank" rel="external">他的解决办法</a> 所以我来说一下我是如何解决这个问题的</p>
<h2 id="分析">分析</h2><p>我们以叶孤城同学的例子来简单分析一下 假设view是这样的(为了方便 将所有的间隙设定为20)<br>正常的布局是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-06-09-complex-cell-with-masonry1.png" alt=""></p>
<a id="more"></a>
<p>布局代码如下:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ComplexCell</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vB; <span class="comment">//view blue    height:30</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vY; <span class="comment">//view yellow  height:30</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vR; <span class="comment">//view red     height:30</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vG; <span class="comment">//view green   height:100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">- (instancetype)initWithStyle:(<span class="built_in">UITableViewCellStyle</span>)style reuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">self</span> ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGFloat</span> spacing = <span class="number">20.0</span>f;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vB</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.vB</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vB</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.top</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.contentView</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(spacing,spacing,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">            make<span class="variable">.width</span><span class="variable">.equalTo</span>(@<span class="number">60</span>);</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">30</span>)<span class="variable">.priorityLow</span>();</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cB</span> = make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vB</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vY</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.vY</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vY</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.vB</span><span class="variable">.mas_right</span>)<span class="variable">.offset</span>(spacing);</span><br><span class="line">            make<span class="variable">.right</span><span class="variable">.top</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.contentView</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(spacing,<span class="number">0</span>,<span class="number">0</span>,spacing));</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">30</span>)<span class="variable">.priorityLow</span>();</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cY</span> = make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vY</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vR</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.vR</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vR</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.vB</span><span class="variable">.mas_bottom</span>)<span class="variable">.offset</span>(spacing);</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.right</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.contentView</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>,spacing,<span class="number">0</span>,spacing));</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">30</span>)<span class="variable">.priorityLow</span>();</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cR</span> = make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vR</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vG</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.vG</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vG</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.vR</span><span class="variable">.mas_bottom</span>)<span class="variable">.offset</span>(spacing);</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.right</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.contentView</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>,spacing,<span class="number">0</span>,spacing));</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">100</span>)<span class="variable">.priorityLow</span>();</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cG</span> = make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vG</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实际效果如图<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-06-09-complex-cell-with-masonry4.png" alt=""><br>看上去还不错</p>
<p>在Masonry中 针对单条的<strong>MASLayoutConstraint</strong>可以进行<strong>active</strong>和<strong>deactive</strong>操作 那么意味着可以动态的启用或者禁用某条预置的约束 所以我们只要预先设置一条高优先级的高度为0(或者宽度为0)的约束 然后在适当的时候激活它不就行了? 先尝试隐藏红色的view 隐藏后如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-06-09-complex-cell-with-masonry5.png" alt=""></p>
<p>啊~哦~ 结果不正确  隐藏是隐藏了 但是间隙没有隐藏 导致缝变大了 这是因为我们仅仅隐藏了view 而没有隐藏view之间的间隔 那么应该如何处理这种情况呢?<br>主流的做法是将这个view的所有约束值全设置成0 然后恢复的时候再还原 这种方法需要记录原值 但是在前言我说了 要用稍微麻烦的方法来解决这个问题 所以肯定不是这样做啦</p>
<p>我采用的方法是group法 具体如下图<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-06-09-complex-cell-with-masonry2.png" alt=""></p>
<p>其实在第一行还有一个groupview如图<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-06-09-complex-cell-with-masonry3.png" alt=""><br>但是因为图显示出来不太好看(不会画图 T_T ) 所以我隐藏了 具体可以看代码细节</p>
<p>每个(或者每组)可以隐藏的view 都对应有一个group view(group其实就是包含了view和spacing) 需要隐藏的时候 直接隐藏这个group 就可以达到既隐藏view又缩短间隙的目的</p>
<p>代码较长 大家可以选择跳过 - -!</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ComplexCell</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MASConstraint *cF; <span class="comment">//constraint first row</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MASConstraint *cB; <span class="comment">//constraint blue</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MASConstraint *cY; <span class="comment">//constraint yellow</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MASConstraint *cR; <span class="comment">//constraint red</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MASConstraint *cG; <span class="comment">//constraint green</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *gF; <span class="comment">//group first row</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *gB; <span class="comment">//group blue</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *gY; <span class="comment">//group yellow</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *gR; <span class="comment">//group red</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *gG; <span class="comment">//group green</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vB; <span class="comment">//view blue    height:30</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vY; <span class="comment">//view yellow  height:30</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vR; <span class="comment">//view red     height:30</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *vG; <span class="comment">//view green   height:100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ComplexCell</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)initWithStyle:(<span class="built_in">UITableViewCellStyle</span>)style reuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">self</span> ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGFloat</span> spacing = <span class="number">20.0</span>f;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gF</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.gF</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gF</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.top</span><span class="variable">.right</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.contentView</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cF</span> = make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cF</span> deactivate];</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gF</span><span class="variable">.clipsToBounds</span> = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gB</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gF</span> addSubview:<span class="keyword">self</span><span class="variable">.gB</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gB</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.top</span><span class="variable">.bottom</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gF</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cB</span> = make<span class="variable">.width</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cB</span> deactivate];</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gB</span><span class="variable">.clipsToBounds</span> = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gY</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gF</span> addSubview:<span class="keyword">self</span><span class="variable">.gY</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gY</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.right</span><span class="variable">.top</span><span class="variable">.bottom</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gF</span>);</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gB</span><span class="variable">.mas_right</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cY</span> = make<span class="variable">.width</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cY</span> deactivate];</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gY</span><span class="variable">.clipsToBounds</span> = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gR</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.gR</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gR</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.right</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.contentView</span>);</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gF</span><span class="variable">.mas_bottom</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cR</span> = make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cR</span> deactivate];</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gR</span><span class="variable">.clipsToBounds</span> = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gG</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.gG</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gG</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.right</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.contentView</span>);</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gR</span><span class="variable">.mas_bottom</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span><span class="variable">.cG</span> = make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">0</span>)<span class="variable">.priority</span>(<span class="built_in">UILayoutPriorityRequired</span>);</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cG</span> deactivate];</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.gG</span><span class="variable">.clipsToBounds</span> = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vB</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gB</span> addSubview:<span class="keyword">self</span><span class="variable">.vB</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vB</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.edges</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gB</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(spacing, spacing, <span class="number">0</span>, <span class="number">0</span>))<span class="variable">.priorityLow</span>();</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">30</span>);</span><br><span class="line">            make<span class="variable">.width</span><span class="variable">.equalTo</span>(@<span class="number">60</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vB</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vY</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gY</span> addSubview:<span class="keyword">self</span><span class="variable">.vY</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vY</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.edges</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gY</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(spacing, spacing, <span class="number">0</span>, spacing))<span class="variable">.priorityLow</span>();</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">30</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vY</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vR</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gR</span> addSubview:<span class="keyword">self</span><span class="variable">.vR</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vR</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.edges</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gR</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(spacing, spacing, <span class="number">0</span>, spacing))<span class="variable">.priorityLow</span>();</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">30</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vR</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vG</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.gG</span> addSubview:<span class="keyword">self</span><span class="variable">.vG</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.vG</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.edges</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.gG</span>)<span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(spacing, spacing, <span class="number">0</span>, spacing))<span class="variable">.priorityLow</span>();</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(@<span class="number">100</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.vG</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后 为每种不同的布局定义一个枚举(为了举例我随便定义的 0和1代表这个view是否被显示)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ComplexType) &#123;</span><br><span class="line">    ComplexType1111,</span><br><span class="line">    ComplexType1110,</span><br><span class="line">    ComplexType0111,</span><br><span class="line">    ComplexType0011,</span><br><span class="line">    ComplexType0010,</span><br><span class="line">    ComplexType1101</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ComplexCell</span> : <span class="title">UITableViewCell</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) ComplexType type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setType:(ComplexType)type &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.cF</span> deactivate];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.cB</span> deactivate];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.cY</span> deactivate];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.cR</span> deactivate];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.cG</span> deactivate];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> ComplexType1111:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> ComplexType0111:</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cB</span> activate];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> ComplexType0011:</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cF</span> activate];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> ComplexType1110:</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cG</span> activate];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> ComplexType1101:</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cR</span> activate];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> ComplexType0010:</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cF</span> activate];</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.cG</span> activate];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样  在tableview的datasource中我们只要这样做就可以了<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">return</span> [ComplexCell getHeightByType:indexPath<span class="variable">.row</span>%<span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    </span><br><span class="line">    ComplexCell* cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"cell"</span>];</span><br><span class="line">    cell<span class="variable">.type</span> = indexPath<span class="variable">.row</span>%<span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看看效果 是不是很不错<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-06-09-complex-cell-with-masonry6.png" alt=""></p>
<h2 id="小结">小结</h2><p>文中的demo可以<a href="https://github.com/adad184/DemoComplexCell" target="_blank" rel="external">在这里找到</a> 要注意的地方是约束的priority的设置 另外 这种方式也支持不定长内容的Autolayout</p>
<p>可能很多人看了觉得我在瞎折腾 明明一个挺简单实现的东西 被我一弄 弄得又长又臭 其实不然 像我这种方法虽然麻烦了点(文章开头就指出了) 但是面对稍微复杂点的需求 却是更得心应手(其实有点类似DIV+CSS的感觉有木有?)</p>
<p>使用group的方式 面对同时在横向和纵向都有隐藏要求的时候 会方便很多<br>比如文中举的例子 第一行有时会隐藏蓝色的按钮 有时整个一行都会不显示 这样的话 当我想隐藏按钮时 只要激活按钮的约束 想隐藏整行时 只要激活整行的那条约束就行了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>其实早在<a href="http://weibo.com/u/1364395395">@sunnyxx</a>同学发布<a href="https://github.com/forkingdog/UIView-FDCollapsibleConstraints">UIView-FDCollapsibleConstraints</a>的时候  我就说要写一下怎么用代码来稍微麻烦的实现复用的问题 但是一直各种没时间(主要是我的办法太复杂 - -) 正好看到<a href="http://www.weibo.com/u/1438670852">@叶孤城</a>同学也说了一下<a href="http://www.jianshu.com/p/d5553d0cc942">他的解决办法</a> 所以我来说一下我是如何解决这个问题的</p>
<h2 id="分析">分析</h2><p>我们以叶孤城同学的例子来简单分析一下 假设view是这样的(为了方便 将所有的间隙设定为20)<br>正常的布局是这样的<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-06-09-complex-cell-with-masonry1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Masonry" scheme="http://adad184.com/tags/Masonry/"/>
    
      <category term="UITableView" scheme="http://adad184.com/tags/UITableView/"/>
    
      <category term="设计" scheme="http://adad184.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[查找项目中未使用的资源文件]]></title>
    <link href="http://adad184.com/2015/05/11/find-unused-images-in-project/"/>
    <id>http://adad184.com/2015/05/11/find-unused-images-in-project/</id>
    <published>2015-05-11T02:48:34.000Z</published>
    <updated>2015-07-10T07:42:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>一般项目进行都尾声的时候 就要开始清理项目了 一般包括</p>
<ul>
<li>不用的代码(多人维护的时候 总会有垃圾代码产生)</li>
<li>不用的文件(大多是因为需求变更 遗留下来的代码文件)</li>
<li>不用的资源(大多是图片资源)</li>
</ul>
<p>前两项不谈 都是体力活(当然 流程越规范 花费的时间越少)<br>今天主要谈谈怎么处理图片资源</p>
<h2 id="实践">实践</h2><p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-05-11-find-unused-images-in-project.png" alt="资源目录结构"></p>
<p>我一般都是采用<strong>folder references</strong>的方式来组织资源(就是蓝色的文件夹哟 不过可能很多朋友已经用上了Images.xcassets) 相比groups的方式 优点如下</p>
<ul>
<li>直接对资源文件和目录结构进行调整而不需要修改项目文件</li>
<li>资源文件可以重名</li>
<li>如果有不同的target 每个target维护不同的根资源文件夹就行了</li>
</ul>
<p>其他的优缺点对比 我就不在这里赘述了 相信有经验的同学都有体会</p>
<p>采用<strong>folder references</strong>的时候 一般在代码中是要指明其绝对路径的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.btnCreate</span> setImageN:<span class="string">@"Res/circle/nav_create.png"</span> H:<span class="string">@"Res/circle/nav_create.png"</span> D:<span class="literal">nil</span> S:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>那么 要找到未使用的资源 其实就很简单了</p>
<ol>
<li>找到代码中所有被引用的资源</li>
<li>遍历资源文件夹 与上面的结果相匹配 找到未引用的资源</li>
</ol>
<h2 id="脚本">脚本</h2><p>按照上面的逻辑 我用python写了一个简单的脚本如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, sys, re, shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">	used_map = &#123;&#125;</span><br><span class="line"> 	resPath  =  <span class="string">"./MagnetPF/Res/"</span>	<span class="comment">#资源目录相对路径</span></span><br><span class="line"> 	depDir   =  <span class="string">"deprecated"</span>		<span class="comment">#过期目录 会将未使用文件挪入这个目录</span></span><br><span class="line"> 	skipDir  = [<span class="string">"message"</span>]			<span class="comment">#将跳过的目录</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"./"</span>):</span><br><span class="line">		<span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">			<span class="keyword">if</span> file.endswith(<span class="string">".m"</span>):</span><br><span class="line"></span><br><span class="line">				filepath = os.path.join(root, file)</span><br><span class="line">				f = open(filepath, <span class="string">"r"</span>)</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">					match = re.findall(<span class="string">".*?@\"(Res.*?.png)\".*?"</span>, line)	<span class="comment">#匹配资源文件</span></span><br><span class="line">					</span><br><span class="line">					<span class="keyword">if</span> match:</span><br><span class="line">						<span class="keyword">for</span> image <span class="keyword">in</span> match:</span><br><span class="line">							<span class="comment"># print image</span></span><br><span class="line">							used_map[image] = <span class="number">1</span>	<span class="comment">#记录</span></span><br><span class="line"></span><br><span class="line">	skipDir.append(depDir)	<span class="comment">#过期目录也会一并跳过</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(resPath):</span><br><span class="line">		<span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line"></span><br><span class="line">			orginfile = os.path.join(root, file) </span><br><span class="line"></span><br><span class="line">			match = re.findall(<span class="string">".*?(Res.*?.png).*?"</span>, orginfile)	<span class="comment">#将相对路径过滤出来</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> match:</span><br><span class="line">				matchfile = match[<span class="number">0</span>].replace(<span class="string">"@2x"</span>,<span class="string">""</span>).replace(<span class="string">"@3x"</span>,<span class="string">""</span>)	<span class="comment">#剔除@2x@3x字样</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">print</span> matchfile</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> <span class="keyword">not</span> used_map.has_key(matchfile):	<span class="comment">#检测到未使用资源</span></span><br><span class="line"></span><br><span class="line">					filename  = orginfile.split(os.path.sep)[-<span class="number">1</span>]	<span class="comment">#获取文件名</span></span><br><span class="line">					relPath   = orginfile.replace(resPath,<span class="string">""</span>)		<span class="comment">#获取相对路径</span></span><br><span class="line">					originDir = relPath.split(os.path.sep)[<span class="number">0</span>]		<span class="comment">#获取第一层文件夹名(用于跳过筛选)</span></span><br><span class="line">					tofile    = resPath + depDir + <span class="string">"/"</span> + relPath	<span class="comment">#目标文件 (将会被复制到这个路径)</span></span><br><span class="line">					topath    = tofile.replace(filename,<span class="string">""</span>)			<span class="comment">#目标文件夹 (若没有则会创建这个文件夹)</span></span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> <span class="keyword">not</span> originDir <span class="keyword">in</span> skipDir:</span><br><span class="line">						<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(topath):</span><br><span class="line">							os.mkdir(topath)</span><br><span class="line"></span><br><span class="line">						<span class="keyword">print</span> <span class="string">"from: "</span> + orginfile</span><br><span class="line">						<span class="keyword">print</span> <span class="string">"  to: "</span> + tofile</span><br><span class="line">						<span class="keyword">print</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">						shutil.move(orginfile, tofile)</span><br></pre></td></tr></table></figure>
<h2 id="小结">小结</h2><p>这个代码其实还有几个问题没有解决</p>
<ol>
<li>若含有资源文件的代码被注释 一样会被忽略而不会被移除(当然 代码清理也是应该要做的)</li>
<li>对于用代码拼接的资源(比如xx01.png,xx02.png)会无法识别</li>
<li>不适用于非<strong>folder references</strong>方式引用资源的工程</li>
</ol>
<p>同理 我们可以写类似的代码来清理多语言文件 :)</p>
<p>代码其实是我上周六现学现卖边查google边写的 所以写得不好 若是大家有更好的方案 欢迎一起讨论学习</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>一般项目进行都尾声的时候 就要开始清理项目了 一般包括</p>
<ul>
<li>不用的代码(多人维护的时候 总会有垃圾代码产生)</li>
<li>不用的文件(大多是因为需求变更 遗留下来的代码文件)</li>
<li>不用的资源(大]]>
    </summary>
    
      <category term="优化" scheme="http://adad184.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="脚本" scheme="http://adad184.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="资源" scheme="http://adad184.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目:MMTweenAnimation]]></title>
    <link href="http://adad184.com/2015/04/14/opensource-mmtweenanimation/"/>
    <id>http://adad184.com/2015/04/14/opensource-mmtweenanimation/</id>
    <published>2015-04-14T03:32:01.000Z</published>
    <updated>2015-07-10T07:43:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="https://github.com/adad184/MMTweenAnimation" target="_blank" rel="external">MMTweenAnimation</a>其实酝酿了有一段时间了 起因是对<a href="https://github.com/facebook/pop" target="_blank" rel="external">POP</a>重度使用后(<a href="http://adad184.com/2015/03/11/intro-to-pop/" target="_blank" rel="external">POP上手教程</a>) 感到的一丝不足 </p>
<ul>
<li>首先 POP提供的自带动画类型太少(比如想实现如下图的物体落地的动画)</li>
<li>其次 除了POPBasicAnimation之外 无法控制动画的duration</li>
</ul>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimationdemo.gif" alt=""></p>
<p>所以趁着休陪产假的空档 研究并做出了<strong>MMTweenAnimation</strong>的第一版</p>
<h2 id="介绍">介绍</h2><hr>
<p><strong>MMTweenAnimation</strong> 是基于Facebook的POP的动画扩展类 提供10种不同的函数动画 </p>
<table>
<thead>
<tr>
<th style="text-align:center">Back</th>
<th style="text-align:center">Bounce</th>
<th style="text-align:center">Circ</th>
<th style="text-align:center">Cubic</th>
<th style="text-align:center">Elastic</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation1.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation2.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation3.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation4.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation5.gif" alt=""></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">Expo</th>
<th style="text-align:center">Quad</th>
<th style="text-align:center">Quart</th>
<th style="text-align:center">Quint</th>
<th style="text-align:center">Sine</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation6.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation7.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation8.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation9.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation10.gif" alt=""></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>建议使用cocoapod安装<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> <span class="string">'MMTweenAnimation'</span></span><br></pre></td></tr></table></figure></p>
<p>使用方式如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MMTweenAnimation *anim = [MMTweenAnimation animation];</span><br><span class="line">anim<span class="variable">.functionType</span>   = MMTweenFunctionBounce;</span><br><span class="line">anim<span class="variable">.easingType</span>     = MMTweenEasingOut;</span><br><span class="line">anim<span class="variable">.duration</span>       = <span class="number">2.0</span>f;</span><br><span class="line">anim<span class="variable">.fromValue</span>      = <span class="number">0</span>;</span><br><span class="line">anim<span class="variable">.toValue</span>        = <span class="number">200</span>;</span><br><span class="line">anim<span class="variable">.animationBlock</span> = ^(<span class="keyword">double</span> c,<span class="keyword">double</span> d,<span class="keyword">double</span> v,<span class="keyword">id</span> target,MMTweenAnimation *animation)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//c: current time, from the beginning of animation</span></span><br><span class="line">    <span class="comment">//d: duration, always bigger than c</span></span><br><span class="line">    <span class="comment">//v: value, after the change at current time</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIView</span> *t = (<span class="built_in">UIView</span>*)target;</span><br><span class="line">    t<span class="variable">.center</span> = <span class="built_in">CGPointMake</span>(t<span class="variable">.x</span>, v);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[targetView pop_addAnimation:anim forKey:<span class="string">@"center.y"</span>];</span><br></pre></td></tr></table></figure>
<h1 id="小结">小结</h1><hr>
<p>库中的动画函数部分借鉴自<a href="https://code.google.com/p/tweener/" target="_blank" rel="external">tweener</a>, 同时有个<a href="http://easings.net/zh-cn" target="_blank" rel="external">很棒的网站</a>对这些动画进行了展示</p>
<p>后续可能还会添加一些功能 比如</p>
<ul>
<li>提供更多类型的动画函数</li>
<li>提供用户自定义的动画函数</li>
<li>动画函数的系数可调节</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="https://github.com/adad184/MMTweenAnimation">MMTweenAnimation</a>其实酝酿了有一段时间了 起因是对<a href="https://github.com/facebook/pop">POP</a>重度使用后(<a href="http://adad184.com/2015/03/11/intro-to-pop/">POP上手教程</a>) 感到的一丝不足 </p>
<ul>
<li>首先 POP提供的自带动画类型太少(比如想实现如下图的物体落地的动画)</li>
<li>其次 除了POPBasicAnimation之外 无法控制动画的duration</li>
</ul>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimationdemo.gif" alt=""></p>
<p>所以趁着休陪产假的空档 研究并做出了<strong>MMTweenAnimation</strong>的第一版</p>
<h2 id="介绍">介绍</h2><hr>
<p><strong>MMTweenAnimation</strong> 是基于Facebook的POP的动画扩展类 提供10种不同的函数动画 </p>
<table>
<thead>
<tr>
<th style="text-align:center">Back</th>
<th style="text-align:center">Bounce</th>
<th style="text-align:center">Circ</th>
<th style="text-align:center">Cubic</th>
<th style="text-align:center">Elastic</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation1.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation2.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation3.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation4.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation5.gif" alt=""></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">Expo</th>
<th style="text-align:center">Quad</th>
<th style="text-align:center">Quart</th>
<th style="text-align:center">Quint</th>
<th style="text-align:center">Sine</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation6.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation7.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation8.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation9.gif" alt=""></td>
<td style="text-align:center"><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-4-14-opensource-mmtweenanimation10.gif" alt=""></td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="pop" scheme="http://adad184.com/tags/pop/"/>
    
      <category term="动画" scheme="http://adad184.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="开源" scheme="http://adad184.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hello world]]></title>
    <link href="http://adad184.com/2015/03/30/hello-world/"/>
    <id>http://adad184.com/2015/03/30/hello-world/</id>
    <published>2015-03-30T12:46:00.000Z</published>
    <updated>2015-07-10T07:43:37.000Z</updated>
    <content type="html"><![CDATA[<p>hello, my little princess. </p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-04-14-hello-world.jpg" alt="my girl"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>hello, my little princess. </p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-04-14-hello-world.jpg" alt="my girl"></p>
]]>
    </summary>
    
      <category term="家庭" scheme="http://adad184.com/tags/%E5%AE%B6%E5%BA%AD/"/>
    
      <category term="生活琐碎" scheme="http://adad184.com/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目:MMParallaxCell]]></title>
    <link href="http://adad184.com/2015/03/28/opensource-mmparallaxcell/"/>
    <id>http://adad184.com/2015/03/28/opensource-mmparallaxcell/</id>
    <published>2015-03-28T02:22:01.000Z</published>
    <updated>2015-07-10T07:47:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="https://github.com/adad184/MMParallaxCell" target="_blank" rel="external">MMParallaxCell</a>其实是个很简单的东西 首次使用是在<a href="https://itunes.apple.com/app/id917497614" target="_blank" rel="external">最美创意</a>里 起因是某次改版的时候 想把之前的timeline的展现调整一下</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-28-opensource-mmparallaxcell-1.png" alt="timeline"></p>
<p>参考了很多APP的设计之后 把UI改成了现在的parallax这个样子</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-28-opensource-mmparallaxcell-2.png" alt="parallax"></p>
<p>这次修改 对于我自己来说 还是满意的 对比一下有没有一种立刻高大上了的感觉呢 ヽ(✿ﾟ▽ﾟ)ノ</p>
<p>不过由于各种各样的原因 <strong>最美创意</strong>在很长一段时间内估计也不会更新了 </p>
<h2 id="介绍">介绍</h2><hr>
<p><strong><code>MMParallaxCell</code></strong>是<code>UITableviewCell</code>的子类 用于在<code>UITableview</code>中呈现滑动视差的一个效果 特点是简单易用 不同于同类型的其他项目 <strong><code>MMParallaxCell</code></strong>不需要在代码中做额外的操作 像普通的<code>UITableviewCell</code>使用就okay了</p>
<a id="more"></a>
<p>建议使用cocoapod安装<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> <span class="string">'MMParallaxCell'</span></span><br></pre></td></tr></table></figure></p>
<p>使用方式也很简单</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span>* cellIdentifier = <span class="string">@"CellIdentifier"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用MMParallaxCell代替UITableviewCell</span></span><br><span class="line">    M<span class="built_in">MParallaxCell</span>* cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];</span><br><span class="line">    <span class="keyword">if</span> (cell == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cell = [[M<span class="built_in">MParallaxCell</span> alloc] initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置视差的image就行了</span></span><br><span class="line">    [cell<span class="variable">.parallaxImage</span> sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://lorempixel.com/400/400/technics/%ld/"</span>,indexPath<span class="variable">.row</span>]]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//你也可以根据你的需求来设置视差图的比例(视差图的高度/cell的高度)</span></span><br><span class="line">    cell<span class="variable">.parallaxRatio</span> = <span class="number">1.2</span>f;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原理">原理</h1><hr>
<p>我们通过一张模拟图来看一下滑动视差是怎么回事</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-28-opensource-mmparallaxcell-3.png" alt="滑动视差模拟"></p>
<p>可以仔细看一下滑动到不同位置时 图片的差别 (尤其是张和第四张的差别)</p>
<p>再看看其内部是怎样的</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-28-opensource-mmparallaxcell-4.png" alt="滑动视差模拟"></p>
<p>是的 其实就是在滑动的同时 移动图片的位置 造成一种视差的效果</p>
<p>那么稍微想一下 应该就可以发现 图片的位移量 其实是由以下几个值决定的</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-28-opensource-mmparallaxcell-5.png" alt="位移量依赖"></p>
<p>其公式 大概是</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parallaxOffset = <span class="list">(<span class="keyword">parrallaxHeight-cellHeight</span>)</span>*<span class="list">(<span class="keyword">scrollOffset/</span><span class="list">(<span class="keyword">cellHeight+tableHeight</span>)</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h1 id="小结">小结</h1><hr>
<p>基本的细节就介绍到这里 其实还有一些东西没有细讲 比如MMParallaxCell并没有使用接口形式对tableview的contentOffset进行监控(其他的同类型的代码基本都是在scrollViewDidScroll里对cell进行更新) 而是采用了KVO的形式对tableview进行观察 使得整个代码很简洁易用</p>
<p>具体的内容都在代码里 如果想知道可以抽几分钟看一下 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p><a href="https://github.com/adad184/MMParallaxCell">MMParallaxCell</a>其实是个很简单的东西 首次使用是在<a href="https://itunes.apple.com/app/id917497614">最美创意</a>里 起因是某次改版的时候 想把之前的timeline的展现调整一下</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-28-opensource-mmparallaxcell-1.png" alt="timeline"></p>
<p>参考了很多APP的设计之后 把UI改成了现在的parallax这个样子</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-28-opensource-mmparallaxcell-2.png" alt="parallax"></p>
<p>这次修改 对于我自己来说 还是满意的 对比一下有没有一种立刻高大上了的感觉呢 ヽ(✿ﾟ▽ﾟ)ノ</p>
<p>不过由于各种各样的原因 <strong>最美创意</strong>在很长一段时间内估计也不会更新了 </p>
<h2 id="介绍">介绍</h2><hr>
<p><strong><code>MMParallaxCell</code></strong>是<code>UITableviewCell</code>的子类 用于在<code>UITableview</code>中呈现滑动视差的一个效果 特点是简单易用 不同于同类型的其他项目 <strong><code>MMParallaxCell</code></strong>不需要在代码中做额外的操作 像普通的<code>UITableviewCell</code>使用就okay了</p>]]>
    
    </summary>
    
      <category term="UITableView" scheme="http://adad184.com/tags/UITableView/"/>
    
      <category term="开源" scheme="http://adad184.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="最美创意" scheme="http://adad184.com/tags/%E6%9C%80%E7%BE%8E%E5%88%9B%E6%84%8F/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POP介绍与使用实践(快速上手动画)]]></title>
    <link href="http://adad184.com/2015/03/11/intro-to-pop/"/>
    <id>http://adad184.com/2015/03/11/intro-to-pop/</id>
    <published>2015-03-11T00:47:29.000Z</published>
    <updated>2015-07-10T07:44:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><hr>
<p>动画在APP开发过程中 大家多多少少都会接触到 而且随着ios7的扁平化风格启用之后 越来越多的APP开始尝试加入各种绚丽的动画交互效果以增加APP的用户体验(当然 还是以国外的APP居多)</p>
<p>有过相关开发经验的同学肯定知道在iOS中 动画相关的部分都是基于Core Animation 但是今天我们不讨论Core Animation 今天的主角是<strong>POP</strong> -来自于Facebook的动画引擎(其实我不喜欢把POP定义为动画引擎 我愿意称它为函数发生器)</p>
<h2 id="介绍">介绍</h2><hr>
<p><a href="https://github.com/facebook/pop" target="_blank" rel="external">官方地址 https://github.com/facebook/pop</a><br>官方介绍(翻译版)</p>
<blockquote>
<p>POP是一个在iOS与OS X上通用的极具扩展性的动画引擎 它在基本的静态动画的基础上增加的弹簧动画与衰减动画 使之能创造出更真实更具物理性的交互动画 POP的API可以快速的与现有的ObjC代码集成并可以作用于任意对象的任意属性<br>POP是个相当成熟且久经考验的框架 Facebook出品的令人惊叹的Paper应用中的所有动画和效果即出自POP</p>
</blockquote>
<a id="more"></a>
<p>安装方式还是推荐使用<a href="http://cocoapods.org/" target="_blank" rel="external">CocoaPod</a><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> <span class="string">'pop'</span>, <span class="string">'~&gt; 1.0'</span></span><br></pre></td></tr></table></figure></p>
<p>POP的神奇之处在于 它是独立与Core Animation的存在 所以 忘记Core Animation吧 忘记Layer Tree吧 迎接一个简单的明天  (LOL  开玩笑的~:) 很多地方还是会需要Core Animation的 不过说不定哪天苹果大发善心 将动画相关的部分向POP借鉴一点也不是不可能的(比如SpriteKit就借鉴了Cocos2D :)</p>
<h2 id="使用">使用</h2><hr>
<p>POP默认支持三种动画 但同时也支持自定义动画</p>
<ul>
<li>POPBasicAnimation</li>
<li>POPSpringAnimation</li>
<li>POPDecayAnimation</li>
<li>POPCustomAnimation    //自定义动画</li>
</ul>
<p>这里我们只讨论前三种(因为自定义动画我也没用过 :) 先来看看官方的示例代码吧</p>
<h3 id="官方代码示例">官方代码示例</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Basic animations can be used to interpolate values over a specified time period. To use an ease-in ease-out animation to animate a view's alpha from 0.0 to 1.0 over the default duration:</span></span><br><span class="line">POPBasicAnimation *anim = [POPBasicAnimation <span class="string">animationWithPropertyNamed:</span>kPOPViewAlpha];</span><br><span class="line">anim.fromValue = @(<span class="number">0.0</span>);</span><br><span class="line">anim.toValue = @(<span class="number">1.0</span>);</span><br><span class="line">[view <span class="string">pop_addAnimation:</span>anim <span class="string">forKey:</span>@<span class="string">"fade"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring animations can be used to give objects a delightful bounce. In this example, we use a spring animation to animate a layer's bounds from its current value to (0, 0, 400, 400):</span></span><br><span class="line">POPSpringAnimation *anim = [POPSpringAnimation <span class="string">animationWithPropertyNamed:</span>kPOPLayerBounds];</span><br><span class="line">anim.toValue = [NSValue <span class="string">valueWithCGRect:</span>CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>)];</span><br><span class="line">[layer <span class="string">pop_addAnimation:</span>anim <span class="string">forKey:</span>@<span class="string">"size"</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Decay animations can be used to gradually slow an object to a halt. In this example, we decay a layer's positionX from it's current value and velocity 1000pts per second:</span></span><br><span class="line">POPDecayAnimation *anim = [POPDecayAnimation <span class="string">animationWithPropertyNamed:</span>kPOPLayerPositionX];</span><br><span class="line">anim.velocity = @(<span class="number">1000.</span>);</span><br><span class="line">[layer <span class="string">pop_addAnimation:</span>anim <span class="string">forKey:</span>@<span class="string">"slide"</span>];</span><br></pre></td></tr></table></figure>
<h2 id="POPBasicAnimation">POPBasicAnimation</h2><p>POPBasicAnimation使用最广泛 提供固定时间间隔的动画(如淡入淡出效果)</p>
<h3 id="代码示例1">代码示例1</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POPBasicAnimation *anBasic = [POPBasicAnimation animationWithPropertyNamed:kPOPLayerPositionX];</span><br><span class="line">anBasic.<span class="keyword">to</span>Value = @(<span class="literal">self</span>.square.center.y+<span class="number">300</span>);</span><br><span class="line">anBasic.beginTime = CACurrentMediaTime() + <span class="number">1.0</span>f;</span><br><span class="line">[<span class="literal">self</span>.square pop_addAnimation:anBasic <span class="keyword">for</span>Key:@<span class="string">"position"</span>];</span><br></pre></td></tr></table></figure>
<p>其动画效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-11.gif" alt="POPBasicAnimation"></p>
<p>可以看到 添加一个动画最少仅需三步</p>
<ol>
<li>定义一个animation对象 并指定对应的动画属性</li>
<li>设置初始值和默认值(初始值可以不指定 会默认从当前值开始)</li>
<li>添加到想产生动画的对象上</li>
</ol>
<p>POPBasicAnimation可配置的属性与默认值为<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">duration:</span><span class="number">0.4</span>    <span class="comment">//动画间隔</span></span><br></pre></td></tr></table></figure></p>
<p>POPBasicAnimation提供四种timingfunction(很熟悉 对不对? 就是Core Animation中那些)</p>
<ul>
<li>kCAMediaTimingFunctionLinear</li>
<li>kCAMediaTimingFunctionEaseIn</li>
<li>kCAMediaTimingFunctionEaseOut</li>
<li>kCAMediaTimingFunctionEaseInEaseOut</li>
</ul>
<p>其时间函数分别如下</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-1.png" alt="kCAMediaTimingFunctionLinear"><br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-2.png" alt="kCAMediaTimingFunctionEaseIn"><br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-3.png" alt="kCAMediaTimingFunctionEaseOut"><br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-4.png" alt="kCAMediaTimingFunctionEaseInEaseOut"></p>
<h2 id="POPSpringAnimation">POPSpringAnimation</h2><p>POPSpringAnimation也许是大多数人使用POP的理由 其提供一个类似弹簧一般的动画效果(使用后 APP立马就活泼起来了 有木有?!)</p>
<h3 id="代码示例23">代码示例23</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POPSpringAnimation *<span class="variable">anSpring =</span> [POPSpringAnimation animationWithPropertyNamed:kPOPLayerPositionX];</span><br><span class="line">anSpring.<span class="variable">toValue =</span> @(self.square.center.y+<span class="number">300</span>);</span><br><span class="line">anSpring.<span class="variable">beginTime =</span> CACurrentMediaTime() + <span class="number">1.0</span>f;</span><br><span class="line">anSpring.<span class="variable">springBounciness =</span> <span class="number">10.0</span>f;</span><br><span class="line">[self.square pop_addAnimation:anSpring forKey:@<span class="string">"position"</span>];</span><br></pre></td></tr></table></figure>
<p>其动画效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-22.gif" alt="动画效果"></p>
<p>POPSpringAnimation可配置的属性与默认值为<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">springBounciness:</span><span class="number">4.0</span>    <span class="comment">//[0-20] 弹力 越大则震动幅度越大</span></span><br><span class="line"><span class="string">springSpeed     :</span><span class="number">12.0</span>   <span class="comment">//[0-20] 速度 越大则动画结束越快</span></span><br><span class="line"><span class="string">dynamicsTension :</span><span class="number">0</span>      <span class="comment">//拉力  接下来这三个都跟物理力学模拟相关 数值调整起来也很费时 没事不建议使用哈</span></span><br><span class="line"><span class="string">dynamicsFriction:</span><span class="number">0</span>      <span class="comment">//摩擦 同上</span></span><br><span class="line"><span class="string">dynamicsMass    :</span><span class="number">0</span>      <span class="comment">//质量 同上</span></span><br></pre></td></tr></table></figure></p>
<p>注意:POPSpringAnimation是没有duration字段的  其动画持续时间由以上几个参数决定</p>
<p>其时间函数如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-5.png" alt="时间函数"></p>
<h2 id="POPDecayAnimation">POPDecayAnimation</h2><p>POPDecayAnimation提供一个过阻尼效果(其实Spring是一种欠阻尼效果) 可以实现类似UIScrollView的滑动衰减效果(是的 你可以靠它来自己实现一个UIScrollView)</p>
<h3 id="代码示例3">代码示例3</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POPDecayAnimation *anDecay = [POPDecayAnimation <span class="string">animationWithPropertyNamed:</span>kPOPLayerPositionX];</span><br><span class="line">anDecay.velocity = @(<span class="number">600</span>);</span><br><span class="line">anDecay.beginTime = CACurrentMediaTime() + <span class="number">1.0</span>f;</span><br><span class="line">[self.square <span class="string">pop_addAnimation:</span>anDecay <span class="string">forKey:</span>@<span class="string">"position"</span>];</span><br></pre></td></tr></table></figure>
<p>其动画效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-33.gif" alt="动画效果"></p>
<p>注意:这里对POPDecayAnimation设置toValue是没有意义的 会被忽略(因为目的状态是动态计算得到的)</p>
<p>POPDecayAnimation可配置的属性与默认值为<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">deceleration:</span><span class="number">0.998</span>  <span class="comment">//衰减系数(越小则衰减得越快)</span></span><br></pre></td></tr></table></figure></p>
<p>注意:POPDecayAnimation也是没有duration字段的 其动画持续时间由velocity与deceleration决定</p>
<p>其时间函数如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-6.png" alt="时间函数"></p>
<p>接下来我们看一下POP默认支持哪些属性的动画 打开<em>POPAnimatablePropery.h</em>可以看到如下定义(这些是到目前为止 所支持的属性 随着版本的更新 还在不断的新增中 :)</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> Common CALayer property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerBackgroundColor;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerBounds;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerCornerRadius;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerBorderWidth;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerBorderColor;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerOpacity;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerPosition;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerPositionX;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerPositionY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerRotation;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerRotationX;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerRotationY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerScaleX;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerScaleXY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerScaleY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerSize;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerSubscaleXY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerSubtranslationX;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerSubtranslationXY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerSubtranslationY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerSubtranslationZ;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerTranslationX;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerTranslationXY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerTranslationY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerTranslationZ;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerZPosition;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerShadowColor;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerShadowOffset;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerShadowOpacity;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayerShadowRadius;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common CAShapeLayer property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPShapeLayerStrokeStart;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPShapeLayerStrokeEnd;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPShapeLayerStrokeColor;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPShapeLayerFillColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common NSLayoutConstraint property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLayoutConstraintConstant;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#if TARGET_OS_IPHONE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UIView property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewAlpha;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewBackgroundColor;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewBounds;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewCenter;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewFrame;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewScaleX;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewScaleXY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewScaleY;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewSize;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPViewTintColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UIScrollView property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPScrollViewContentOffset;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPScrollViewContentSize;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPScrollViewZoomScale;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPScrollViewContentInset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UITableView property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPTableViewContentOffset;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPTableViewContentSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UICollectionView property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPCollectionViewContentOffset;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPCollectionViewContentSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UINavigationBar property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPNavigationBarBarTintColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UIToolbar property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPToolbarBarTintColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UITabBar property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPTabBarBarTintColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Common UILabel property names.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kPOPLabelTextColor;</span><br></pre></td></tr></table></figure>
<p>作为刚接触POP的一些同学来说 如果在上面看到你希望的某些属性的话 你可以像<a href="#官方代码示例">官方代码示例</a>一样指定这个属性即可开始动画了<br>但是如果你想要的某些属性不在之上呢 这时候自定义属性POPAnimatableProperty就排上用场了</p>
<h2 id="自定义属性">自定义属性</h2><p>POP默认支持的三种动画都继承自<a href="#继承关系">POPPropertyAnimation</a> POPPropertyAnimation中定义了一个叫property的属性( 之前没有用到它是因为POP根据不同的默认动画属性帮你生成了默认的property) 而这个property则是用来驱动POP的动画效果中的重要一环</p>
<h3 id="代码示例4">代码示例4</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POPAnimatableProperty *<span class="keyword">prop</span> = [POPAnimatableProperty propertyWithName:@<span class="string">"prop"</span> initializer:^(POPMutableAnimatableProperty *<span class="keyword">prop</span>) &#123;</span><br><span class="line">    <span class="comment">// read value</span></span><br><span class="line">    <span class="keyword">prop</span>.readBlock = ^(id obj, CGFloat values[]) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// write value</span></span><br><span class="line">    <span class="keyword">prop</span>.writeBlock = ^(id obj, <span class="keyword">const</span> CGFloat values[]) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// dynamics threshold</span></span><br><span class="line">    <span class="keyword">prop</span>.threshold = 0.01;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>其组成就是一个readBlock一个writeBlock和一个threashold</p>
<ul>
<li>readBlock告诉POP当前的属性值</li>
<li>writeBlock中修改变化后的属性值</li>
<li>threashold决定了动画变化间隔的阈值 值越大writeBlock的调用次数越少</li>
</ul>
<p>POPAnimatableProperty其实是POP中一个比较重要的东西 像上面提到的POP自带的动画属性 查看源代码可以看到也只是POP自动帮你设置好了POPAnimatableProperty而已 其作用就是当动画的某个时间片被触发时 告诉系统如何根据当前时间片做出变化</p>
<p>还是以一个实际的例子来说明如何使用自定义属性 比如我们要实现一个像系统的时钟APP里秒表计时的一个效果</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    POPAnimatableProperty *prop = [POPAnimatableProperty propertyWithName:<span class="string">@"countdown"</span> initializer:^(POPMutableAnimatableProperty *prop) &#123;</span><br><span class="line">        </span><br><span class="line">        prop<span class="variable">.writeBlock</span> = ^(<span class="keyword">id</span> obj, <span class="keyword">const</span> <span class="built_in">CGFloat</span> values[]) &#123;</span><br><span class="line">            <span class="built_in">UILabel</span> *lable = (<span class="built_in">UILabel</span>*)obj;</span><br><span class="line">            label<span class="variable">.text</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02d:%02d:%02d"</span>,(<span class="keyword">int</span>)values[<span class="number">0</span>]/<span class="number">60</span>,(<span class="keyword">int</span>)values[<span class="number">0</span>]%<span class="number">60</span>,(<span class="keyword">int</span>)(values[<span class="number">0</span>]*<span class="number">100</span>)%<span class="number">100</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        prop.threshold = 0.01f;</span></span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    POPBasicAnimation *anBasic = [POPBasicAnimation linearAnimation];   <span class="comment">//秒表当然必须是线性的时间函数</span></span><br><span class="line">    anBasic<span class="variable">.property</span> = prop;    <span class="comment">//自定义属性</span></span><br><span class="line">    anBasic<span class="variable">.fromValue</span> = @(<span class="number">0</span>);   <span class="comment">//从0开始</span></span><br><span class="line">    anBasic<span class="variable">.toValue</span> = @(<span class="number">3</span>*<span class="number">60</span>);  <span class="comment">//180秒</span></span><br><span class="line">    anBasic<span class="variable">.duration</span> = <span class="number">3</span>*<span class="number">60</span>;    <span class="comment">//持续3分钟</span></span><br><span class="line">    anBasic<span class="variable">.beginTime</span> = <span class="built_in">CACurrentMediaTime</span>() + <span class="number">1.0</span>f;    <span class="comment">//延迟1秒开始</span></span><br><span class="line">    [label pop_addAnimation:anBasic forKey:<span class="string">@"countdown"</span>];</span><br></pre></td></tr></table></figure>
<p>其动画效果如下<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2015-03-11-intro-pop-44.gif" alt="动画效果"></p>
<p>有没有从中得到一些启发呢? POP可以做的事情可远比Core Animation要多(注意这里我们使用了beginTime这个属性来设置动画的延迟施放) 例如音乐播放时那种淡入淡出的效果等等也可以用POP来实现</p>
<h2 id="小结">小结</h2><hr>
<p>其实只需要熟练掌握POP自带的三种动画 即可完成大部分的动画效果 如果实在是无法满足你的需求的话 自定义动画也基本可以满足你的要求 可以说POP化繁为简的出现 极大的方便了我们这些苦逼的coder</p>
<p>当然 就像我说的 POP不仅仅是一个动画引擎 相信经过我最后一个例子 大家可以得到一点启事 POP能做的事情还不少 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><hr>
<p>动画在APP开发过程中 大家多多少少都会接触到 而且随着ios7的扁平化风格启用之后 越来越多的APP开始尝试加入各种绚丽的动画交互效果以增加APP的用户体验(当然 还是以国外的APP居多)</p>
<p>有过相关开发经验的同学肯定知道在iOS中 动画相关的部分都是基于Core Animation 但是今天我们不讨论Core Animation 今天的主角是<strong>POP</strong> -来自于Facebook的动画引擎(其实我不喜欢把POP定义为动画引擎 我愿意称它为函数发生器)</p>
<h2 id="介绍">介绍</h2><hr>
<p><a href="https://github.com/facebook/pop">官方地址 https://github.com/facebook/pop</a><br>官方介绍(翻译版)</p>
<blockquote>
<p>POP是一个在iOS与OS X上通用的极具扩展性的动画引擎 它在基本的静态动画的基础上增加的弹簧动画与衰减动画 使之能创造出更真实更具物理性的交互动画 POP的API可以快速的与现有的ObjC代码集成并可以作用于任意对象的任意属性<br>POP是个相当成熟且久经考验的框架 Facebook出品的令人惊叹的Paper应用中的所有动画和效果即出自POP</p>
</blockquote>]]>
    
    </summary>
    
      <category term="pop" scheme="http://adad184.com/tags/pop/"/>
    
      <category term="动画" scheme="http://adad184.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于autolayout在ios8以下出现'Auto Layout still required after executing -layoutSubviews.'的bug]]></title>
    <link href="http://adad184.com/2015/03/10/bugs-in-autolayout-below-ios8/"/>
    <id>http://adad184.com/2015/03/10/bugs-in-autolayout-below-ios8/</id>
    <published>2015-03-10T00:47:29.000Z</published>
    <updated>2015-07-10T07:44:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><hr>
<p>很久没有更新blog了 一是因为换了工作在赶新项目导致白天没时间 二是因为孩子快出生了导致晚上没时间 周末就更不自由啦 </p>
<p>看了今天的苹果发布会的新闻 还是挺激动的啊 不管是watch 还是macbook </p>
<h1 id="问题">问题</h1><hr>
<p>这次说的这个问题也是年前在调bug的时候出现的 由于开发一直是在ios8上进行的 所以一路顺风顺水没有任何问题 直到有一天 一个同事拿着他的ios7.x的iphone5S要我帮忙装一个最新的开发版 然后使用过程中就出现了闪退 一查就是如题的错误log<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Auto</span> <span class="variable">Layout</span> still required <span class="keyword">after</span> executing -layout<span class="variable">Subviews</span>.</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>ok google了一下 发现stackoverflow上面也有不少人遇到了这种情况 基本的解决办法是 派生对应的类 然后在类方法中重载<strong>layoutSubviews</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">-</span> (void)<span class="tag">layoutSubviews</span> &#123;</span><br><span class="line">    <span class="attr_selector">[super layoutSubviews]</span>;</span><br><span class="line">    <span class="comment">// code to scroll the view</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>还有另一种方法是使用swizzle method 替换layoutSubviews的默认行为 本质上也是一样的解决思路</p>
<p>但是 无论怎么尝试都没有办法解决我的问题 经过自己的摸索之后 终于得出了解决</p>
<h1 id="方法">方法</h1><hr>
<p>其实问题出现的原因(或者说解决的方法)很简单也很蛋疼</p>
<p>以UITableView为例 导致这个问题出现的原因是因为我在tableView上add了一个自定义的subview(对 就这么简单) 那么解决问题的方法就是把这个subview给去掉 </p>
<p>同样的问题也出现在了UITextfield上 同样去掉subview就ok了(其他的原生控件上暂时没有做类似布局 所以是否其他控件也有类似问题不得而知 如果大家遇到了这种问题 可以尝试查看一下是否有自定义的subview)</p>
<p>具体的原因我也无法深究 但应该是在ios7之前的autolayout本身存在着缺陷所导致 ios8后修复了这些问题(stackoverflow上很多人是这么说的) </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><hr>
<p>很久没有更新blog了 一是因为换了工作在赶新项目导致白天没时间 二是因为孩子快出生了导致晚上没时间 周末就更不自由啦 </p>
<p>看了今天的苹果发布会的新闻 还是挺激动的啊 不管是watch 还是macbook </p>
<h1 id="问题">问题</h1><hr>
<p>这次说的这个问题也是年前在调bug的时候出现的 由于开发一直是在ios8上进行的 所以一路顺风顺水没有任何问题 直到有一天 一个同事拿着他的ios7.x的iphone5S要我帮忙装一个最新的开发版 然后使用过程中就出现了闪退 一查就是如题的错误log<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Auto</span> <span class="variable">Layout</span> still required <span class="keyword">after</span> executing -layout<span class="variable">Subviews</span>.</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Autolayout" scheme="http://adad184.com/tags/Autolayout/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「最美创意」豌豆荚设计奖获得者]]></title>
    <link href="http://adad184.com/2014/11/05/beautyidea-wandoujia-design-award/"/>
    <id>http://adad184.com/2014/11/05/beautyidea-wandoujia-design-award/</id>
    <published>2014-11-05T03:39:58.000Z</published>
    <updated>2015-07-10T07:44:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-11-05-beautyidea-wandoujia-design-award1.png" alt="最美创意"></p>
<p><a href="http://www.wandoujia.com/award/blog/com.bugkr.beautyidea" target="_blank" rel="external">相关获奖介绍</a></p>
<p>最美创意是一款以创意广告、游戏CG、创意短片为主的内容聚合型应用，它给喜爱这些内容的用户一个可以毫不费力找到他们的平台。</p>
<a id="more"></a>
<p><img src="http://a4.mzstatic.com/us/r30/Purple3/v4/78/42/89/7842893d-f9dd-8690-4b15-6ca82cb02266/screen568x568.jpeg" alt="最美创意"></p>
<p><img src="http://a4.mzstatic.com/us/r30/Purple3/v4/d6/fe/dc/d6fedc98-076b-b38e-0b30-e6b751801cd9/screen568x568.jpeg" alt="最美创意"></p>
<p>目前<a href="https://itunes.apple.com/app/id917497614" target="_blank" rel="external">iOS版本</a>是在九月份我花了三天左右的时间完成的 由于时间问题暂没有更新到Android版的(￣◇￣;)</p>
<p>该版本总体设计与Android初版一致 一些细节的地方是由我自己思考完成的 其实三天的时候 有一半都花在了思考上 </p>
<p>这里也有介绍一下<a href="https://www.vitamio.org/" target="_blank" rel="external">Vitamio</a><br>最美创意的视频播放组件就是我基于Vitamio封装完成的 虽然很简陋 但是在需要同时支持MP4和FLV播放的前提下Vitamio是个不错的选择(百度也有类似的组件 但是兼容性不是很好 弃用了)<br>View.image<code>设置为</code>PlaceHolder.png`图片,等待重新布局完后再将原本的图片设置回去就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-11-05-beautyidea-wandoujia-design-award1.png" alt="最美创意"></p>
<p><a href="http://www.wandoujia.com/award/blog/com.bugkr.beautyidea">相关获奖介绍</a></p>
<p>最美创意是一款以创意广告、游戏CG、创意短片为主的内容聚合型应用，它给喜爱这些内容的用户一个可以毫不费力找到他们的平台。</p>]]>
    
    </summary>
    
      <category term="最美创意" scheme="http://adad184.com/tags/%E6%9C%80%E7%BE%8E%E5%88%9B%E6%84%8F/"/>
    
      <category term="获奖" scheme="http://adad184.com/tags/%E8%8E%B7%E5%A5%96/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何用纯代码构建一个Widget(today extension)]]></title>
    <link href="http://adad184.com/2014/10/29/how-to-setup-today-extension-programmatically/"/>
    <id>http://adad184.com/2014/10/29/how-to-setup-today-extension-programmatically/</id>
    <published>2014-10-29T02:11:49.000Z</published>
    <updated>2015-09-11T01:07:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>随着iOS8的发布 各种iPhone的新玩法出现了 其中最引人关注的就是<code>today extension</code>(也叫做widget) 这个在android上存在了多年的小玩意 也是iPhone一直被人诟病的东西 终于能用上了</p>
<p>网上有很多相关的文章教你如何编写一个简单的widget 但是却没有一篇适合我们这种纯代码的拥趸(也有很多人说应该放弃纯代码 改用Storyboard了) 那么接下来我就说说 如何用纯代码的方式来构建一个widget</p>
<h1 id="准备">准备</h1><p>首先 你得有个正常的app项目(这是必须的 extension必须依附于某个app中 当然 不这样 你也无法单独安装某个widget)</p>
<p>打开项目工程 选择新建一个target 在<code>Application Extension</code>中选择<code>today exntension</code> 然后填入名字 确认即可</p>
<a id="more"></a>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically1.png" alt="新建target"></p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically2.png" alt="填入信息"></p>
<p>这时你的项目里多个一个target 同时也多了下面</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically3.png" alt="修改plist"></p>
<p>接下来 删掉这个讨厌的<code>MainInterface.storyboard</code> 然后修改plist文件中的<code>NSExtension</code>字段</p>
<ul>
<li>删掉<code>NSExtensionMainStoryboard</code>字段</li>
<li>添加<code>NSExtensionPrincipalClass</code>字段 并设为<code>TodayViewController</code>(你也可以指定其他的ViewController)</li>
</ul>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically4.png" alt="修改plist"></p>
<p>修改完以后 Widget就可以开始编译运行了</p>
<h1 id="运行">运行</h1><p>关于调试Widget  我推荐使用模拟器而不用真机 因为在研究过程中我发现真机调试的效果非常差 经常提示无法连接到手机(也有可能是5S的性能够不?) 导致无法正常的debug 或者无法reinstall   而模拟器则好点(至少能顺利的打印出log) 但是每次修改好代码以后 最好都先退出模拟器 再重新编译运行 如果你退出重新运行时提示下面这个错误 不用怕 多运行两次就ok了</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically7.png" alt="模拟器报错"></p>
<p>按<code>Command+R</code>编译运行  会弹出提示框让你选择宿主app  就选择默认的today就好了<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically5.png" alt="运行"></p>
<p>如无意外 模拟器启动时会自动打开today 并显示你的widget<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically6.png" alt="效果"></p>
<p>是不是发现什么都没有?  如果用Storyboard构建的Widget 会默认有个<code>Hello</code> 可我们弄出来的Widget 却啥都没有 连高度都没有 </p>
<p>那么问题来了…</p>
<h1 id="修改">修改</h1><p>首先 我们设置一下widget的高度 并添加一个contentView和一个button(注意 这里我使用的是<code>Masonry</code>来完成autolayout 相关信息可见我的上一篇文章:<a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/" target="_blank" rel="external">Masonry介绍与使用实践(快速上手Autolayout</a>)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TodayViewController</span> () &lt;<span class="title">NCWidgetProviding</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIView</span> *contentView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIButton</span> *btnTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用preferredContentSize设置大小 且只用设置高度就好了</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.preferredContentSize</span> = <span class="built_in">CGSizeMake</span>(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(&amp;*<span class="keyword">self</span>)ws = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.contentView</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.contentView</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.contentView</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.contentView</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.edges</span><span class="variable">.equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.btnTest</span> = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.btnTest</span> setTitle:[[<span class="built_in">NSDate</span> date] description] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.btnTest</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.btnTest</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(actionTest) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:<span class="keyword">self</span><span class="variable">.btnTest</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.btnTest</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.center</span><span class="variable">.equalTo</span>(ws<span class="variable">.contentView</span>);</span><br><span class="line">        make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">300</span>, <span class="number">40</span>));</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行一下 看看效果<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically8.png" alt="效果"></p>
<p>控件是出来了 可是没有如我们的意  旁边还空了一块  原来widget默认会有一个inset  那么如何取消这个inset呢?  重载如下方法即可</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIEdgeInsets</span>)widgetMarginInsetsForProposedMarginInsets:(<span class="built_in">UIEdgeInsets</span>)defaultMarginInsets</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIEdgeInsetsZero</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改完以后您再看</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically9.png" alt="效果"></p>
<p>一个Widget的模子就这样构建完成了 </p>
<h1 id="进阶">进阶</h1><p>接下来 我们给button加个点击事件 用来改变widget的大小</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) actionTest</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.preferredContentSize</span> = <span class="built_in">CGSizeMake</span>(<span class="number">0</span>, <span class="keyword">self</span><span class="variable">.contentView</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.height</span>&gt;<span class="number">250</span>?<span class="number">200</span>:<span class="number">300</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically1.gif" alt="效果"></p>
<p>测试发现效果”还可以”  为什么仅仅是”还可以”呢  可以看到当size变化时 其他区域其实是有个动态变化的效果  但是我们的widget的变化是立即的  所以看上去不那么流畅(storyboard里就不存在这个问题了 因为使用了autolayout)  </p>
<p>那么我们可不可以也使用autolayout 而不设置这个<code>preferredContentSize</code>呢?  答案是可以的</p>
<p>首先修改viewDidLoad的代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//去掉这一步</span></span><br><span class="line">    <span class="comment">//self.preferredContentSize = CGSizeMake(0, 200);</span></span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(&amp;*<span class="keyword">self</span>)ws = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.contentView</span> = [<span class="built_in">UIView</span> new];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.contentView</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.contentView</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.contentView</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.edges</span><span class="variable">.equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">        <span class="comment">//设置内部view的高度(一定要设置高优先级 不然会有冲突)</span></span><br><span class="line">        make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(@<span class="number">200</span>)<span class="variable">.priorityHigh</span>();</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后修改按钮的动作</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) actionTest</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//去掉这一步</span></span><br><span class="line">    <span class="comment">//self.preferredContentSize = CGSizeMake(0, self.contentView.frame.size.height&gt;250?200:300);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新autolayout</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.contentView</span> mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(@(<span class="keyword">self</span><span class="variable">.contentView</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.height</span>&gt;<span class="number">250</span>?<span class="number">200</span>:<span class="number">300</span>))<span class="variable">.priorityHigh</span>();</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试着运行一下  你会发现世界变得很美丽了</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-10-29-how-to-setup-today-extension-programmatically2.gif" alt="效果"></p>
<p><strong>至此 发挥你的想象吧 you can do whatever you want!</strong></p>
<h1 id="小结">小结</h1><p>文章的demo<a href="https://github.com/adad184/DemoTodayWidget" target="_blank" rel="external">在此</a></p>
<p>所有的准备工作都已经做完了 编写一个Widget也变得很简单 你可以像写任何一个ViewController一样来写Widget 而纯代码的方式我相信会让很多人更得心应手</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>随着iOS8的发布 各种iPhone的新玩法出现了 其中最引人关注的就是<code>today extension</code>(也叫做widget) 这个在android上存在了多年的小玩意 也是iPhone一直被人诟病的东西 终于能用上了</p>
<p>网上有很多相关的文章教你如何编写一个简单的widget 但是却没有一篇适合我们这种纯代码的拥趸(也有很多人说应该放弃纯代码 改用Storyboard了) 那么接下来我就说说 如何用纯代码的方式来构建一个widget</p>
<h1 id="准备">准备</h1><p>首先 你得有个正常的app项目(这是必须的 extension必须依附于某个app中 当然 不这样 你也无法单独安装某个widget)</p>
<p>打开项目工程 选择新建一个target 在<code>Application Extension</code>中选择<code>today exntension</code> 然后填入名字 确认即可</p>]]>
    
    </summary>
    
      <category term="Today Extension" scheme="http://adad184.com/tags/Today-Extension/"/>
    
      <category term="Widget" scheme="http://adad184.com/tags/Widget/"/>
    
      <category term="教程" scheme="http://adad184.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Masonry介绍与使用实践(快速上手Autolayout)]]></title>
    <link href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/"/>
    <id>http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/</id>
    <published>2014-09-28T01:53:49.000Z</published>
    <updated>2015-08-28T02:18:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MagicNumber -&gt; autoresizingMask -&gt; autolayout</span><br></pre></td></tr></table></figure>
<p>以上是纯手写代码所经历的关于页面布局的三个时期</p>
<ul>
<li><p>在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了</p>
</li>
<li><p>在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变</p>
</li>
<li><p>在iphone5-iphone5s时代 window的size变了(320,568) 这时<code>autoresizingMask</code>派上了用场(为啥这时候不用Autolayout?  因为还要支持ios5呗) 简单的适配一下即可</p>
</li>
<li><p>在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃<code>autoresizingMask</code>改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说<code>autoresizingMask</code>也已经过时了)</p>
</li>
</ul>
<p>那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的<code>繁琐和啰嗦</code>(有过经验的朋友肯定有同感)</p>
<p>直到iphone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(<code>重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识</code>) 这就是我为什么要写下这篇文章来推荐它的原因</p>
<h1 id="介绍">介绍</h1><p><a href="https://github.com/Masonry/Masonry" target="_blank" rel="external">Masonry 源码</a></p>
<p>Masonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 <code>而且同时支持 iOS 和 Max OS X</code></p>
<a id="more"></a>
<p>我们先来看一段官方的sample code来认识一下Masonry</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.edges</span><span class="variable">.equalTo</span>(superview)<span class="variable">.with</span><span class="variable">.insets</span>(padding);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>看到block里面的那句话: <code>make edges equalTo superview with insets</code><br>通过链式的自然语言 就把view1给autolayout好了 是不是简单易懂? </p>
<h1 id="使用">使用</h1><p>看一下Masonry支持哪一些属性</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *left;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *top;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *right;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *bottom;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *leading;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *trailing;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *width;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *height;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *centerX;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *centerY;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *baseline;</span><br></pre></td></tr></table></figure>
<p>这些属性与NSLayoutAttrubute的对照表如下</p>
<table>
<thead>
<tr>
<th style="text-align:left">Masonry</th>
<th style="text-align:left">NSAutoLayout</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">left</td>
<td style="text-align:left">NSLayoutAttributeLeft</td>
<td style="text-align:left">左侧</td>
</tr>
<tr>
<td style="text-align:left">top</td>
<td style="text-align:left">NSLayoutAttributeTop</td>
<td style="text-align:left">上侧</td>
</tr>
<tr>
<td style="text-align:left">right</td>
<td style="text-align:left">NSLayoutAttributeRight</td>
<td style="text-align:left">右侧</td>
</tr>
<tr>
<td style="text-align:left">bottom</td>
<td style="text-align:left">NSLayoutAttributeBottom</td>
<td style="text-align:left">下侧</td>
</tr>
<tr>
<td style="text-align:left">leading</td>
<td style="text-align:left">NSLayoutAttributeLeading</td>
<td style="text-align:left">首部</td>
</tr>
<tr>
<td style="text-align:left">trailing</td>
<td style="text-align:left">NSLayoutAttributeTrailing</td>
<td style="text-align:left">尾部</td>
</tr>
<tr>
<td style="text-align:left">width</td>
<td style="text-align:left">NSLayoutAttributeWidth</td>
<td style="text-align:left">宽</td>
</tr>
<tr>
<td style="text-align:left">height</td>
<td style="text-align:left">NSLayoutAttributeHeight</td>
<td style="text-align:left">高</td>
</tr>
<tr>
<td style="text-align:left">centerX</td>
<td style="text-align:left">NSLayoutAttributeCenterX</td>
<td style="text-align:left">横向中点</td>
</tr>
<tr>
<td style="text-align:left">centerY</td>
<td style="text-align:left">NSLayoutAttributeCenterY</td>
<td style="text-align:left">纵向中点</td>
</tr>
<tr>
<td style="text-align:left">baseline</td>
<td style="text-align:left">NSLayoutAttributeBaseline</td>
<td style="text-align:left">文本基线</td>
</tr>
</tbody>
</table>
<p>其中leading与left  trailing与right 在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调 换句话说就是基本可以不理不用 用left和right就好了</p>
<p>在ios8发布后 又新增了一堆奇奇怪怪的属性(有兴趣的朋友可以去瞅瞅) Masonry暂时还不支持(不过你要支持ios6,ios7 就没必要去管那么多了)</p>
<p>下面进入正题(为了方便 我们测试的superView都是一个size为(300,300)的UIView)</p>
<p>下面 通过一些简单的实例来简单介绍如何<code>轻松愉快</code>的使用Masonry:</p>
<h2 id="1-_[基础]_居中显示一个view">1. [基础] <em>居中显示一个view</em></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *sv = [<span class="built_in">UIView</span> new];</span><br><span class="line">    [sv showPlaceHolder];</span><br><span class="line">    sv<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:sv];</span><br><span class="line">    [sv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.center</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.view</span>);</span><br><span class="line">        make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">300</span>, <span class="number">300</span>));</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-09-28-use-masonry-to-quick-solve-autolayout1.png" alt="代码效果"></p>
<p>使用我之间写的<a href="https://github.com/adad184/MMPlaceHolder" target="_blank" rel="external">MMPlaceHolder</a> 可以看到superview已经按照我们预期居中并且设置成了适当的大小</p>
<p>那么先看看这几行代码 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从此以后基本可以抛弃CGRectMake了</span></span><br><span class="line"><span class="built_in">UIView</span> *sv = [<span class="built_in">UIView</span> new];</span><br><span class="line"></span><br><span class="line"><span class="comment">//在做autoLayout之前 一定要先将view添加到superview上 否则会报错</span></span><br><span class="line">[<span class="keyword">self</span><span class="variable">.view</span> addSubview:sv];</span><br><span class="line"></span><br><span class="line"><span class="comment">//mas_makeConstraints就是Masonry的autolayout添加函数 将所需的约束添加到block中行了</span></span><br><span class="line">[sv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将sv居中(很容易理解吧?)</span></span><br><span class="line">    make<span class="variable">.center</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.view</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将size设置成(300,300)</span></span><br><span class="line">    make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">300</span>, <span class="number">300</span>));</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>这里有两个问题要分解一下 </p>
<ul>
<li>首先在Masonry中能够添加autolayout约束有三个函数</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">    mas_makeConstraints 只负责新增约束 Autolayout不能同时存在两条针对于同一对象的约束 否则会报错 </span><br><span class="line">    mas_updateConstraints 针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</span><br><span class="line">    mas_remakeConstraints 则会清除之前的所有约束 仅保留最新的约束</span><br><span class="line">    </span><br><span class="line">    三种函数善加利用 就可以应对各种情况了</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其次 equalTo 和 mas_equalTo的区别在哪里呢? 其实 mas_equalTo是一个MACRO</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"><span class="preprocessor">#define mas_greaterThanOrEqualTo(...)    greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"><span class="preprocessor">#define mas_lessThanOrEqualTo(...)       lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define mas_offset(...)                  valueOffset(MASBoxValue((__VA_ARGS__)))</span></span><br></pre></td></tr></table></figure>
<p>可以看到 mas_equalTo只是对其参数进行了一个BOX操作(装箱) MASBoxValue的定义具体可以看看源代码 太长就不贴出来了</p>
<p>所支持的类型  除了NSNumber支持的那些数值类型之外 就只支持<code>CGPoint</code> <code>CGSize</code> <code>UIEdgeInsets</code></p>
<p>介绍完这几个问题 我们就继续往下了 PS:刚才定义的sv会成为我们接下来所有sample的superView</p>
<h2 id="2-_[初级]_让一个view略小于其superView(边距为10)">2. [初级] <em>让一个view略小于其superView(边距为10)</em></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *sv1 = [<span class="built_in">UIView</span> new];</span><br><span class="line">[sv1 showPlaceHolder];</span><br><span class="line">sv1<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">[sv addSubview:sv1];</span><br><span class="line">[sv1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.edges</span><span class="variable">.equalTo</span>(sv)<span class="variable">.with</span><span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 等价于</span><br><span class="line">    make.top.equalTo(sv).with.offset(10);</span><br><span class="line">    make.left.equalTo(sv).with.offset(10);</span><br><span class="line">    make.bottom.equalTo(sv).with.offset(-10);</span><br><span class="line">    make.right.equalTo(sv).with.offset(-10);</span><br><span class="line">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 也等价于</span><br><span class="line">    make.top.left.bottom.and.right.equalTo(sv).with.insets(UIEdgeInsetsMake(10, 10, 10, 10));</span><br><span class="line">    */</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-09-28-use-masonry-to-quick-solve-autolayout2.png" alt="代码效果"></p>
<p>可以看到 edges 其实就是top,left,bottom,right的一个简化 分开写也可以 一句话更省事 </p>
<p>那么为什么bottom和right里的offset是负数呢?  因为这里计算的是绝对的数值 计算的bottom需要小于sv的底部高度 所以要-10  同理用于right</p>
<p>这里有意思的地方是<code>and</code>和<code>with</code>  其实这两个函数什么事情都没做</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (MASConstraint *)with &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (MASConstraint *)and &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是用在这种链式语法中 就非常的巧妙和易懂 不得不佩服作者的心思(虽然我现在基本都会省略)</p>
<h2 id="3-_[初级]_让两个高度为150的view垂直居中且等宽且等间隔排列_间隔为10(自动计算其宽度)">3. [初级] <em>让两个高度为150的view垂直居中且等宽且等间隔排列 间隔为10(自动计算其宽度)</em></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> padding1 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">[sv2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.centerY</span><span class="variable">.mas_equalTo</span>(sv<span class="variable">.mas_centerY</span>);</span><br><span class="line">    make<span class="variable">.left</span><span class="variable">.equalTo</span>(sv<span class="variable">.mas_left</span>)<span class="variable">.with</span><span class="variable">.offset</span>(padding1);</span><br><span class="line">    make<span class="variable">.right</span><span class="variable">.equalTo</span>(sv3<span class="variable">.mas_left</span>)<span class="variable">.with</span><span class="variable">.offset</span>(-padding1);</span><br><span class="line">    make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(@<span class="number">150</span>);</span><br><span class="line">    make<span class="variable">.width</span><span class="variable">.equalTo</span>(sv3);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[sv3 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.centerY</span><span class="variable">.mas_equalTo</span>(sv<span class="variable">.mas_centerY</span>);</span><br><span class="line">    make<span class="variable">.left</span><span class="variable">.equalTo</span>(sv2<span class="variable">.mas_right</span>)<span class="variable">.with</span><span class="variable">.offset</span>(padding1);</span><br><span class="line">    make<span class="variable">.right</span><span class="variable">.equalTo</span>(sv<span class="variable">.mas_right</span>)<span class="variable">.with</span><span class="variable">.offset</span>(-padding1);</span><br><span class="line">    make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(@<span class="number">150</span>);</span><br><span class="line">    make<span class="variable">.width</span><span class="variable">.equalTo</span>(sv2);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-09-28-use-masonry-to-quick-solve-autolayout3.png" alt="代码效果"></p>
<p>这里我们在两个子view之间互相设置的约束 可以看到他们的宽度在约束下自动的被计算出来了</p>
<h2 id="4-_[中级]_在UIScrollView顺序排列一些view并自动计算contentSize">4. [中级] <em>在UIScrollView顺序排列一些view并自动计算contentSize</em></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIScrollView</span> *scrollView = [<span class="built_in">UIScrollView</span> new];</span><br><span class="line">scrollView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">[sv addSubview:scrollView];</span><br><span class="line">[scrollView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.edges</span><span class="variable">.equalTo</span>(sv)<span class="variable">.with</span><span class="variable">.insets</span>(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>));</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIView</span> *container = [<span class="built_in">UIView</span> new];</span><br><span class="line">[scrollView addSubview:container];</span><br><span class="line">[container mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.edges</span><span class="variable">.equalTo</span>(scrollView);</span><br><span class="line">    make<span class="variable">.width</span><span class="variable">.equalTo</span>(scrollView);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIView</span> *lastView = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= count ; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *subv = [<span class="built_in">UIView</span> new];</span><br><span class="line">    [container addSubview:subv];</span><br><span class="line">    subv<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> colorWithHue:( arc4random() % <span class="number">256</span> / <span class="number">256.0</span> )</span><br><span class="line">                                      saturation:( arc4random() % <span class="number">128</span> / <span class="number">256.0</span> ) + <span class="number">0.5</span></span><br><span class="line">                                      brightness:( arc4random() % <span class="number">128</span> / <span class="number">256.0</span> ) + <span class="number">0.5</span></span><br><span class="line">                                           alpha:<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    [subv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.left</span><span class="variable">.and</span><span class="variable">.right</span><span class="variable">.equalTo</span>(container);</span><br><span class="line">        make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(@(<span class="number">20</span>*i));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( lastView )</span><br><span class="line">        &#123;</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(lastView<span class="variable">.mas_bottom</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(container<span class="variable">.mas_top</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    lastView = subv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[container mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.bottom</span><span class="variable">.equalTo</span>(lastView<span class="variable">.mas_bottom</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-09-28-use-masonry-to-quick-solve-autolayout4.png" alt="头部效果"><br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-09-28-use-masonry-to-quick-solve-autolayout5.png" alt="尾部效果"></p>
<p>从scrollView的scrollIndicator可以看出 scrollView的内部已如我们所想排列好了</p>
<p>这里的关键就在于container这个view起到了一个中间层的作用 能够自动的计算uiscrollView的contentSize</p>
<h2 id="5-_[高级]_横向或者纵向等间隙的排列一组view">5. [高级] <em>横向或者纵向等间隙的排列一组view</em></h2><p>很遗憾 autoLayout并没有直接提供等间隙排列的方法(Masonry的官方demo中也没有对应的案例) 但是参考案例3 我们可以通过一个小技巧来实现这个目的 为此我写了一个Category</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIView</span>(<span class="title">Masonry_LJC</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) distributeSpacingHorizontallyWith:(<span class="built_in">NSArray</span>*)views</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *spaces = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:views<span class="variable">.count</span>+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; views<span class="variable">.count</span>+<span class="number">1</span> ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *v = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [spaces addObject:v];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:v];</span><br><span class="line">        </span><br><span class="line">        [v mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.width</span><span class="variable">.equalTo</span>(v<span class="variable">.mas_height</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *v0 = spaces[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    [v0 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.left</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.mas_left</span>);</span><br><span class="line">        make<span class="variable">.centerY</span><span class="variable">.equalTo</span>(((<span class="built_in">UIView</span>*)views[<span class="number">0</span>])<span class="variable">.mas_centerY</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *lastSpace = v0;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; views<span class="variable">.count</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *obj = views[i];</span><br><span class="line">        <span class="built_in">UIView</span> *space = spaces[i+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.equalTo</span>(lastSpace<span class="variable">.mas_right</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        [space mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.left</span><span class="variable">.equalTo</span>(obj<span class="variable">.mas_right</span>);</span><br><span class="line">            make<span class="variable">.centerY</span><span class="variable">.equalTo</span>(obj<span class="variable">.mas_centerY</span>);</span><br><span class="line">            make<span class="variable">.width</span><span class="variable">.equalTo</span>(v0);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        lastSpace = space;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [lastSpace mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.right</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.mas_right</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) distributeSpacingVerticallyWith:(<span class="built_in">NSArray</span>*)views</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *spaces = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:views<span class="variable">.count</span>+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; views<span class="variable">.count</span>+<span class="number">1</span> ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *v = [<span class="built_in">UIView</span> new];</span><br><span class="line">        [spaces addObject:v];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:v];</span><br><span class="line">        </span><br><span class="line">        [v mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.width</span><span class="variable">.equalTo</span>(v<span class="variable">.mas_height</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *v0 = spaces[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    [v0 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.top</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.mas_top</span>);</span><br><span class="line">        make<span class="variable">.centerX</span><span class="variable">.equalTo</span>(((<span class="built_in">UIView</span>*)views[<span class="number">0</span>])<span class="variable">.mas_centerX</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *lastSpace = v0;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; views<span class="variable">.count</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *obj = views[i];</span><br><span class="line">        <span class="built_in">UIView</span> *space = spaces[i+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.equalTo</span>(lastSpace<span class="variable">.mas_bottom</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        [space mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make<span class="variable">.top</span><span class="variable">.equalTo</span>(obj<span class="variable">.mas_bottom</span>);</span><br><span class="line">            make<span class="variable">.centerX</span><span class="variable">.equalTo</span>(obj<span class="variable">.mas_centerX</span>);</span><br><span class="line">            make<span class="variable">.height</span><span class="variable">.equalTo</span>(v0);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        lastSpace = space;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [lastSpace mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.bottom</span><span class="variable">.equalTo</span>(<span class="keyword">self</span><span class="variable">.mas_bottom</span>);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>简单的来测试一下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *sv11 = [<span class="built_in">UIView</span> new];</span><br><span class="line"><span class="built_in">UIView</span> *sv12 = [<span class="built_in">UIView</span> new];</span><br><span class="line"><span class="built_in">UIView</span> *sv13 = [<span class="built_in">UIView</span> new];</span><br><span class="line"><span class="built_in">UIView</span> *sv21 = [<span class="built_in">UIView</span> new];</span><br><span class="line"><span class="built_in">UIView</span> *sv31 = [<span class="built_in">UIView</span> new];</span><br><span class="line"></span><br><span class="line">sv11<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">sv12<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">sv13<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">sv21<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">sv31<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"></span><br><span class="line">[sv addSubview:sv11];</span><br><span class="line">[sv addSubview:sv12];</span><br><span class="line">[sv addSubview:sv13];</span><br><span class="line">[sv addSubview:sv21];</span><br><span class="line">[sv addSubview:sv31];</span><br><span class="line"></span><br><span class="line"><span class="comment">//给予不同的大小 测试效果</span></span><br><span class="line"></span><br><span class="line">[sv11 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.centerY</span><span class="variable">.equalTo</span>(@[sv12,sv13]);</span><br><span class="line">    make<span class="variable">.centerX</span><span class="variable">.equalTo</span>(@[sv21,sv31]);</span><br><span class="line">    make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">40</span>, <span class="number">40</span>));</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[sv12 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">70</span>, <span class="number">20</span>));</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[sv13 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[sv21 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">50</span>, <span class="number">20</span>));</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[sv31 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">40</span>, <span class="number">60</span>));</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[sv distributeSpacingHorizontallyWith:@[sv11,sv12,sv13]];</span><br><span class="line">[sv distributeSpacingVerticallyWith:@[sv11,sv21,sv31]];</span><br><span class="line"></span><br><span class="line">[sv showPlaceHolderWithAllSubviews];</span><br><span class="line">[sv hidePlaceHolder];</span><br></pre></td></tr></table></figure>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-09-28-use-masonry-to-quick-solve-autolayout6.png" alt="代码效果"></p>
<p>perfect! 简洁明了的达到了我们所要的效果</p>
<p>这里所用的技巧就是 使用空白的占位view来填充我们目标view的旁边 这点通过图上的空白标注可以看出来</p>
<h1 id="小结">小结</h1><p>通过以上5个案例 我觉得已经把Masonry的常用功能介绍得差不多了 以上五个例子的代码可以<a href="https://github.com/adad184/DemoMasonry" target="_blank" rel="external">在这里找到</a> 如果你觉得意犹未尽呢 请下载官方的demo来学习 </p>
<p>总而言之 Masonry是一个非常优秀的autolayout库 能够节省大量的开发和学习时间 尤其适合我这种纯代码的iOSer 在iPhone6发布后引发的适配潮中 Masonry一定可以助你一臂之力 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MagicNumber -&gt; autoresizingMask -&gt; autolayout</span><br></pre></td></tr></table></figure>
<p>以上是纯手写代码所经历的关于页面布局的三个时期</p>
<ul>
<li><p>在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了</p>
</li>
<li><p>在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变</p>
</li>
<li><p>在iphone5-iphone5s时代 window的size变了(320,568) 这时<code>autoresizingMask</code>派上了用场(为啥这时候不用Autolayout?  因为还要支持ios5呗) 简单的适配一下即可</p>
</li>
<li><p>在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃<code>autoresizingMask</code>改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说<code>autoresizingMask</code>也已经过时了)</p>
</li>
</ul>
<p>那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的<code>繁琐和啰嗦</code>(有过经验的朋友肯定有同感)</p>
<p>直到iphone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(<code>重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识</code>) 这就是我为什么要写下这篇文章来推荐它的原因</p>
<h1 id="介绍">介绍</h1><p><a href="https://github.com/Masonry/Masonry">Masonry 源码</a></p>
<p>Masonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 <code>而且同时支持 iOS 和 Max OS X</code></p>]]>
    
    </summary>
    
      <category term="Autolayout" scheme="http://adad184.com/tags/Autolayout/"/>
    
      <category term="Masonry" scheme="http://adad184.com/tags/Masonry/"/>
    
      <category term="教程" scheme="http://adad184.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何强制旋转屏幕]]></title>
    <link href="http://adad184.com/2014/09/19/how-to-force-rotate-screen/"/>
    <id>http://adad184.com/2014/09/19/how-to-force-rotate-screen/</id>
    <published>2014-09-19T07:17:14.000Z</published>
    <updated>2015-07-10T07:45:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>如果做过项目中有视频播放的内容 一定遇到过全屏播放视频的需求 一般来说 直接弹出一个modal viewcontroller来全屏播放视频就ok了  </p>
<p>但是为了用户体验 可能需要在同一个viewcontroller中进行全屏和非全屏的切换 这个时候可能就需要强制旋转屏幕来做到</p>
<p>那么如何完美的对屏幕进行强制旋转呢?</p>
<p>这里只讨论ios6+的方法(因为从ios6+起 屏幕旋转的api做了重要的变化 有需要的同学可以自己去探索一下ios6-的方法)</p>
<h1 id="研究">研究</h1><p>首先 你得在项目的的plist中或者target的general选项里配置好APP所支持的所有放心啊个</p>
<p>然后 在ios6+之后 屏幕旋转的控制权交给了rootViewController(这里没探讨presentViewController的情况 只考虑普通的布局) 那么基本上所有的APP都是基于<code>UINavigationController</code>或者<code>UITabbarViewController</code>做为rootViewController的 所以要灵活的控制每个push进来的view的旋转 需要修改一下<code>UINavigationController</code>或者<code>UITabbarViewController</code>的以下几个方法(可以添加Category 也可以继承一下)</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//UINavigationController</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)shouldAutorotate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.topViewController</span><span class="variable">.shouldAutorotate</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)supportedInterfaceOrientations</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.topViewController</span><span class="variable">.supportedInterfaceOrientations</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.topViewController</span><span class="variable">.preferredInterfaceOrientationForPresentation</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UITabbarViewController</span></span><br><span class="line"><span class="comment">//注意 这里的selectedViewController如果是UINavigationController的话 也需要对它做上面的修改</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)shouldAutorotate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.selectedViewController</span><span class="variable">.shouldAutorotate</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)supportedInterfaceOrientations</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.selectedViewController</span><span class="variable">.supportedInterfaceOrientations</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.selectedViewController</span><span class="variable">.preferredInterfaceOrientationForPresentation</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样 控制旋转的主动权就交还到了每个viewController的手上了</p>
<h1 id="方法">方法</h1><p>在ios6中 使用如下的trick可以强制让屏幕进行旋转检测</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">UIViewController</span> *vc = [[<span class="built_in">UIViewController</span> alloc]init];</span><br><span class="line">[<span class="keyword">self</span> presentModalViewController:vc animated:<span class="literal">NO</span>];</span><br><span class="line">[<span class="keyword">self</span> dismissModalViewControllerAnimated:<span class="literal">NO</span>];</span><br></pre></td></tr></table></figure>
<p>在ios7中 上面的方法不管用了  但是稍微改一改就可以了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">UIViewController</span> *vc  = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">[<span class="keyword">self</span> presentViewController:viewController animated:<span class="literal">NO</span> completion:^&#123;</span><br><span class="line">   	[<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">NO</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>虽然上面的办法确实可以触发对屏幕旋转的判断 但缺陷就是旋转起来不自然</p>
<p>实际上有个更好的方法 </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   [[UIDevice currentDevice] setValue:&#10;    [NSNumber numberWithInteger: self.isFullScreen?UIInterfaceOrientationLandscapeRight:UIInterfaceOrientationPortrait]&#10;                               forKey:@&#34;orientation&#34;];&#10;                               &#10;//&#31561;&#20215;&#20110;&#10;objc_msgSend([UIDevice currentDevice], @selector(setOrientation:), self.isFullScreen?UIInterfaceOrientationLandscapeRight:UIInterfaceOrientationPortrait);</span><br></pre></td></tr></table></figure>
<p>在stackoverflow上看到有人说 此方法是私有方法 调用有可能会导致被reject</p>
<p>但是<strong><code>亲测上架无碍</code></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>如果做过项目中有视频播放的内容 一定遇到过全屏播放视频的需求 一般来说 直接弹出一个modal viewcontroller来全屏播放视频就ok了  </p>
<p>但是为了用户体验 可能需要在同一个viewcontroller中进行全屏和非全屏的切换 这个时候可能就需要强制旋转屏幕来做到</p>
<p>那么如何完美的对屏幕进行强制旋转呢?</p>
<p>这里只讨论ios6+的方法(因为从ios6+起 屏幕旋转的api做了重要的变化 有需要的同学可以自己去探索一下ios6-的方法)</p>
<h1 id="研究">研究</h1><p>首先 你得在项目的的plist中或者target的general选项里配置好APP所支持的所有放心啊个</p>
<p>然后 在ios6+之后 屏幕旋转的控制权交给了rootViewController(这里没探讨presentViewController的情况 只考虑普通的布局) 那么基本上所有的APP都是基于<code>UINavigationController</code>或者<code>UITabbarViewController</code>做为rootViewController的 所以要灵活的控制每个push进来的view的旋转 需要修改一下<code>UINavigationController</code>或者<code>UITabbarViewController</code>的以下几个方法(可以添加Category 也可以继承一下)</p>]]>
    
    </summary>
    
      <category term="技巧" scheme="http://adad184.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="旋转屏幕" scheme="http://adad184.com/tags/%E6%97%8B%E8%BD%AC%E5%B1%8F%E5%B9%95/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[支付宝iOS SDK的那些坑(系统繁忙，请稍后再试)]]></title>
    <link href="http://adad184.com/2014/08/27/alipay-sdk-sucks/"/>
    <id>http://adad184.com/2014/08/27/alipay-sdk-sucks/</id>
    <published>2014-08-27T08:39:45.000Z</published>
    <updated>2015-07-10T07:45:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>支付宝的iOS SDK真是个奇葩的存在 按理说这么重要的SDK 理应提供详尽的文档和技术支持(虽然说实际使用较简单)<br>但是跑到<a href="http://club.alipay.com/thread-htm-fid-703-page-6.html" target="_blank" rel="external">官方论坛</a>一看 都是各种各样的问题 以及千篇一律的解答</p>
<p>这里不谈如何集成和使用SDK 只谈问题 如果你按照官方文档一步一步的调试发现任何问题没有 那么 恭喜你 运气不错</p>
<p>如果你跟我一样 遇到跳转支付时现实”系统繁忙,请稍后再试” 的问题(如图 没截到iOS的 找了一张android的图凑数)</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-27-alipay-sdk-sucks.png" alt="问题截图"></p>
<a id="more"></a>
<h1 id="问题">问题</h1><p>官方示例中支付相关的代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造订单</span></span><br><span class="line"><span class="built_in">NSString</span> *appScheme = <span class="string">@"AlipaySdkDemo"</span>;</span><br><span class="line"><span class="built_in">NSString</span>* orderInfo = [<span class="keyword">self</span> getOrderInfo:indexPath<span class="variable">.row</span>];</span><br><span class="line"><span class="built_in">NSString</span>* signedStr = [<span class="keyword">self</span> doRsa:orderInfo];</span><br><span class="line"></span><br><span class="line"><span class="comment">//形成订单参数</span></span><br><span class="line"><span class="built_in">NSString</span> *orderString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@&amp;sign=\"%@\"&amp;sign_type=\"%@\""</span>,</span><br><span class="line">                         orderInfo, signedStr, <span class="string">@"RSA"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用支付借口</span></span><br><span class="line">[AlixLibService payOrder:orderString AndScheme:appScheme seletor:_result target:<span class="keyword">self</span>];</span><br></pre></td></tr></table></figure>
<p>问题就出在<code>orderInfo</code>这里 那么<code>orderInfo</code>是什么呢?</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span>*)getOrderInfo:(<span class="built_in">NSInteger</span>)index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     *点击获取prodcut实例并初始化订单信息</span><br><span class="line">     */</span></span><br><span class="line">    Product *product = [_products objectAtIndex:index];    </span><br><span class="line">    AlixPayOrder *order = [[AlixPayOrder alloc] init];</span><br><span class="line">    order<span class="variable">.partner</span> = PartnerID;</span><br><span class="line">    order<span class="variable">.seller</span> = SellerID;</span><br><span class="line"></span><br><span class="line">    order<span class="variable">.tradeNO</span> = [<span class="keyword">self</span> generateTradeNO]; <span class="comment">//订单ID（由商家自行制定）</span></span><br><span class="line">    order<span class="variable">.productName</span> = product<span class="variable">.subject</span>; <span class="comment">//商品标题</span></span><br><span class="line">    order<span class="variable">.productDescription</span> = product<span class="variable">.body</span>; <span class="comment">//商品描述</span></span><br><span class="line">    order<span class="variable">.amount</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2f"</span>,product<span class="variable">.price</span>]; <span class="comment">//商品价格</span></span><br><span class="line">    order<span class="variable">.notifyURL</span> =  <span class="string">@"http%3A%2F%2Fwwww.xxx.com"</span>; <span class="comment">//回调URL</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [order description];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以到看<code>orderInfo</code>就是<code>AlixPayOrder</code>的字符串化 再看看其description函数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> * discription = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    [discription appendFormat:<span class="string">@"partner=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.partner</span> ? <span class="keyword">self</span><span class="variable">.partner</span> : <span class="string">@""</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;seller_id=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.seller</span> ? <span class="keyword">self</span><span class="variable">.seller</span> : <span class="string">@""</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;out_trade_no=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.tradeNO</span> ? <span class="keyword">self</span><span class="variable">.tradeNO</span> : <span class="string">@""</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;subject=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.productName</span> ? <span class="keyword">self</span><span class="variable">.productName</span> : <span class="string">@""</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;body=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.productDescription</span> ? <span class="keyword">self</span><span class="variable">.productDescription</span> : <span class="string">@""</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;total_fee=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.amount</span> ? <span class="keyword">self</span><span class="variable">.amount</span> : <span class="string">@""</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;notify_url=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.notifyURL</span> ? <span class="keyword">self</span><span class="variable">.notifyURL</span> : <span class="string">@""</span>];</span><br><span class="line">    </span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;service=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.serviceName</span> ? <span class="keyword">self</span><span class="variable">.serviceName</span> : <span class="string">@"mobile.securitypay.pay"</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;_input_charset=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.inputCharset</span> ? <span class="keyword">self</span><span class="variable">.inputCharset</span> : <span class="string">@"utf-8"</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;payment_type=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.paymentType</span> ? <span class="keyword">self</span><span class="variable">.paymentType</span> : <span class="string">@"1"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面的这些参数，如果没有必要（value为空），则无需添加</span></span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;return_url=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.returnUrl</span> ? <span class="keyword">self</span><span class="variable">.returnUrl</span> : <span class="string">@"www.xxx.com"</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;it_b_pay=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.itBPay</span> ? <span class="keyword">self</span><span class="variable">.itBPay</span> : <span class="string">@"1d"</span>];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;show_url=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.showUrl</span> ? <span class="keyword">self</span><span class="variable">.showUrl</span> : <span class="string">@"www.xxx.com"</span>];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> * key <span class="keyword">in</span> [<span class="keyword">self</span><span class="variable">.extraParams</span> allKeys]) &#123;</span><br><span class="line">        [discription appendFormat:<span class="string">@"&amp;%@=\"%@\""</span>, key, [<span class="keyword">self</span><span class="variable">.extraParams</span> objectForKey:key]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> discription;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我猜问题可能出现在这里<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[discription appendFormat:<span class="string">@"&amp;return_url=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.returnUrl</span> ? <span class="keyword">self</span><span class="variable">.returnUrl</span> : <span class="string">@"www.xxx.com"</span>];</span><br><span class="line">[discription appendFormat:<span class="string">@"&amp;it_b_pay=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.itBPay</span> ? <span class="keyword">self</span><span class="variable">.itBPay</span> : <span class="string">@"1d"</span>];</span><br><span class="line">[discription appendFormat:<span class="string">@"&amp;show_url=\"%@\""</span>, <span class="keyword">self</span><span class="variable">.showUrl</span> ? <span class="keyword">self</span><span class="variable">.showUrl</span> : <span class="string">@"www.xxx.com"</span>];</span><br></pre></td></tr></table></figure></p>
<p>可能是这种莫名其妙的默认值导致了问题的出现(代码里注释了无需添加 可为啥官方demo是没有问题的?)<br><code>orderInfo</code>也不过是一堆参数的拼凑而已 同时 我求证了同事在android的sdk里 参数也都是手工拼凑的 那么将必填参数自行组织一下 应该就可以了</p>
<h1 id="方案">方案</h1><p>经过实践 只需要填下下面出现的这些参数 就没有问题了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span>*)getOrderInfo</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableString</span> * discription = [<span class="built_in">NSMutableString</span> string] ;</span><br><span class="line">    [discription appendFormat:<span class="string">@"partner=\"%@\""</span>, PartnerID];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;seller_id=\"%@\""</span>, SellerID];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;out_trade_no=\"%@\""</span>, [<span class="keyword">self</span> getOrderID]];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;subject=\"%@\""</span>, yourSubject];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;body=\"%@\""</span>, yourBody];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;total_fee=\"%@\""</span>, yourPrice];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;notify_url=\"%@\""</span>, yourHandleAction];</span><br><span class="line">    [discription appendFormat:<span class="string">@"&amp;service=\"%@\""</span>, <span class="string">@"mobile.securitypay.pay"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> discription;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="尾声">尾声</h1><p>当然 回过头来看 问题有这么几个</p>
<ul>
<li>官方demo写得不严谨 且注释太少</li>
<li>官方文档写没有指出相关问题 以及对相应参数的解释(对于参数,仅提到了一句”<strong>支付参数提交时,需要组装订单信息 orderInfo,其中 参数以 key=”value”形式呈现,参数之间以“&amp;”分割, 获取 Alipay 支付对象调用支付。</strong>“”)</li>
<li>官方论坛没有相应的技术支持</li>
</ul>
<p>结论就是: 坑爹</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>支付宝的iOS SDK真是个奇葩的存在 按理说这么重要的SDK 理应提供详尽的文档和技术支持(虽然说实际使用较简单)<br>但是跑到<a href="http://club.alipay.com/thread-htm-fid-703-page-6.html">官方论坛</a>一看 都是各种各样的问题 以及千篇一律的解答</p>
<p>这里不谈如何集成和使用SDK 只谈问题 如果你按照官方文档一步一步的调试发现任何问题没有 那么 恭喜你 运气不错</p>
<p>如果你跟我一样 遇到跳转支付时现实”系统繁忙,请稍后再试” 的问题(如图 没截到iOS的 找了一张android的图凑数)</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-27-alipay-sdk-sucks.png" alt="问题截图"></p>]]>
    
    </summary>
    
      <category term="支付" scheme="http://adad184.com/tags/%E6%94%AF%E4%BB%98/"/>
    
      <category term="支付宝" scheme="http://adad184.com/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hello my baby]]></title>
    <link href="http://adad184.com/2014/08/27/hello-my-baby/"/>
    <id>http://adad184.com/2014/08/27/hello-my-baby/</id>
    <published>2014-08-27T08:21:14.000Z</published>
    <updated>2015-07-10T07:45:24.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-27-hello-my-baby.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-27-hello-my-baby.png" alt=""></p>
]]>
    </summary>
    
      <category term="生活" scheme="http://adad184.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活琐碎" scheme="http://adad184.com/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何快速的删除mac上imessage里的(垃圾)信息]]></title>
    <link href="http://adad184.com/2014/08/26/ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi/"/>
    <id>http://adad184.com/2014/08/26/ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi/</id>
    <published>2014-08-26T00:51:34.000Z</published>
    <updated>2015-07-10T07:45:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>imessage现在处于一个非常鸡肋的状态 开了无用 关了可惜 而且貌似跟中国的运营商还有点点冲突(经常各种群发短信的时候夹杂着imessage 对方就收不到) </p>
<p>当然有垃圾就要清除 手机上还好 看到了顺手左划就删掉了 但是倒霉的是在mac不会同步被删除 而且万一你从没没用过mac上的<code>Messages</code>这个服务 赶紧去点开 有惊喜</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi2.png" alt="imessage"></p>
<p>恩 是的 你肯定发现这个东东已经成了各种小广告的垃圾场</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi.png" alt="imessage"></p>
<p>ok 是时候准备删除了(强迫症你别理我) 于是 点X - 确认删除 - 点X - 确认删除 …… 当重复了十几遍以后 你会觉得这样太煞笔了 这几百条的垃圾 删除到什么时候去?  shift批量选择? 你试试支持么(这个特性不支持确实有点不合理)</p>
<p>那么如何快速的删除imessage里的信息呢?</p>
<a id="more"></a>
<h1 id="方法">方法</h1><ul>
<li>方法一 快速删除单条记录</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组合键 option+command+delete(大的那个 小键盘不管用)</span><br></pre></td></tr></table></figure>
<p>这样可以快速的删除单挑 好处是可以选择要保留的</p>
<ul>
<li>方法二 快速清空所有记录</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">退出messages应用</span><br><span class="line">rm -r ~/Library/Messages/chat.*</span><br><span class="line">重启messages</span><br></pre></td></tr></table></figure>
<p>据说这个方法可以清空所有信息 但是由于我测试的时候没有推出messages就直接删除文件了 导致我重启了以后所有信息都还在(汗 这是为什么 明明文件删除了) 所以我不确定这个方法是否在10.9上面还有效</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>imessage现在处于一个非常鸡肋的状态 开了无用 关了可惜 而且貌似跟中国的运营商还有点点冲突(经常各种群发短信的时候夹杂着imessage 对方就收不到) </p>
<p>当然有垃圾就要清除 手机上还好 看到了顺手左划就删掉了 但是倒霉的是在mac不会同步被删除 而且万一你从没没用过mac上的<code>Messages</code>这个服务 赶紧去点开 有惊喜</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi2.png" alt="imessage"></p>
<p>恩 是的 你肯定发现这个东东已经成了各种小广告的垃圾场</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi.png" alt="imessage"></p>
<p>ok 是时候准备删除了(强迫症你别理我) 于是 点X - 确认删除 - 点X - 确认删除 …… 当重复了十几遍以后 你会觉得这样太煞笔了 这几百条的垃圾 删除到什么时候去?  shift批量选择? 你试试支持么(这个特性不支持确实有点不合理)</p>
<p>那么如何快速的删除imessage里的信息呢?</p>]]>
    
    </summary>
    
      <category term="iMessage" scheme="http://adad184.com/tags/iMessage/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目:MMPlaceHolder]]></title>
    <link href="http://adad184.com/2014/08/21/kai-yuan-xiang-mu-mmplaceholder/"/>
    <id>http://adad184.com/2014/08/21/kai-yuan-xiang-mu-mmplaceholder/</id>
    <published>2014-08-21T04:17:14.000Z</published>
    <updated>2015-07-10T07:45:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>最近在做一个新的项目 免不了又要跟UI打交道 之前N多的经验告诉我 为了达到设计图上的100%Copy 避免不了在切图的<code>尺寸</code>和<code>位置</code>上花大量的时间 (为什么不按美术切给你的尺寸来? 这… 只能说美术很难跟我达到天人合一… ( ͡° ͜ʖ ͡°)</p>
<p>那么能不能以实际的效果告诉设计师尺寸和位置呢?  如下面这样就皆大欢喜啦</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-21-kai-yuan-xiang-mu-mmplaceholder-1.png" alt="效果"></p>
<p>当然 很早之前就已经有前人做过这种事情了 比如</p>
<a id="more"></a>
<p><a href="https://github.com/dhennessy/PAPlaceholder" target="_blank" rel="external">PAPlaceholder</a><br><a href="https://github.com/midnightSuyama/Masu" target="_blank" rel="external">Masu</a></p>
<p>但是呢 共同的特点就是<code>难用</code>(怎么难用? 可以自己看一下他们的文档)</p>
<p>所以呢 处于好玩的目的 就自己写了一个简单易用的版本(怎么简单? 一行代码就搞定啦)</p>
<h1 id="介绍">介绍</h1><p><a href="https://github.com/adad184/MMPlaceHolder" target="_blank" rel="external">MMPlaceHolder</a></p>
<ul>
<li>一行代码解决显示问题 简单易用</li>
<li>搭建码农和设计之间的沟通桥梁 减少沟通成本(Talk is cheap. Show me the code.)</li>
<li>显示大小自适应(最小支持30*30哦)</li>
</ul>
<h1 id="使用">使用</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)showPlaceHolder;</span><br><span class="line">- (<span class="keyword">void</span>)showPlaceHolderWithLineColor:(<span class="built_in">UIColor</span>*)lineColor;</span><br><span class="line">- (<span class="keyword">void</span>)showPlaceHolderWithLineColor:(<span class="built_in">UIColor</span>*)lineColor backColor:(<span class="built_in">UIColor</span>*)backColor;</span><br><span class="line">- (<span class="keyword">void</span>)showPlaceHolderWithLineColor:(<span class="built_in">UIColor</span>*)lineColor backColor:(<span class="built_in">UIColor</span>*)backColor arrowSize:(<span class="built_in">CGFloat</span>)arrowSize;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)hidePlaceHolder;</span><br><span class="line">- (M<span class="built_in">MPlaceHolder</span> *)getPlaceHolder;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>最近在做一个新的项目 免不了又要跟UI打交道 之前N多的经验告诉我 为了达到设计图上的100%Copy 避免不了在切图的<code>尺寸</code>和<code>位置</code>上花大量的时间 (为什么不按美术切给你的尺寸来? 这… 只能说美术很难跟我达到天人合一… ( ͡° ͜ʖ ͡°)</p>
<p>那么能不能以实际的效果告诉设计师尺寸和位置呢?  如下面这样就皆大欢喜啦</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2014-08-21-kai-yuan-xiang-mu-mmplaceholder-1.png" alt="效果"></p>
<p>当然 很早之前就已经有前人做过这种事情了 比如</p>]]>
    
    </summary>
    
      <category term="开源" scheme="http://adad184.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目:MMSpinImageView 用于360度显示环拍物体]]></title>
    <link href="http://adad184.com/2014/01/31/kai-yuan-xiang-mu-mmspinimageview-yong-yu-360-du-xian-shi-huan-pai-wu-ti/"/>
    <id>http://adad184.com/2014/01/31/kai-yuan-xiang-mu-mmspinimageview-yong-yu-360-du-xian-shi-huan-pai-wu-ti/</id>
    <published>2014-01-31T05:24:53.000Z</published>
    <updated>2015-07-10T07:46:00.000Z</updated>
    <content type="html"><![CDATA[<p>在Github上开源了一个小玩意 <a href="https://github.com/adad184/MMSpinImageView" target="_blank" rel="external">MMSpinImageView</a></p>
<p>使用方法 可以用Delegate的方式,也可以直接设置一个包含UIImage的NSArray,或者直接从ZIP包里读取(需要其他类库支持)</p>
<p>第一版本很简单 基于UIImageView来显示图片 如果有性能问题 会考虑用绘制的方法来实现</p>
<p><img src="https://github.com/adad184/MMSpinImageView/blob/master/Image/demo.gif?raw=true" alt="demo"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Github上开源了一个小玩意 <a href="https://github.com/adad184/MMSpinImageView" target="_blank" rel="external">MMSpinImageView</a></p>
<p>使用方法 可以用D]]>
    </summary>
    
      <category term="开源" scheme="http://adad184.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="开源项目" scheme="http://adad184.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决表单被键盘遮住的问题(续)]]></title>
    <link href="http://adad184.com/2013/12/19/jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti-xu/"/>
    <id>http://adad184.com/2013/12/19/jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti-xu/</id>
    <published>2013-12-19T08:31:34.000Z</published>
    <updated>2015-07-10T07:46:07.000Z</updated>
    <content type="html"><![CDATA[<p>刚才检查代码的时候 发现了之前代码的一些问题 这里做一下修正 为此我为UIView和UITableView各新增了一个Category方法</p>
<figure class="highlight objc"><figcaption><span>UIView的Category</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>) haveSubview:(<span class="built_in">UIView</span>*)subView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *v = subView;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">self</span> == v )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        v = v<span class="variable">.superview</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight objc"><figcaption><span>UITableVIew的Category方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>) haveSubview:(<span class="built_in">UIView</span>*)subView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( v &amp;&amp; [<span class="keyword">self</span> haveSubview:v] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ( v &amp;&amp; ![[v class] isSubclassOfClass:[<span class="built_in">UITableViewCell</span> class]]) &#123;</span><br><span class="line">            v = v<span class="variable">.superview</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( v )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="built_in">NSStringFromClass</span>(v<span class="variable">.class</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">UITableViewCell</span> *cell = (<span class="built_in">UITableViewCell</span>*)v;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="keyword">self</span> indexPathForCell:cell]);</span><br><span class="line">            </span><br><span class="line">            [<span class="keyword">self</span> scrollToRowAtIndexPath:[<span class="keyword">self</span> indexPathForRowAtPoint:cell<span class="variable">.center</span>] atScrollPosition:<span class="built_in">UITableViewScrollPositionBottom</span> animated:<span class="literal">YES</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样 当我们需要处理弹出键盘时 就只需要如此调用就可以了</p>
<figure class="highlight objc"><figcaption><span>调用方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *v = [<span class="built_in">UIResponder</span> currentFirstResponder];</span><br><span class="line">[<span class="keyword">self</span><span class="variable">.tableView</span> scrollToView:v];</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚才检查代码的时候 发现了之前代码的一些问题 这里做一下修正 为此我为UIView和UITableView各新增了一个Category方法</p>
<figure class="highlight objc"><figcaption><span>UIView的Category</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>) haveSubview:(<span class="built_in">UIView</span>*)subView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *v = subView;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">self</span> == v )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        v = v<span class="variable">.superview</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="表单" scheme="http://adad184.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="键盘" scheme="http://adad184.com/tags/%E9%94%AE%E7%9B%98/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[完美解决 interactivePopGestureRecognizer 卡住的问题]]></title>
    <link href="http://adad184.com/2013/12/12/wan-mei-jie-jue-interactivepopgesturerecognizer-qia-zhu-de-wen-ti/"/>
    <id>http://adad184.com/2013/12/12/wan-mei-jie-jue-interactivepopgesturerecognizer-qia-zhu-de-wen-ti/</id>
    <published>2013-12-12T08:19:10.000Z</published>
    <updated>2015-07-10T07:46:14.000Z</updated>
    <content type="html"><![CDATA[<p><code>interactivePopGestureRecognizer</code>是iOS7推出的解决<code>VeiwController</code>滑动后退的新功能,虽然很实用,但是坑也很多啊,用过的同学肯定知道问题在哪里,所以具体问题我就不描述了,这里只给出如何完美解决<code>interactivePopGestureRecognizer</code>卡住的问题.</p>
<p>当然我们要自定义UINavigationController来解决这个问题:</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MMNavController.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMNavController</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MMNavController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithRootViewController:(<span class="built_in">UIViewController</span> *)rootViewController</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithRootViewController:rootViewController];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// Custom initialization</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">weak</span> MMNavController *weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(interactivePopGestureRecognizer)])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.delegate</span> = weakSelf;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.delegate</span> = weakSelf;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( [<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(interactivePopGestureRecognizer)] &amp;&amp; animated == <span class="literal">YES</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.enabled</span> = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">super</span> pushViewController:viewController animated:animated];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)popToRootViewControllerAnimated:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( [<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(interactivePopGestureRecognizer)] &amp;&amp; animated == <span class="literal">YES</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.enabled</span> = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>  [<span class="keyword">super</span> popToRootViewControllerAnimated:animated];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)popToViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( [<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(interactivePopGestureRecognizer)] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.enabled</span> = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> popToViewController:viewController animated:animated];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark UINavigationControllerDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController</span><br><span class="line">       didShowViewController:(<span class="built_in">UIViewController</span> *)viewController</span><br><span class="line">                    animated:(<span class="built_in">BOOL</span>)animate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(interactivePopGestureRecognizer)])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.enabled</span> = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( gestureRecognizer == <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">self</span><span class="variable">.viewControllers</span><span class="variable">.count</span> &lt; <span class="number">2</span> || <span class="keyword">self</span><span class="variable">.visibleViewController</span> == [<span class="keyword">self</span><span class="variable">.viewControllers</span> objectAtIndex:<span class="number">0</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><code>interactivePopGestureRecognizer</code>是iOS7推出的解决<code>VeiwController</code>滑动后退的新功能,虽然很实用,但是坑也很多啊,用过的同学肯定知道问题在哪里,所以具体问题我就不描述了,这里只给出如何完美解决<code>interactivePopGestureRecognizer</code>卡住的问题.</p>
<p>当然我们要自定义UINavigationController来解决这个问题:</p>]]>
    
    </summary>
    
      <category term="手势" scheme="http://adad184.com/tags/%E6%89%8B%E5%8A%BF/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决表单被键盘遮住的问题]]></title>
    <link href="http://adad184.com/2013/11/11/jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti/"/>
    <id>http://adad184.com/2013/11/11/jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti/</id>
    <published>2013-11-11T03:01:59.000Z</published>
    <updated>2015-07-10T07:46:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题">问题</h1><p>处理表单的时候,一定会碰到的就是输入控件被键盘遮住的问题,如图:</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-11-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti1.png" alt="实例"></p>
<p>左边是普通表单,中间是2B表单,右边是文艺表单.</p>
<h1 id="分析">分析</h1><p>处理这种问题无非就是2个步骤:</p>
<ol>
<li>键盘弹出时,缩小<code>UITableView</code>的<code>frame</code></li>
<li>滚动<code>UITableView</code>,让当前输入的控件可见</li>
</ol>
<p>代码写出来就是这几步</p>
<ol>
<li>捕获键盘事件</li>
<li>计算键盘高度并调整<code>UITableView</code>的<code>frame</code></li>
<li>获取当前正在输入的控件</li>
<li>计算其在<code>UITableView</code>中的位置,并滚动到其位置让其可见</li>
</ol>
<p>那么如何一步一步的来实现这些步骤呢?</p>
<a id="more"></a>
<h2 id="捕获键盘事件">捕获键盘事件</h2><figure class="highlight objc"><figcaption><span>捕获键盘事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                         selector:<span class="keyword">@selector</span>(actionKeyboardShow:)</span><br><span class="line">                                             name:<span class="built_in">UIKeyboardDidShowNotification</span></span><br><span class="line">                                           object:<span class="literal">nil</span>];</span><br><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                         selector:<span class="keyword">@selector</span>(actionKeyboardHide:)</span><br><span class="line">                                             name:<span class="built_in">UIKeyboardWillHideNotification</span></span><br><span class="line">                                           object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)actionKeyboardShow:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIKeyboardDidShowNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                             selector:<span class="keyword">@selector</span>(actionKeyboardShow:)</span><br><span class="line">                                                 name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span></span><br><span class="line">                                               object:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)actionKeyboardHide:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                             selector:<span class="keyword">@selector</span>(actionKeyboardShow:)</span><br><span class="line">                                                 name:<span class="built_in">UIKeyboardDidShowNotification</span></span><br><span class="line">                                               object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计算键盘高度并调整UITableView的frame">计算键盘高度并调整<code>UITableView</code>的<code>frame</code></h2><figure class="highlight objc"><figcaption><span>计算键盘高度并调整UITableView的frame</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)actionKeyboardShow:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGSize</span> keyboardSize = [[[notification userInfo] objectForKey:<span class="built_in">UIKeyboardFrameEndUserInfoKey</span>] <span class="built_in">CGRectValue</span>]<span class="variable">.size</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">320</span>, <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.h</span>-keyboardSize<span class="variable">.height</span>);</span><br><span class="line">    </span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIKeyboardDidShowNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                             selector:<span class="keyword">@selector</span>(actionKeyboardShow:)</span><br><span class="line">                                                 name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span></span><br><span class="line">                                               object:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取当前正在输入的控件">获取当前正在输入的控件</h2><p>这里得说一句,普通程序员一般是这样来获取的</p>
<figure class="highlight objc"><figcaption><span>UIView的Category</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIView</span> *) getFirstResponder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.isFirstResponder</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subView <span class="keyword">in</span> <span class="keyword">self</span><span class="variable">.subviews</span>) &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *firstResponder = [subView getFirstResponder];</span><br><span class="line">        <span class="keyword">if</span> (firstResponder != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> firstResponder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然没错,但是文艺程序员应该<a href="http://stackoverflow.com/questions/5029267/is-there-any-way-of-asking-an-ios-view-which-of-its-children-has-first-responder/14135456#14135456" target="_blank" rel="external">这样来获取</a></p>
<figure class="highlight objc"><figcaption><span>UIResponder的Category</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __<span class="keyword">weak</span> <span class="keyword">id</span> currentFirstResponder;</span><br><span class="line"></span><br><span class="line">+(<span class="keyword">id</span>)currentFirstResponder &#123;</span><br><span class="line">    currentFirstResponder = <span class="literal">nil</span>;</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] sendAction:<span class="keyword">@selector</span>(findFirstResponder:) to:<span class="literal">nil</span> from:<span class="literal">nil</span> forEvent:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">return</span> currentFirstResponder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)findFirstResponder:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    currentFirstResponder = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同理,有时候我们需要让键盘消失,那么也有三种做法可以选择</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[someView resignFirstResponder];</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span><span class="variable">.view</span> endEditing:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] sendAction:<span class="keyword">@selector</span>(resignFirstResponder) to:<span class="literal">nil</span> from:<span class="literal">nil</span> forEvent:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>如何选择呢? It’s up to U.</p>
<h2 id="计算其在UITableView中的位置,并滚动到其位置让其可见">计算其在<code>UITableView</code>中的位置,并滚动到其位置让其可见</h2><figure class="highlight objc"><figcaption><span>计算其在UITableView中的位置,并滚动到其位置让其可见</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)actionKeyboardShow:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGSize</span> keyboardSize = [[[notification userInfo] objectForKey:<span class="built_in">UIKeyboardFrameEndUserInfoKey</span>] <span class="built_in">CGRectValue</span>]<span class="variable">.size</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">320</span>, <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.h</span>-keyboardSize<span class="variable">.height</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *v = [<span class="built_in">UIResponder</span> currentFirstResponder];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( v )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ( ![v isKindOfClass:[<span class="built_in">UITableViewCell</span> class]]) &#123;</span><br><span class="line">            v = v<span class="variable">.superview</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">UITableViewCell</span> *cell = (<span class="built_in">UITableViewCell</span>*)v;</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.tableView</span> scrollToRowAtIndexPath:[<span class="keyword">self</span><span class="variable">.tableView</span> indexPathForRowAtPoint:cell<span class="variable">.center</span>] atScrollPosition:<span class="built_in">UITableViewScrollPositionBottom</span> animated:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIKeyboardDidShowNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                             selector:<span class="keyword">@selector</span>(actionKeyboardShow:)</span><br><span class="line">                                                 name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span></span><br><span class="line">                                               object:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题">问题</h1><p>处理表单的时候,一定会碰到的就是输入控件被键盘遮住的问题,如图:</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-11-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti1.png" alt="实例"></p>
<p>左边是普通表单,中间是2B表单,右边是文艺表单.</p>
<h1 id="分析">分析</h1><p>处理这种问题无非就是2个步骤:</p>
<ol>
<li>键盘弹出时,缩小<code>UITableView</code>的<code>frame</code></li>
<li>滚动<code>UITableView</code>,让当前输入的控件可见</li>
</ol>
<p>代码写出来就是这几步</p>
<ol>
<li>捕获键盘事件</li>
<li>计算键盘高度并调整<code>UITableView</code>的<code>frame</code></li>
<li>获取当前正在输入的控件</li>
<li>计算其在<code>UITableView</code>中的位置,并滚动到其位置让其可见</li>
</ol>
<p>那么如何一步一步的来实现这些步骤呢?</p>]]>
    
    </summary>
    
      <category term="表单" scheme="http://adad184.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="键盘" scheme="http://adad184.com/tags/%E9%94%AE%E7%9B%98/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何从多重 modalViewController 中直接返回最底层]]></title>
    <link href="http://adad184.com/2013/10/10/ru-he-cong-duo-zhong-modalviewcontroller-zhong-zhi-jie-fan-hui-zui-di-ceng/"/>
    <id>http://adad184.com/2013/10/10/ru-he-cong-duo-zhong-modalviewcontroller-zhong-zhi-jie-fan-hui-zui-di-ceng/</id>
    <published>2013-10-10T06:59:58.000Z</published>
    <updated>2015-07-10T07:46:41.000Z</updated>
    <content type="html"><![CDATA[<p><code>ModalViewController</code>是经常会用到的展现<code>ViewController</code>的方式,而显示和收起<code>ModalViewController</code>也是很简单的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)presentViewController:(<span class="built_in">UIViewController</span> *)viewControllerToPresent animated: (<span class="built_in">BOOL</span>)flag completion:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))completion <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</span><br><span class="line">- (<span class="keyword">void</span>)dismissViewControllerAnimated: (<span class="built_in">BOOL</span>)flag completion: (<span class="keyword">void</span> (^)(<span class="keyword">void</span>))completion <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)presentModalViewController:(<span class="built_in">UIViewController</span> *)modalViewController animated:(<span class="built_in">BOOL</span>)animated <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">6</span>_0);</span><br><span class="line">- (<span class="keyword">void</span>)dismissModalViewControllerAnimated:(<span class="built_in">BOOL</span>)animated <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">6</span>_0);</span><br></pre></td></tr></table></figure>
<p>但是有的时候我们的需求很特殊,比如在一个<code>ModalViewController</code>里要present另一个<code>ModalViewController</code>,甚至再present一个<code>ModalViewController</code>,<strong>然后</strong>可能在某个时候APP发出一条消息,需要一下子dismiss掉所有的<code>ModalViewController</code>(比如你在使用过程中,突然APP检测到你的登录状态异常,需要重新登录,这个时候所有的页面都需要消失),这时候该如何办呢?</p>
<p>正巧我现在正在做的项目遇到了这个问题,所以研究了一下,得到了以下的解决办法:</p>
<a id="more"></a>
<p>首先,必须知道现在整个APP最顶层的<code>ViewController</code>是哪个,我的做法是在每个<code>ViewController</code>的<code>viewWillAppear</code>中记录一下,当然这个操作是自动完成的,因为每个项目,我都会从<code>UIViewController</code>派生一个子类,然后再从这个子类派生所有的<code>ViewController</code>方便管理.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MMViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    APP<span class="variable">.presentingController</span> = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>得到了顶层的<code>ViewController</code>以后,事情就简单了,我们只要追根溯源,找到最底层的<code>ViewController</code>就行了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( APP<span class="variable">.presentingController</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = <span class="keyword">self</span><span class="variable">.presentingController</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( !vc<span class="variable">.presentingViewController</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (vc<span class="variable">.presentingViewController</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vc = vc<span class="variable">.presentingViewController</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [vc dismissViewControllerAnimated:<span class="literal">YES</span> completion:^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>ModalViewController</code>是经常会用到的展现<code>ViewController</code>的方式,而显示和收起<code>ModalViewController</code>也是很简单的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)presentViewController:(<span class="built_in">UIViewController</span> *)viewControllerToPresent animated: (<span class="built_in">BOOL</span>)flag completion:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))completion <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</span><br><span class="line">- (<span class="keyword">void</span>)dismissViewControllerAnimated: (<span class="built_in">BOOL</span>)flag completion: (<span class="keyword">void</span> (^)(<span class="keyword">void</span>))completion <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)presentModalViewController:(<span class="built_in">UIViewController</span> *)modalViewController animated:(<span class="built_in">BOOL</span>)animated <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">6</span>_0);</span><br><span class="line">- (<span class="keyword">void</span>)dismissModalViewControllerAnimated:(<span class="built_in">BOOL</span>)animated <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">6</span>_0);</span><br></pre></td></tr></table></figure>
<p>但是有的时候我们的需求很特殊,比如在一个<code>ModalViewController</code>里要present另一个<code>ModalViewController</code>,甚至再present一个<code>ModalViewController</code>,<strong>然后</strong>可能在某个时候APP发出一条消息,需要一下子dismiss掉所有的<code>ModalViewController</code>(比如你在使用过程中,突然APP检测到你的登录状态异常,需要重新登录,这个时候所有的页面都需要消失),这时候该如何办呢?</p>
<p>正巧我现在正在做的项目遇到了这个问题,所以研究了一下,得到了以下的解决办法:</p>]]>
    
    </summary>
    
      <category term="UIViewController" scheme="http://adad184.com/tags/UIViewController/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个人总结的一些 APP 的代码实践]]></title>
    <link href="http://adad184.com/2013/09/10/ge-ren-zong-jie-de-yi-xie-app-de-dai-ma-shi-jian/"/>
    <id>http://adad184.com/2013/09/10/ge-ren-zong-jie-de-yi-xie-app-de-dai-ma-shi-jian/</id>
    <published>2013-09-10T06:56:46.000Z</published>
    <updated>2015-07-10T07:46:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="建立一个辅助的APP类,减少对AppDelegate的修改">建立一个辅助的APP类,减少对AppDelegate的修改</h2><p>最开始接触iOS开发的时候,如果需要一些全局变量或者全局函数的时候,总是直接在<code>AppDelegate</code>中添加,因为<code>AppDelegate</code>可以直接获取</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">UIApplication</span> sharedApplication]<span class="variable">.delegate</span></span><br></pre></td></tr></table></figure>
<p>但是时间长了还是觉得这样不太好,<code>AppDelegate</code>本身有其自己的作用(对于App本身的一些事件进行处理,如启动,切换,推送),这样做感觉怪怪的,所以还是自己弄一个专门处理我们所需的全局变亮或者全局函数的对象会更好一些</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//APPHelper.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">APPHelper</span></span></span><br><span class="line"></span><br><span class="line">+ (APPHelper*)call;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) configureWindow:(<span class="built_in">UIWindow</span>*)window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) AppDelegate *delegate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">UIWindow</span> *window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//APPHelper.m</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">APPHelper</span> ()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">APPHelper</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        _delegate = (GGAppDelegate*)[<span class="built_in">UIApplication</span> sharedApplication]<span class="variable">.delegate</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (APPHelper *)call</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span>  onceQueue;</span><br><span class="line">    <span class="keyword">static</span> APPHelper *appInstance;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceQueue, ^&#123;</span><br><span class="line">        appInstance = [[APPHelper alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> appInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIWindow</span> *)window</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.delegate</span><span class="variable">.window</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)configureWindow:(<span class="built_in">UIWindow</span>*)window</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UINavigationController</span> *nav = [[<span class="built_in">UINavigationController</span> alloc] init];</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    window<span class="variable">.rootViewController</span> = nav;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后 在预编译头<code>*.pch</code>中加入</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"AppHelper.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define APP ([APPHelper call])</span></span><br></pre></td></tr></table></figure>
<p>就可以直接在代码的任意一个地方直接使用此类了,如</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//设置APP为圆角</span></span><br><span class="line">APP<span class="variable">.window</span><span class="variable">.layer</span><span class="variable">.cornerRadius</span> = <span class="number">5.0</span>f;</span><br><span class="line">APP<span class="variable">.window</span><span class="variable">.layer</span><span class="variable">.masksToBounds</span> = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>
<h2 id="简单的Autoresizing的宏">简单的Autoresizing的宏</h2><p>一开始我就喜欢代码布局,从来没使用过IB或者SB开发,所以如何在代码中用<strong>Autoresizing</strong>就显得很重要了(那个时候还没有<em>AutoLayout</em>).</p>
<p>为此我还专门研究了一下IB(那个时候还没有SB),并把生成的nib用<a href="https://github.com/akosma/nib2objc/" target="_blank" rel="external">nib2objc</a>转换成了代码来学习.</p>
<p>使用下面的宏,可以很轻松的实现<strong>Autoresizing</strong>.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#define FlexibleT                   UIViewAutoresizingFlexibleTopMargin</span></span><br><span class="line"><span class="preprocessor">#define FlexibleB                   UIViewAutoresizingFlexibleBottomMargin</span></span><br><span class="line"><span class="preprocessor">#define FlexibleL                   UIViewAutoresizingFlexibleLeftMargin</span></span><br><span class="line"><span class="preprocessor">#define FlexibleR                   UIViewAutoresizingFlexibleRightMargin</span></span><br><span class="line"><span class="preprocessor">#define FlexibleH                   UIViewAutoresizingFlexibleHeight</span></span><br><span class="line"><span class="preprocessor">#define FlexibleW                   UIViewAutoresizingFlexibleWidth</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define FixedMarginT                FlexibleW | FlexibleB</span></span><br><span class="line"><span class="preprocessor">#define FixedMarginB                FlexibleW | FlexibleT</span></span><br><span class="line"><span class="preprocessor">#define FixedMarginL                FlexibleH | FlexibleR</span></span><br><span class="line"><span class="preprocessor">#define FixedMarginR                FlexibleH | FlexibleL</span></span><br><span class="line"><span class="preprocessor">#define FixedHorizental             FlexibleW | FlexibleT | FlexibleB</span></span><br><span class="line"><span class="preprocessor">#define FixedVertical               FlexibleH | FlexibleL | FlexibleR</span></span><br><span class="line"><span class="preprocessor">#define FixedALL                    FlexibleW | FlexibleH</span></span><br><span class="line"><span class="preprocessor">#define FixedCenter                 FlexibleL | FlexibleR | FlexibleT | FlexibleB</span></span><br></pre></td></tr></table></figure>
<p>使用上述的宏时,最好对<code>UIView</code>扩展一下,添加下列方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) autoResize:(<span class="built_in">UIViewAutoresizing</span>) type</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.autoresizingMask</span> = mask;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.autoresizesSubviews</span> = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方法如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XXXViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// Custom initialization</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.tableView</span> = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="keyword">self</span><span class="variable">.view</span><span class="variable">.bounds</span> style:<span class="built_in">UITableViewStyleGrouped</span>];</span><br><span class="line">        **[<span class="keyword">self</span><span class="variable">.tableView</span> autoResize:FixedALL];**    </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.tableView</span>];</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于各个宏的作用如下</p>
<p>||              宏             ||          含义        ||<br>||:—————————————:||:——————————:||<br>|| FixedMarginB               ||      下侧距离固定      ||<br>|| FixedMarginL               ||      左侧距离固定      ||<br>|| FixedMarginR               ||      右侧距离固定      ||<br>|| FixedHorizental            ||      左右距离固定      ||<br>|| FixedVertical              ||      上下距离固定      ||<br>|| FixedALL                   ||      四周距离固定      ||<br>|| FixedCenter                ||      居中             ||</p>
<p>从这张图上我们可以看到对于各个值的含义,出自<a href="http://stackoverflow.com/questions/7754851/autoresizing-masks-programmatically-vs-interfact-builder-xib-nib" target="_blank" rel="external">stackoverflow</a></p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-10-ge-ren-zong-jie-de-%5B%3F%5D-xie-app-de-dai-ma-shi-jian1.png" alt="值定义"></p>
<p>至今为止这套宏在我的开发过程中还使用得很好,所以我也没有去研究新的<code>AutoLayout</code>(好像也比较的复杂,),不过在<code>Github</code>上有个对<code>AutoLayout</code>封装得很好的库<a href="https://github.com/cloudkite/Masonry" target="_blank" rel="external">Masonry</a>,有空的时候可以研究一下</p>
<h2 id="一些常用的Category">一些常用的Category</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//  UIColor</span></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过RGBA值(比如红色FF0000FF)生成UIColor</span></span><br><span class="line">+ (<span class="built_in">UIColor</span>* ) colorWithHex:(<span class="keyword">int</span>)color &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> red = (color &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">float</span> green = (color &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">float</span> blue = (color &amp; <span class="number">0x0000ff00</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">float</span> alpha = (color &amp; <span class="number">0x000000ff</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:red/<span class="number">255.0</span> green:green/<span class="number">255.0</span> blue:blue/<span class="number">255.0</span> alpha:alpha/<span class="number">255.0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//  UIImage</span></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//复制当前图片</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)duplicate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGImageRef</span> newCgIm = <span class="built_in">CGImageCreateCopy</span>(<span class="keyword">self</span><span class="variable">.CGImage</span>);</span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = [<span class="built_in">UIImage</span> imageWith<span class="built_in">CGImage</span>:newCgIm scale:<span class="keyword">self</span><span class="variable">.scale</span> orientation:<span class="keyword">self</span><span class="variable">.imageOrientation</span>];</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(newCgIm);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使当前图片可拉伸</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)stretched</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGSize</span> size = <span class="keyword">self</span><span class="variable">.size</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIEdgeInsets</span> insets = <span class="built_in">UIEdgeInsetsMake</span>(truncf(size<span class="variable">.height</span>-<span class="number">1</span>)/<span class="number">2</span>, truncf(size<span class="variable">.width</span>-<span class="number">1</span>)/<span class="number">2</span>, truncf(size<span class="variable">.height</span>-<span class="number">1</span>)/<span class="number">2</span>, truncf(size<span class="variable">.width</span>-<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> resizableImageWithCapInsets:insets];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使当前图片抗锯齿(当图片在旋转时有用, 原理就是在图片周围加1px的透明像素)</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)antiAlias</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> border = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(border, border, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>-<span class="number">2</span>*border, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>-<span class="number">2</span>*border);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *img = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="built_in">CGSizeMake</span>(rect<span class="variable">.size</span><span class="variable">.width</span>,rect<span class="variable">.size</span><span class="variable">.height</span>));</span><br><span class="line">    [<span class="keyword">self</span> drawInRect:<span class="built_in">CGRectMake</span>(-<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>)];</span><br><span class="line">    img = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span><span class="variable">.size</span>);</span><br><span class="line">    [img drawInRect:rect];</span><br><span class="line">    <span class="built_in">UIImage</span>* antiImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> antiImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建纯色的图片</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color Size:(<span class="built_in">CGSize</span>)size</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, size<span class="variable">.width</span>, size<span class="variable">.height</span>);</span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(rect<span class="variable">.size</span>);</span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, [color <span class="built_in">CGColor</span>]);</span><br><span class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [image stretched];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//imageNamed的非缓存版</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)imageName:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *path = [[[<span class="built_in">NSBundle</span> mainBundle] bundlePath] stringByAppendingString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"/%@"</span>,name]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageWithContentsOfFile:path];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//  UIButton</span></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)x</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">float</span>)y</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.y</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">float</span>)w</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.width</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">float</span>)h</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setTagName:(<span class="built_in">NSString</span>*)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.tag</span> = [name hash];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)viewWithName:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> viewWithTag:[name hash]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) autoResize:(<span class="built_in">UIViewAutoresizing</span>)mask</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.autoresizingMask</span> = mask;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.autoresizesSubviews</span> = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setPosition:(<span class="built_in">CGRect</span>)position</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bounds</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, position<span class="variable">.size</span><span class="variable">.width</span>, position<span class="variable">.size</span><span class="variable">.height</span>);</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.center</span> = <span class="built_in">CGPointMake</span>(position<span class="variable">.origin</span><span class="variable">.x</span>,position<span class="variable">.origin</span><span class="variable">.y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//  UIButton</span></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIButton</span>*) buttonWithTarget:(<span class="keyword">id</span>)target action:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">    [btn addTarget:target action:sel forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    <span class="keyword">return</span> btn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) setTextN:(<span class="built_in">NSString</span>*)n H:(<span class="built_in">NSString</span>*)h D:(<span class="built_in">NSString</span>*)d S:(<span class="built_in">NSString</span> *)s</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( n )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setTitle:n forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( h )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setTitle:h forState:<span class="built_in">UIControlStateHighlighted</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( d )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setTitle:d forState:<span class="built_in">UIControlStateDisabled</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( s )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setTitle:s forState:<span class="built_in">UIControlStateSelected</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) setImageN:(<span class="built_in">NSString</span>*)n H:(<span class="built_in">NSString</span>*)h D:(<span class="built_in">NSString</span>*)d S:(<span class="built_in">NSString</span> *)s</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( n )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setImage:[<span class="built_in">UIImage</span> imageName:n] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( h )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setImage:[<span class="built_in">UIImage</span> imageName:h] forState:<span class="built_in">UIControlStateHighlighted</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( d )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setImage:[<span class="built_in">UIImage</span> imageName:d] forState:<span class="built_in">UIControlStateDisabled</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( s )</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setImage:[<span class="built_in">UIImage</span> imageName:s] forState:<span class="built_in">UIControlStateSelected</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( h )</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">self</span> setImage:[<span class="built_in">UIImage</span> imageName:h] forState:<span class="built_in">UIControlStateHighlighted</span> | <span class="built_in">UIControlStateSelected</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//  NSString</span></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span> *) trimHead</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSInteger</span> i;</span><br><span class="line">    <span class="built_in">NSCharacterSet</span> *cs = [<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> length]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ![cs characterIsMember: [<span class="keyword">self</span> characterAtIndex: i]] ) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> substringFromIndex: i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span> *) trimTail</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSInteger</span> i;</span><br><span class="line">    <span class="built_in">NSCharacterSet</span> *cs = [<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet];</span><br><span class="line">    <span class="keyword">for</span>(i = [<span class="keyword">self</span> length] -<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ![cs characterIsMember: [<span class="keyword">self</span> characterAtIndex: i]] ) <span class="keyword">break</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> substringToIndex: (i+<span class="number">1</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *) trimBoth</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> trimHead] trimTail];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)MD5</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ptr = [<span class="keyword">self</span> UTF8String];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> md5Buffer[CC_MD5_DIGEST_LENGTH];</span><br><span class="line">    </span><br><span class="line">    CC_MD5(ptr, strlen(ptr), md5Buffer);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableString</span> *output = [<span class="built_in">NSMutableString</span> stringWithCapacity:CC_MD5_DIGEST_LENGTH * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CC_MD5_DIGEST_LENGTH; i++) </span><br><span class="line">        [output appendFormat:<span class="string">@"%02x"</span>,md5Buffer[i]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)equals:(<span class="built_in">NSString</span> *)str</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> compare:str] == <span class="built_in">NSOrderedSame</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)heightByFont:(<span class="built_in">UIFont</span> *)font width:(<span class="built_in">CGFloat</span>)width</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sizeWithFont:font</span><br><span class="line">            constrainedToSize:<span class="built_in">CGSizeMake</span>(width, <span class="built_in">CGFLOAT_MAX</span>)</span><br><span class="line">                lineBreakMode:<span class="built_in">NSLineBreakByWordWrapping</span>]<span class="variable">.height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//  NSDictionary</span></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使取得的值不会使NSNull,在JSON解析的时候会有这种问题,有时候服务器返回了 &#123;"test":null&#125;,但是被解析成了NSNull,这时APP这边处理起来会比较麻烦</span></span><br><span class="line">- (<span class="keyword">id</span>)objectForKeyNotNull:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">id</span> object = [<span class="keyword">self</span> objectForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (object == [<span class="built_in">NSNull</span> null])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//  NSAttributedString</span></span><br><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)heightByWidth:(<span class="built_in">CGFloat</span>)width</span><br><span class="line">&#123;</span><br><span class="line">    CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString((__bridge <span class="built_in">CFAttributedStringRef</span>)<span class="keyword">self</span>);</span><br><span class="line">    <span class="built_in">CGSize</span> targetSize = <span class="built_in">CGSizeMake</span>(width, <span class="built_in">CGFLOAT_MAX</span>);</span><br><span class="line">    <span class="built_in">CGSize</span> fitSize = CTFramesetterSuggestFrameSizeWithConstraints(framesetter, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, [<span class="keyword">self</span> length]), <span class="literal">NULL</span>, targetSize, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">CFRelease</span>(framesetter);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fitSize<span class="variable">.height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="建立一个辅助的APP类,减少对AppDelegate的修改">建立一个辅助的APP类,减少对AppDelegate的修改</h2><p>最开始接触iOS开发的时候,如果需要一些全局变量或者全局函数的时候,总是直接在<code>AppDelegate</code>中添加,因为<code>AppDelegate</code>可以直接获取</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">UIApplication</span> sharedApplication]<span class="variable">.delegate</span></span><br></pre></td></tr></table></figure>
<p>但是时间长了还是觉得这样不太好,<code>AppDelegate</code>本身有其自己的作用(对于App本身的一些事件进行处理,如启动,切换,推送),这样做感觉怪怪的,所以还是自己弄一个专门处理我们所需的全局变亮或者全局函数的对象会更好一些</p>]]>
    
    </summary>
    
      <category term="实践" scheme="http://adad184.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NimbusKit 介绍与使用实践]]></title>
    <link href="http://adad184.com/2013/08/06/at-nimbus-jie-shao-yu-shi-yong-shi-jian/"/>
    <id>http://adad184.com/2013/08/06/at-nimbus-jie-shao-yu-shi-yong-shi-jian/</id>
    <published>2013-08-06T08:51:28.000Z</published>
    <updated>2015-07-10T07:46:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p><a href="http://nimbuskit.info/" target="_blank" rel="external">NimbusKit 官网</a><br><a href="https://github.com/jverkoey/nimbus" target="_blank" rel="external">NimbusKit 源码</a></p>
<p>NimbusKit是一组用于快速开发的iOS框架,是源自<em>Facebook</em>的著名框架<code>Three20</code>的替代者,包括下面几大类的功能</p>
<ul>
<li>Attributed Label    -   富文字Label</li>
<li>Badge - 数字角标</li>
<li>Interapp - 应用间交互</li>
<li>Launcher - 类桌面启动器</li>
<li>Network Image - 网络图片下载显示</li>
<li>Photo Albums - 相册</li>
<li>Web Controller - 浏览器</li>
<li>Table Models - 表格数据模型</li>
<li>Overview - 直观方便的调试分析内嵌图形工具</li>
<li>等…</li>
</ul>
<p>NimbusKit的demo很直观,编译运行以后就可以体验其强大的功能了</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian2.png" alt="Nimbus Demo"></p>
<a id="more"></a>
<h1 id="使用">使用</h1><p>因为之前的项目的富文本设计要支持<code>iOS5</code>和<code>iOS6</code>,而<code>attributeString</code>特性只有iOS6支持,所以使用了<em>NIAttributedLabel</em></p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian1.png" alt="富文本"></p>
<p>这次新的项目由于有大量的表单页面,考虑到完全自己实现太耗时间,所以又重新考虑了<code>NimbusKit</code>的<code>Table Models</code></p>
<p>NimbusKit提供的表单组件如下</p>
<p>|| 组件                               || 功能           ||<br>||:————————————————:||:——————:||<br>|| NIRadioGroup                     || 多选一      ||<br>|| NITextInputFormElement           || 文本输入         ||<br>|| NISwitchFormElement              || 开关           ||<br>|| NISliderFormElement              || 滑动条      ||<br>|| NISegmentedControlFormElement    || 分段           ||<br>|| NIDatePickerFormElement          || 时间选择     ||<br>|| NITitleCellObject                || 单行文本         ||<br>|| NISubtitleCellObject             || 主副文本         ||<br>|| …                              || 等其他      ||</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian4.png" alt="基础表单组件"></p>
<p>这里首先要介绍一下NimbusKit的Table-Modal-Action模型,先上一段简单代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GGJSZController</span> ()</span></span><br><span class="line">&lt;</span><br><span class="line"><span class="built_in">UITableViewDelegate</span>,</span><br><span class="line"><span class="built_in">UITextFieldDelegate</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UITableView</span> *tableView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NITableViewModel* model;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NITableViewActions *action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NIActionBlock queryBlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GGJSZController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.tableView</span> = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="keyword">self</span><span class="variable">.view</span><span class="variable">.bounds</span> style:<span class="built_in">UITableViewStyleGrouped</span>];</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.tableView</span>];</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span> configureBlock];</span><br><span class="line">        [<span class="keyword">self</span> configureForm];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)configureBlock</span><br><span class="line">&#123;</span><br><span class="line">    __<span class="keyword">weak</span> GGUserController *weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.queryBlock</span> = ^<span class="built_in">BOOL</span>(<span class="keyword">id</span> object, <span class="built_in">UIViewController</span> *controller, <span class="built_in">NSIndexPath</span>* indexPath) &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)configureForm</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.action</span> = [[NITableViewActions alloc] initWithTarget:<span class="keyword">self</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span>* tableContents =</span><br><span class="line">    [<span class="built_in">NSArray</span> arrayWithObjects:</span><br><span class="line">     <span class="string">@"请输入驾驶证号"</span>,</span><br><span class="line">     [NITextFieldFormElement textFieldElementWithID:<span class="number">0</span> labelText:<span class="string">@"驾驶证号"</span> placeholderText:<span class="string">@"请输入驾驶证号"</span> value:TESTID delegate:<span class="keyword">self</span>],</span><br><span class="line">     [<span class="keyword">self</span><span class="variable">.action</span> attachToObject:[NITapCellObject objectWithTitle:<span class="string">@"查询"</span> color:COLOR_TAP]</span><br><span class="line">                 navigationBlock:<span class="keyword">self</span><span class="variable">.queryBlock</span>],</span><br><span class="line">     <span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.model</span> = [[NITableViewModel alloc] initWithSectionedArray:tableContents</span><br><span class="line">                                                         delegate:(<span class="keyword">id</span>)[NICellFactory class]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.dataSource</span> = <span class="keyword">self</span><span class="variable">.model</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.delegate</span> = [<span class="keyword">self</span><span class="variable">.action</span> forwardingTo:<span class="keyword">self</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这段代码的效果如图</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian3.png" alt="表单效果"></p>
<p>其关键的地方就是</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NITableViewModel* model;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NITableViewActions *action;</span><br></pre></td></tr></table></figure>
<p><code>NITableViewModel</code> 接管了<code>UITableView</code>的<code>dataSource</code>,并用一种更简单直观的方式创建表格内容,只需要创建对应的tableContents即可生成表单</p>
<p><code>NITableViewActions</code> 接管了<code>UITableView</code>的<code>delegate</code>,提供了<code>NITableViewModel</code>中已连接对象(attachToObject)对点击事件以<em>block</em>的方式进行响应</p>
<p><code>NITableViewModel</code>与<code>NITableViewActions</code>的恰当配合则能够生成所需的表单</p>
<h1 id="自定义表单">自定义表单</h1><p>在日常的开发中,仅仅依靠NimbusKit自带的表单组件肯定是无法完全满足我们的需求的,所以自定义表单组件则是非常必要的功能,而在NimbusKit中自定义表单组件也是非常容易的,比如自带的表单组件中只有独立的Label或者Input组件,并没有像上图那样左边为Label右边为Input的组件,而上图中所见的输入身份证的组件,即为我自定义的表单组件之一,其代码如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NITextFieldFormElement</span> : <span class="title">NIFormElement</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)textFieldElementWithID:(<span class="built_in">NSInteger</span>)elementID labelText:(<span class="built_in">NSString</span>*)labelText placeholderText:(<span class="built_in">NSString</span> *)placeholderText value:(<span class="built_in">NSString</span> *)value delegate:(<span class="keyword">id</span>&lt;<span class="built_in">UITextFieldDelegate</span>&gt;)delegate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* labelText;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* placeholderText;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* value;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">id</span>&lt;<span class="built_in">UITextFieldDelegate</span>&gt; delegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NITextFieldFormElementCell</span> : <span class="title">NIFormElementCell</span> &lt;<span class="title">UITextFieldDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, NI_STRONG) GGTextField* textField;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NITextFieldFormElement</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)textFieldElementWithID:(<span class="built_in">NSInteger</span>)elementID labelText:(<span class="built_in">NSString</span> *)labelText placeholderText:(<span class="built_in">NSString</span> *)placeholderText value:(<span class="built_in">NSString</span> *)value delegate:(<span class="keyword">id</span>&lt;<span class="built_in">UITextFieldDelegate</span>&gt;)delegate</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    NITextFieldFormElement* element = [<span class="keyword">super</span> elementWithID:elementID];</span><br><span class="line">    element<span class="variable">.labelText</span> = labelText;</span><br><span class="line">    element<span class="variable">.placeholderText</span> = placeholderText;</span><br><span class="line">    element<span class="variable">.value</span> = value;</span><br><span class="line">    element<span class="variable">.delegate</span> = delegate;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)cellClass &#123;</span><br><span class="line">    <span class="keyword">return</span> [NITextFieldFormElementCell class];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NITextFieldFormElementCell</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> textField = _textField;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">- (<span class="keyword">id</span>)initWithStyle:(<span class="built_in">UITableViewCellStyle</span>)style reuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> initWithStyle:style reuseIdentifier:reuseIdentifier])) &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.selectionStyle</span> = <span class="built_in">UITableViewCellSelectionStyleNone</span>;</span><br><span class="line">        </span><br><span class="line">        _textField = [[GGTextField alloc] init];</span><br><span class="line">        [_textField setTag:<span class="keyword">self</span><span class="variable">.element</span><span class="variable">.elementID</span>];</span><br><span class="line">        [_textField setAdjustsFontSizeToFitWidth:<span class="literal">YES</span>];</span><br><span class="line">        [_textField setMinimumFontSize:<span class="number">10.0</span>f];</span><br><span class="line">        [_textField setTextAlignment:<span class="built_in">NSTextAlignmentRight</span>];</span><br><span class="line">        [_textField addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(textFieldDidChangeValue) forControlEvents:<span class="built_in">UIControlEventAllEditingEvents</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.contentView</span> addSubview:_textField];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> labelWidth = <span class="number">80</span>;</span><br><span class="line">    <span class="built_in">CGRect</span> frame = <span class="built_in">UIEdgeInsetsInsetRect</span>(<span class="keyword">self</span><span class="variable">.contentView</span><span class="variable">.bounds</span>, <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">    frame = <span class="built_in">CGRectMake</span>(frame<span class="variable">.origin</span><span class="variable">.x</span>+labelWidth, frame<span class="variable">.origin</span><span class="variable">.y</span>, frame<span class="variable">.size</span><span class="variable">.width</span>-labelWidth, frame<span class="variable">.size</span><span class="variable">.height</span>);</span><br><span class="line">    _textField<span class="variable">.frame</span> = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">- (<span class="keyword">void</span>)prepareForReuse &#123;</span><br><span class="line">    [<span class="keyword">super</span> prepareForReuse];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.textLabel</span><span class="variable">.text</span> = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    _textField<span class="variable">.placeholder</span> = <span class="literal">nil</span>;</span><br><span class="line">    _textField<span class="variable">.text</span> = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)shouldUpdateCellWithObject:(NITextFieldFormElement *)textfieldElement &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">super</span> shouldUpdateCellWithObject:textfieldElement]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.textLabel</span><span class="variable">.text</span> = textfieldElement<span class="variable">.labelText</span>;</span><br><span class="line">        </span><br><span class="line">        _textField<span class="variable">.placeholder</span> = textfieldElement<span class="variable">.placeholderText</span>;</span><br><span class="line">        _textField<span class="variable">.text</span> = textfieldElement<span class="variable">.value</span>;</span><br><span class="line">        _textField<span class="variable">.delegate</span> = textfieldElement<span class="variable">.delegate</span>;</span><br><span class="line">        </span><br><span class="line">        _textField<span class="variable">.tag</span> = <span class="keyword">self</span><span class="variable">.tag</span>;</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span> setNeedsLayout];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">- (<span class="keyword">void</span>)textFieldDidChangeValue &#123;</span><br><span class="line">    NITextFieldFormElement* textInputElement = (NITextFieldFormElement *)<span class="keyword">self</span><span class="variable">.element</span>;</span><br><span class="line">    textInputElement<span class="variable">.value</span> = _textField<span class="variable">.text</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>上述代码给出了如何自定义NimbusKit中的表单组件,可见表单组件几乎都是<code>NIFormElement</code>的子类,只要基于此类,定义显示所需的控件到<code>NIFormElement</code>内部,并调整对应位置即可</p>
<p>至此我们已经知道如何自定义组件了,但是如果有稍微复杂的需求的话,要如何实现呢? </p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian5.png" alt="复杂的自定义组件"></p>
<p>如图,输入<strong><em>出发城市</em></strong>和<strong><em>目的城市</em></strong>的组件也是一个自定义组件,除了有很多Label和Input之外,其高度也跟普通的组件不一样.</p>
<p>其实自定义高度很简单,只要重载<code>NICell</code>(比如<code>NITextFieldFormElementCell</code>)的此方法并返回所需的高度</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">CGFloat</span>)heightForObject:(<span class="keyword">id</span>)object atIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath tableView:(<span class="built_in">UITableView</span> *)tableView;</span><br></pre></td></tr></table></figure>
<p>然后在使用的ViewController中调用UITableView的方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> height = tableView<span class="variable">.rowHeight</span>;</span><br><span class="line">    <span class="keyword">id</span> object = [(NITableViewModel *)tableView<span class="variable">.dataSource</span> objectAtIndexPath:indexPath];</span><br><span class="line">    <span class="keyword">id</span> class = [object cellClass];</span><br><span class="line">    <span class="keyword">if</span> ([class respondsToSelector:<span class="keyword">@selector</span>(heightForObject:atIndexPath:tableView:)]) &#123;</span><br><span class="line">        height = [class heightForObject:object atIndexPath:indexPath tableView:tableView];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即可自定义此组件的高度了(其实直接在上述方法中直接返回对应的高度即可,但是上述代码则有很高的通用性)</p>
<h1 id="小结">小结</h1><p>至此,我们已经了解了<code>NimbusKit</code>的基本功能和如何对其表单模型进行自定义.</p>
<p>除了此次着重介绍的Table-Action模型之外,其实<code>NimbusKit</code>还有很多值得使用的功能,如<strong>Launcher</strong>功能,<strong>Overview</strong>功能,实用且集成起来很简单,在这就不一一介绍了.</p>
<p>最后,简单介绍一下NimbusKit的作者<a href="http://jeffverkoeyen.com/" target="_blank" rel="external">Jeff Verkoeyen</a>,其主要作品有:</p>
<ul>
<li>Facebook for iPad ( June 2010 - June 2011 )</li>
<li>Google Maps for iPhone ( June 2012 - April 2013 )</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p><a href="http://nimbuskit.info/">NimbusKit 官网</a><br><a href="https://github.com/jverkoey/nimbus">NimbusKit 源码</a></p>
<p>NimbusKit是一组用于快速开发的iOS框架,是源自<em>Facebook</em>的著名框架<code>Three20</code>的替代者,包括下面几大类的功能</p>
<ul>
<li>Attributed Label    -   富文字Label</li>
<li>Badge - 数字角标</li>
<li>Interapp - 应用间交互</li>
<li>Launcher - 类桌面启动器</li>
<li>Network Image - 网络图片下载显示</li>
<li>Photo Albums - 相册</li>
<li>Web Controller - 浏览器</li>
<li>Table Models - 表格数据模型</li>
<li>Overview - 直观方便的调试分析内嵌图形工具</li>
<li>等…</li>
</ul>
<p>NimbusKit的demo很直观,编译运行以后就可以体验其强大的功能了</p>
<p><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian2.png" alt="Nimbus Demo"></p>]]>
    
    </summary>
    
      <category term="NimbusKit" scheme="http://adad184.com/tags/NimbusKit/"/>
    
      <category term="教程" scheme="http://adad184.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="经验介绍" scheme="http://adad184.com/categories/%E7%BB%8F%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何让 UITableViewCell 中的 imageView 大小固定]]></title>
    <link href="http://adad184.com/2013/07/05/ru-he-rang-uitableviewcell-zhong-de-imageview-da-xiao-gu-ding/"/>
    <id>http://adad184.com/2013/07/05/ru-he-rang-uitableviewcell-zhong-de-imageview-da-xiao-gu-ding/</id>
    <published>2013-07-05T08:41:39.000Z</published>
    <updated>2015-07-10T07:47:13.000Z</updated>
    <content type="html"><![CDATA[<p><code>UITableView</code>可以算是使用频率最高的组件之一的,在开发过程中经常需要展示一些简单的信息列表<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06%2013.33.25.png" alt="常见列表布局"></p>
<p>如图,很多页面其实就是这种展示结果,通常需要<code>imageView</code>,<code>textLabel</code>,<code>detailTextlabel</code>,而<code>UITableViewCell</code>本身提供了方便的自动布局(当有图片和没图片时,textLabel和detailLabel的位置会左右自动调整). 但是图片的大小却是没有办法固定的(直接设置<code>imageView.frame</code>是无法固定<code>imageView</code>的大小的),那么一般来说解决这个问题的办法有两种:</p>
<ul>
<li>固定显示图片的大小(包括PlaceHolder)</li>
<li>自定义tableViewCell,添加自定义的<code>imageView</code>,<code>textLabel</code>和<code>detailTextLabel</code></li>
</ul>
<p>这两种方式都可以解决这个问题,但是这两种方式其实都挺麻烦的,能否直接固定imageView的大小呢? 方法是有的,只需要重载<code>layoutSubviews</code>即可</p>
<a id="more"></a>
<figure class="highlight objc"><figcaption><span>派生UITableViewCell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//自定义一个Cell</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MMCell</span> : <span class="title">UITableViewCell</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MMCell</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载layoutSubviews</span></span><br><span class="line">- (<span class="keyword">void</span>)layoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *img = <span class="keyword">self</span><span class="variable">.imageView</span><span class="variable">.image</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.imageView</span><span class="variable">.image</span> = [<span class="built_in">UIImage</span> imageName:<span class="string">@"res/PlaceHolder.png"</span>];</span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.imageView</span><span class="variable">.image</span> = img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这样,我们只要使用<code>MMCell</code>就可以固定<code>imageView</code>的大小了,且大小为<code>PlaceHolder.png</code>的大小(一般来说这种页面都会使用一个<code>PlaceHolder.png</code>来显示默认图片).</p>
<p>原理是在<code>UItableVeiw</code>的<code>layoutSubviews</code>调用时,会根据<code>imageView.image</code>的大小来调整<code>imageView</code>,<code>textLabel</code>,<code>detailTextLabel</code>的位置,在此之前我们先将<code>imageView.image</code>设置为<code>PlaceHolder.png</code>图片,等待重新布局完后再将原本的图片设置回去就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>UITableView</code>可以算是使用频率最高的组件之一的,在开发过程中经常需要展示一些简单的信息列表<br><img src="http://7xibqv.com1.z0.glb.clouddn.com/2013-12-06%2013.33.25.png" alt="常见列表布局"></p>
<p>如图,很多页面其实就是这种展示结果,通常需要<code>imageView</code>,<code>textLabel</code>,<code>detailTextlabel</code>,而<code>UITableViewCell</code>本身提供了方便的自动布局(当有图片和没图片时,textLabel和detailLabel的位置会左右自动调整). 但是图片的大小却是没有办法固定的(直接设置<code>imageView.frame</code>是无法固定<code>imageView</code>的大小的),那么一般来说解决这个问题的办法有两种:</p>
<ul>
<li>固定显示图片的大小(包括PlaceHolder)</li>
<li>自定义tableViewCell,添加自定义的<code>imageView</code>,<code>textLabel</code>和<code>detailTextLabel</code></li>
</ul>
<p>这两种方式都可以解决这个问题,但是这两种方式其实都挺麻烦的,能否直接固定imageView的大小呢? 方法是有的,只需要重载<code>layoutSubviews</code>即可</p>]]>
    
    </summary>
    
      <category term="UITableView" scheme="http://adad184.com/tags/UITableView/"/>
    
      <category term="技巧心得" scheme="http://adad184.com/categories/%E6%8A%80%E5%B7%A7%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
</feed>